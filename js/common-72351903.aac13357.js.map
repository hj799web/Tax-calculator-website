{"version":3,"file":"js/common-72351903.aac13357.js","mappings":"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","sources":["webpack://my-new-project/./src/domains/budget/config/budgetScenarioModifiers.js","webpack://my-new-project/./src/domains/budget/store/multiYearSettings.js","webpack://my-new-project/./src/domains/budget/utils/generateExportPDF.js","webpack://my-new-project/./src/domains/budget/utils/projectionAdapters.js","webpack://my-new-project/./src/domains/budget/utils/projections.js"],"sourcesContent":["/**\n * Budget Scenario Modifiers\n * \n * Simplified sentiment modifiers for budget presets.\n * Each modifier ranges from -2.0 to +2.0, where:\n * -2.0: Strongly negative\n * -1.0: Negative\n *  0.0: Neutral\n * +1.0: Positive\n * +2.0: Strongly positive\n */\n\nexport const budgetScenarioModifiers = {\n  // ===== BALANCED BUDGET =====\n  balancedBudget: {\n    label: \"⚖️ Balanced Budget\",\n    description: \"budgetScenarios.balancedBudget.description\",\n    provinces: {\n      Ontario: 1.0,           // Positive\n      Quebec: 0.0,            // Neutral\n      \"British Columbia\": 0.5, // Slightly positive\n      Alberta: 1.0,           // Positive\n      Saskatchewan: 1.0,      // Positive\n      Manitoba: 0.5,          // Slightly positive\n      NovaScotia: 0.0,        // Neutral\n      NewBrunswick: 0.0,      // Neutral\n      \"Prince Edward Island\": 0.0, // Neutral\n      \"Newfoundland and Labrador\": 0.0, // Neutral\n      Yukon: 0.0,            // Neutral\n      \"Northwest Territories\": 0.0, // Neutral\n      Nunavut: 0.0           // Neutral\n    },\n    demographics: {\n      youth: 0.0,            // Neutral\n      seniors: 0.5,          // Slightly positive\n      families: 0.5,         // Slightly positive\n      workers: 1.0,          // Positive\n      students: 0.0,         // Neutral\n      urban: 0.5,            // Slightly positive\n      rural: 1.0,            // Positive\n      indigenous: 0.0        // Neutral\n    },\n    sectors: {\n      business: 1.0,         // Positive\n      manufacturing: 0.5,    // Slightly positive\n      technology: 0.0,       // Neutral\n      environment: 0.0,      // Neutral\n      healthcare: 0.5,       // Slightly positive\n      defense: 0.5,          // Slightly positive\n      education: 0.0,        // Neutral\n      energy: 0.5,          // Slightly positive\n      publicSector: 0.0,     // Neutral\n      creativeIndustries: 0.0, // Neutral\n      tourism: 0.5,         // Slightly positive\n      agriculture: 0.5,     // Slightly positive\n      indigenous: 0.0       // Neutral\n    }\n  },\n\n  // ===== PROGRESSIVE EXPANSION =====\n  progressiveExpansion: {\n    label: \"🌱 Progressive Expansion\",\n    description: \"budgetScenarios.socialPrograms.description\",\n    provinces: {\n      Ontario: 1.0,          // Positive\n      Quebec: 1.0,           // Positive\n      \"British Columbia\": 1.0, // Positive\n      Alberta: -1.0,         // Negative\n      Saskatchewan: -1.0,    // Negative\n      Manitoba: 0.0,         // Neutral\n      NovaScotia: 1.0,       // Positive\n      NewBrunswick: 1.0,     // Positive\n      \"Prince Edward Island\": 1.0, // Positive\n      \"Newfoundland and Labrador\": 1.0, // Positive\n      Yukon: 1.0,           // Positive\n      \"Northwest Territories\": 1.0, // Positive\n      Nunavut: 1.0          // Positive\n    },\n    demographics: {\n      youth: 1.0,           // Positive\n      seniors: 1.0,         // Positive\n      families: 1.0,        // Positive\n      workers: 0.5,         // Slightly positive\n      students: 1.0,        // Positive\n      urban: 1.0,           // Positive\n      rural: -0.5,          // Slightly negative\n      indigenous: 1.0       // Positive\n    },\n    sectors: {\n      // Core sectors with maximum positive impact\n      education: 2.0,       // Strongly positive - Major investments in education, research, and student support\n      creativeIndustries: 2.0, // Strongly positive - Strong support for arts, culture, and creative sector development\n      publicSector: 2.0,    // Strongly positive - Major expansion of public services and infrastructure\n      healthcare: 2.0,      // Strongly positive - Significant healthcare investments\n      environment: 2.0,     // Strongly positive - Major climate and environmental initiatives\n      \n      // Supporting sectors with strong positive impact\n      technology: 1.5,      // Very positive - Digital infrastructure and innovation support\n      indigenous: 1.5,      // Very positive - Strong support for indigenous initiatives\n      \n      // Sectors with moderate positive impact\n      tourism: 1.0,         // Positive - Cultural and infrastructure investments\n      agriculture: 1.0,     // Positive - Support for sustainable agriculture\n      \n      // Neutral sectors\n      business: 0.0,        // Neutral - Balanced approach to business support\n      manufacturing: 0.0,   // Neutral - No significant impact\n      defense: 0.0,         // Neutral - No significant impact\n      energy: 0.0          // Neutral - Balanced energy transition approach\n    }\n  },\n\n  // ===== INFRASTRUCTURE BUILDER =====\n  infrastructureBuilder: {\n    label: \"🏗️ Infrastructure Builder\",\n    description: \"budgetScenarios.infrastructure.description\",\n    provinces: {\n      Ontario: 0.0,          // Neutral\n      Quebec: 1.0,           // Positive\n      \"British Columbia\": 1.0, // Positive\n      Alberta: -0.5,         // Slightly negative\n      Saskatchewan: -0.5,    // Slightly negative\n      Manitoba: 1.0,         // Positive\n      NovaScotia: 1.0,       // Positive\n      NewBrunswick: 1.0,     // Positive\n      \"Prince Edward Island\": 1.0, // Positive\n      \"Newfoundland and Labrador\": 1.0, // Positive\n      Yukon: 1.0,           // Positive\n      \"Northwest Territories\": 1.0, // Positive\n      Nunavut: 1.0          // Positive\n    },\n    demographics: {\n      youth: 0.0,           // Neutral\n      seniors: 0.0,         // Neutral\n      families: 0.5,        // Slightly positive\n      workers: 1.0,         // Positive\n      students: 0.0,        // Neutral\n      urban: 1.0,           // Positive\n      rural: 1.0,           // Positive\n      indigenous: 1.0       // Positive\n    },\n    sectors: {\n      business: 1.0,        // Positive\n      manufacturing: 1.0,   // Positive\n      technology: 0.5,      // Slightly positive\n      environment: 0.5,     // Slightly positive\n      healthcare: 0.0,      // Neutral\n      defense: 0.0,         // Neutral\n      education: 0.0,       // Neutral\n      energy: 0.5,         // Slightly positive\n      publicSector: 0.5,   // Slightly positive\n      creativeIndustries: 0.0, // Neutral\n      tourism: 0.5,        // Slightly positive\n      agriculture: 0.5,    // Slightly positive\n      indigenous: 1.0      // Positive\n    }\n  },\n\n  // ===== BUSINESS FRIENDLY =====\n  businessFriendly: {\n    label: \"💼 Business Friendly\",\n    description: \"budgetScenarios.businessFriendly.description\",\n    provinces: {\n      Alberta: 1.0,          // Positive\n      Saskatchewan: 1.0,     // Positive\n      Ontario: 0.5,          // Slightly positive\n      \"British Columbia\": 0.0, // Neutral\n      Manitoba: 0.0,         // Neutral\n      \"Northwest Territories\": 0.0, // Neutral\n      Yukon: 0.0,           // Neutral\n      Nunavut: 0.0,         // Neutral\n      \"Newfoundland and Labrador\": 0.0, // Neutral\n      NovaScotia: 0.0,      // Neutral\n      NewBrunswick: 0.0,    // Neutral\n      \"Prince Edward Island\": 0.0, // Neutral\n      Quebec: 0.0           // Neutral\n    },\n    demographics: {\n      rural: 0.5,           // Slightly positive\n      seniors: 0.0,         // Neutral\n      workers: 0.0,         // Neutral\n      families: 0.0,        // Neutral\n      urban: 0.0,           // Neutral\n      indigenous: 0.0,      // Neutral\n      youth: 0.0,           // Neutral\n      students: 0.0         // Neutral\n    },\n    sectors: {\n      business: 2.0,        // Strongly positive\n      agriculture: 0.5,     // Slightly positive\n      energy: 0.5,         // Slightly positive\n      manufacturing: 0.5,  // Slightly positive\n      technology: 0.5,     // Slightly positive\n      defense: 0.0,        // Neutral\n      tourism: 0.0,        // Neutral\n      healthcare: 0.0,     // Neutral\n      education: 0.0,      // Neutral\n      publicSector: 0.0,   // Neutral\n      creativeIndustries: 0.0, // Neutral\n      indigenous: 0.0,     // Neutral\n      environment: 0.0     // Neutral\n    }\n  },\n\n  // ===== GREEN GROWTH STIMULUS =====\n  greenGrowthStimulus: {\n    label: \"🌿 Green Growth Stimulus\",\n    description: \"budgetScenarios.climateForward.description\",\n    provinces: {\n      \"British Columbia\": 1.0, // Positive\n      Quebec: 1.0,          // Positive\n      Ontario: 0.5,         // Slightly positive\n      \"Newfoundland and Labrador\": 0.5, // Slightly positive\n      Manitoba: 0.5,        // Slightly positive\n      \"Prince Edward Island\": 0.5, // Slightly positive\n      NovaScotia: 0.5,      // Slightly positive\n      NewBrunswick: 0.5,    // Slightly positive\n      Yukon: 0.5,          // Slightly positive\n      \"Northwest Territories\": 0.5, // Slightly positive\n      Nunavut: 0.5,        // Slightly positive\n      Saskatchewan: -1.0,   // Negative\n      Alberta: -1.0        // Negative\n    },\n    demographics: {\n      youth: 1.0,          // Positive\n      students: 1.0,       // Positive\n      urban: 1.0,          // Positive\n      families: 0.5,       // Slightly positive\n      seniors: 0.0,        // Neutral\n      workers: 0.0,        // Neutral\n      rural: -0.5,         // Slightly negative\n      indigenous: 1.0      // Positive\n    },\n    sectors: {\n      environment: 2.0,    // Strongly positive\n      indigenous: 1.0,     // Positive\n      technology: 1.0,     // Positive\n      healthcare: 0.5,     // Slightly positive\n      education: 0.5,      // Slightly positive\n      publicSector: 0.5,   // Slightly positive\n      tourism: 0.5,        // Slightly positive\n      defense: 0.0,        // Neutral\n      manufacturing: 0.0,  // Neutral\n      business: 0.0,       // Neutral\n      energy: 0.0,         // Neutral\n      agriculture: 0.0,    // Neutral\n      creativeIndustries: 0.0 // Neutral\n    }\n  },\n\n  // ===== SECURITY FIRST =====\n  securityFirst: {\n    label: \"🛡️ Security First\",\n    description: \"budgetScenarios.nationalSecurity.description\",\n    provinces: {\n      Alberta: 1.0,         // Positive\n      Saskatchewan: 1.0,    // Positive\n      Manitoba: 0.5,        // Slightly positive\n      Yukon: 0.5,          // Slightly positive\n      \"Northwest Territories\": 0.5, // Slightly positive\n      Nunavut: 0.5,        // Slightly positive\n      NovaScotia: 0.0,     // Neutral\n      NewBrunswick: 0.0,   // Neutral\n      \"Prince Edward Island\": 0.0, // Neutral\n      \"Newfoundland and Labrador\": 0.0, // Neutral\n      Ontario: 0.0,        // Neutral\n      \"British Columbia\": 0.0, // Neutral\n      Quebec: -0.5         // Slightly negative\n    },\n    demographics: {\n      rural: 0.5,          // Slightly positive\n      seniors: 0.5,        // Slightly positive\n      workers: 0.0,        // Neutral\n      families: 0.0,       // Neutral\n      urban: 0.0,          // Neutral\n      indigenous: 0.0,     // Neutral\n      students: 0.0,       // Neutral\n      youth: 0.0          // Neutral\n    },\n    sectors: {\n      defense: 2.0,        // Strongly positive\n      publicSector: 1.0,   // Positive\n      business: 0.5,       // Slightly positive\n      manufacturing: 0.5,  // Slightly positive\n      technology: 0.5,     // Slightly positive\n      energy: 0.0,         // Neutral\n      tourism: 0.0,        // Neutral\n      agriculture: 0.0,    // Neutral\n      education: 0.0,      // Neutral\n      healthcare: 0.0,     // Neutral\n      environment: 0.0,    // Neutral\n      creativeIndustries: 0.0, // Neutral\n      indigenous: 0.0      // Neutral\n    }\n  },\n\n  // ===== AUSTERITY PLAN =====\n  austerityPlan: {\n    label: \"✂️ Austerity Plan\",\n    description: \"budgetScenarios.fiscalDiscipline.description\",\n    provinces: {\n      Ontario: 0.0,         // Neutral\n      Quebec: -0.5,         // Slightly negative\n      \"British Columbia\": -0.5, // Slightly negative\n      Alberta: 1.0,         // Positive\n      Saskatchewan: 0.5,    // Slightly positive\n      Manitoba: -0.5,       // Slightly negative\n      NovaScotia: -1.0,     // Negative\n      NewBrunswick: -1.0,   // Negative\n      \"Prince Edward Island\": -1.0, // Negative\n      \"Newfoundland and Labrador\": -1.0, // Negative\n      Yukon: -1.0,         // Negative\n      \"Northwest Territories\": -1.0, // Negative\n      Nunavut: -1.0        // Negative\n    },\n    demographics: {\n      youth: -1.0,         // Negative\n      seniors: -0.5,       // Slightly negative\n      families: -0.5,      // Slightly negative\n      workers: 0.0,        // Neutral\n      students: -1.0,      // Negative\n      urban: -0.5,         // Slightly negative\n      rural: 0.0,          // Neutral\n      indigenous: -0.5     // Slightly negative\n    },\n    sectors: {\n      business: 0.5,       // Slightly positive\n      manufacturing: 0.0,  // Neutral\n      technology: 0.0,     // Neutral\n      environment: 0.0,    // Neutral\n      healthcare: 0.0,     // Neutral\n      defense: 0.0,        // Neutral\n      education: 0.0,      // Neutral\n      energy: 0.0,         // Neutral\n      publicSector: 0.0,   // Neutral\n      creativeIndustries: 0.0, // Neutral\n      tourism: 0.0,        // Neutral\n      agriculture: 0.0,    // Neutral\n      indigenous: 0.0      // Neutral\n    }\n  }\n};\n","import { defineStore } from 'pinia';\nimport { ref } from 'vue';\n\n// Pinia store for multi-year planning assumptions and presets\nexport const useMultiYearSettingsStore = defineStore('multiYearSettings', () => {\n  // Planning horizon\n  const planning = ref({\n    baseYear: 2024,\n    horizonYears: 10,\n  });\n\n  // Economic assumptions (percent values interpreted as % per year)\n  const economic = ref({\n    gdpReal: 1.8,       // Real GDP growth (% p.a.)\n    inflation: 2.0,     // CPI inflation (% p.a.)\n    interestRate: 3.5,  // Avg effective rate on debt (% p.a.)\n    population: 1.0,    // Population growth (% p.a.)\n  });\n\n  // Revenue elasticities to GDP (unitless)\n  const revenueElasticity = ref({\n    personalIncomeTax: 1.05,\n    corporateIncomeTax: 1.10,\n    gst: 1.00,\n    exciseTaxes: 0.90,\n    carbonPricing: 0.80,\n    customsDuties: 0.90,\n    eiPremiums: 0.95,\n    crownProfits: 0.50,\n    resourceRoyalties: 1.20,\n    nonTaxRevenue: 0.60,\n  });\n\n  // Program spending growth profiles (percentage points added annually)\n  const spendingGrowthDefaults = Object.freeze({\n    healthcare: { baseline: 3.5, demographic: 1.2 },\n    education: { baseline: 2.0, demographic: 0.3 },\n    seniors: { baseline: 4.2, demographic: 2.1 },\n    childrenFamilies: { baseline: 2.0, demographic: 0.5 },\n    indigenousServices: { baseline: 3.0, demographic: 1.0 },\n    employmentInsurance: { baseline: 2.0, demographic: 0.5 },\n    defensePublicSafety: { baseline: 2.5, demographic: 0.0 },\n    transportationInfrastructure: { baseline: 2.5, demographic: 0.0 },\n    environmentalPrograms: { baseline: 2.5, demographic: 0.0 },\n    publicSafetyEmergency: { baseline: 2.5, demographic: 0.0 },\n    governmentBuildings: { baseline: 2.0, demographic: 0.0 },\n    researchInnovation: { baseline: 3.0, demographic: 0.0 },\n    digitalGovernment: { baseline: 2.0, demographic: 0.0 },\n    federalEmployeeSalaries: { baseline: 2.5, demographic: 0.0 },\n    legalJusticeSystem: { baseline: 2.0, demographic: 0.0 },\n    indigenousServicesOps: { baseline: 3.0, demographic: 0.5 },\n    culturalHeritage: { baseline: 2.0, demographic: 0.0 },\n    scientificResearch: { baseline: 3.0, demographic: 0.0 },\n    diplomaticRepresentation: { baseline: 2.0, demographic: 0.0 },\n    // Loans & investments group children can be treated similarly if projected\n  });\n  const spendingGrowth = ref(JSON.parse(JSON.stringify(spendingGrowthDefaults)));\n\n  // Global across-board program spending adjustments (multi-year only)\n  // levelPct: one-time baseline shift applied at base year (excludes interest)\n  // growthDeltaPct: additional annual growth (percentage points) applied each projected year\n  const spendingGlobal = ref({\n    levelPct: 0,\n    growthDeltaPct: 0,\n  });\n\n  // Year-specific overrides for program spending in projections\n  // Example: yearOverrides[2027] = { spending: { levelPct: 2, growthDeltaPct: 0.5 }, applyForward: false }\n  const yearOverrides = ref({});\n\n  // User deltas by category (level shift %, growth delta pp, ongoing flag)\n  const categoryUserDelta = ref({});\n\n  // Per-item multi-year plans (parallel to existing state; does not mutate budget state)\n  const multiYearPlans = ref({\n    revenue: {}, // sourceId -> RevenuePlan\n    spending: {}, // categoryId -> SpendingPlan\n  });\n\n  // Presets for quick scenario selection\n  const presets = ref({\n    baseline: {\n      planning: { baseYear: 2024, horizonYears: 10 },\n      economic: { gdpReal: 1.8, inflation: 2.0, interestRate: 3.5, population: 1.0 },\n    },\n    optimistic: {\n      planning: { baseYear: 2024, horizonYears: 10 },\n      economic: { gdpReal: 2.3, inflation: 2.0, interestRate: 3.0, population: 1.0 },\n    },\n    pessimistic: {\n      planning: { baseYear: 2024, horizonYears: 10 },\n      economic: { gdpReal: 1.0, inflation: 3.0, interestRate: 4.5, population: 0.8 },\n    },\n  });\n\n  function applyPreset(name) {\n    const p = presets.value[name];\n    if (!p) return;\n    planning.value = { ...planning.value, ...p.planning };\n    economic.value = { ...economic.value, ...p.economic };\n  }\n\n  function resetSpendingGrowthKey(key) {\n    const def = spendingGrowthDefaults[key];\n    if (def) spendingGrowth.value[key] = { ...def };\n  }\n\n  function resetAllSpendingGrowth() {\n    spendingGrowth.value = JSON.parse(JSON.stringify(spendingGrowthDefaults));\n  }\n\n  // --- Planning helpers ---\n  function setRevenuePlan(sourceId, plan) {\n    multiYearPlans.value.revenue = { ...multiYearPlans.value.revenue, [sourceId]: { ...plan } };\n  }\n  function setSpendingPlan(categoryId, plan) {\n    multiYearPlans.value.spending = { ...multiYearPlans.value.spending, [categoryId]: { ...plan } };\n  }\n  function clearPlan(id, type) {\n    if (type === 'revenue') {\n      const c = { ...multiYearPlans.value.revenue }; delete c[id]; multiYearPlans.value.revenue = c;\n    } else if (type === 'spending') {\n      const c = { ...multiYearPlans.value.spending }; delete c[id]; multiYearPlans.value.spending = c;\n    }\n  }\n\n  function getPlannedRateForYear(sourceId, year, fallbackRate) {\n    const p = multiYearPlans.value.revenue?.[sourceId];\n    if (!p) return fallbackRate ?? null;\n    if (p.points && p.points[year] != null) return Number(p.points[year]);\n    if (p.mode === 'rule' && p.rule) {\n      const base = Number(p.rule.startRate ?? fallbackRate ?? 0);\n      const delta = Number(p.rule.annualDeltaPct ?? 0);\n      const years = Math.max(0, year - (planning.value.baseYear || year));\n      return Number((base + years * delta).toFixed(4));\n    }\n    return fallbackRate ?? null;\n  }\n\n  function getPlannedFactorForYear(categoryId, year, fallbackFactor) {\n    const p = multiYearPlans.value.spending?.[categoryId];\n    if (!p) return fallbackFactor ?? null;\n    if (p.points && p.points[year] != null) return Number(p.points[year]);\n    // Ongoing level + growth delta are projection concepts; for apply to a given year, we treat ongoing level as multiplier\n    if (p.ongoingLevelPct != null) {\n      const base = Number(fallbackFactor ?? 1);\n      const level = 1 + Number(p.ongoingLevelPct) / 100;\n      return Number((base * level).toFixed(4));\n    }\n    return fallbackFactor ?? null;\n  }\n\n  return {\n    planning,\n    economic,\n    revenueElasticity,\n    spendingGrowth,\n    spendingGlobal,\n    categoryUserDelta,\n    multiYearPlans,\n    yearOverrides,\n    presets,\n    applyPreset,\n    setRevenuePlan,\n    setSpendingPlan,\n    clearPlan,\n    getPlannedRateForYear,\n    getPlannedFactorForYear,\n    resetSpendingGrowthKey,\n    resetAllSpendingGrowth,\n  };\n});\n","import html2pdf from 'html2pdf.js'\nimport { handleError } from '@/utils/errorHandler.js';\n\nexport function downloadBudgetPDF(includeFullBreakdown = false) {\n  console.log('Starting PDF generation...')\n  \n  // Find the export element\n  const exportElement = document.getElementById('export-summary')\n  if (!exportElement) {\n    handleError(new Error('Export element not found'), (msg) => alert(msg));\n    return\n  }\n  \n  console.log('Export element found:', exportElement)\n  \n  // Apply class for full breakdown toggle\n  if (!includeFullBreakdown) {\n    exportElement.classList.add('summary-only')\n  } else {\n    exportElement.classList.remove('summary-only')\n  }\n  \n  // Enhanced options for better quality and professional output\n  const options = {\n    margin: [15, 15, 15, 15],\n    filename: 'Federal-Budget-Summary.pdf',\n    image: { type: 'jpeg', quality: 1 },\n    html2canvas: { \n      scale: 2,\n      useCORS: true,\n      letterRendering: true,\n      allowTaint: true,\n      logging: false\n    },\n    jsPDF: { \n      unit: 'mm', \n      format: 'a4', \n      orientation: 'portrait',\n      compress: true\n    },\n    pagebreak: { \n      mode: ['avoid-all', 'css', 'legacy'],\n      before: '.page-break-before',\n      after: '.page-break-after',\n      avoid: ['h2', 'h3', 'table']\n    }\n  }\n\n  // Show loading message\n  alert('Generating PDF... This may take a moment.')\n  \n  console.log('Starting html2pdf conversion...')\n  \n  // Use a simpler approach\n  html2pdf().from(exportElement).set(options).save().then(() => {\n    console.log('PDF generation completed')\n    \n    // Remove class if added\n    if (!includeFullBreakdown) {\n      exportElement.classList.remove('summary-only')\n    }\n    \n    alert('PDF generated successfully!')\n  }).catch(error => {\n    handleError(error, (msg) => alert(msg));\n    // Remove class if added\n    if (!includeFullBreakdown) {\n      exportElement.classList.remove('summary-only')\n    }\n  })\n}\n","// Adapter to create a BaseBudgetSnapshot from the existing budget store\n\n/**\n * Build a base snapshot from the budget store without mutating it.\n * @param {import('pinia').Store} budgetStore\n * @returns {{ gdp: number, debt: number, revenuesBySource: Record<string, number>, spendingByCategory: Record<string, number> }}\n */\nexport function makeBaseSnapshotFromStore(budgetStore) {\n  const gdp = Number(budgetStore?.fiscalIndicators?.gdp ?? 0);\n  const debt = Number(budgetStore?.fiscalIndicators?.debt ?? 0);\n\n  // Revenues: use adjustedAmount if available, else fallback to base*rate\n  const revenuesBySource = {};\n  const revSrc = budgetStore?.revenueSources || {};\n  for (const [key, src] of Object.entries(revSrc)) {\n    const adj = src?.adjustedAmount ?? (Number(src?.base || 0) * Number(src?.rate || 0));\n    revenuesBySource[key] = to2(adj);\n  }\n\n  // Spending: fold groups into child categories using baseAmount * adjustmentFactor\n  const spendingByCategory = {};\n  const cats = budgetStore?.spendingCategories || {};\n  for (const [key, cat] of Object.entries(cats)) {\n    if (cat?.isGroup && cat?.children) {\n      for (const [childKey, child] of Object.entries(cat.children)) {\n        // Skip if child is not a plain category\n        if (!child || child.isGroup) continue;\n        const amt = Number(child?.baseAmount || 0) * Number(child?.adjustmentFactor || 1);\n        spendingByCategory[childKey] = to2(amt);\n      }\n    } else if (cat && !cat.isGroup) {\n      const amt = Number(cat?.baseAmount || 0) * Number(cat?.adjustmentFactor || 1);\n      spendingByCategory[key] = to2(amt);\n    }\n  }\n\n  return { gdp: to2(gdp), debt: to2(debt), revenuesBySource, spendingByCategory };\n}\n\nfunction to2(n) { return Math.round((Number(n || 0) + Number.EPSILON) * 100) / 100; }\n\n","// Pure projection helpers for multi-year fiscal planning.\n// These functions are side-effect free and do not touch existing store state.\n\n/**\n * @typedef {Object} BaseBudgetSnapshot\n * @property {number} gdp - Nominal GDP (billions)\n * @property {number} debt - Gross federal debt at BOP (billions)\n * @property {Record<string, number>} revenuesBySource - Adjusted revenue by source (billions)\n * @property {Record<string, number>} spendingByCategory - Program spending by category (billions)\n */\n\n/**\n * @typedef {Object} ProjectionYear\n * @property {number} year\n * @property {number} gdp\n * @property {Record<string, number>} revenueBySource\n * @property {number} revenueTotal\n * @property {Record<string, number>} spendingByCategory\n * @property {number} programSpending\n * @property {number} interest\n * @property {number} spendingTotal\n * @property {number} deficit\n * @property {number} debt\n * @property {number} debtToGDP\n */\n\n/** Calculate nominal GDP given previous GDP and economic settings. */\nexport function calcNominalGDP(prevGDP, economic) {\n  const real = Number(economic?.gdpReal ?? 0) / 100;\n  const infl = Number(economic?.inflation ?? 0) / 100;\n  const growth = 1 + Math.max(-0.99, real + infl);\n  return round2(prevGDP * growth);\n}\n\n/** Compute revenue by source using GDP elasticity. */\nexport function calcRevenue(prev, nextGDP, elasticityMap, inflationPct) {\n  const bySource = {};\n  let total = 0;\n  for (const [k, v] of Object.entries(prev.revenueBySource || {})) {\n    const elastic = Number(elasticityMap?.[k] ?? 1);\n    const gdpFactor = Math.pow(nextGDP / prev.gdp, elastic);\n    const inflFactor = 1 + Number(inflationPct ?? 0) / 100;\n    const projected = round2(v * gdpFactor * inflFactor);\n    bySource[k] = projected;\n    total += projected;\n  }\n\n  return { total: round2(total), bySource };\n}\n\n/** Compute program spending by category using growth profiles and user deltas. */\nexport function calcProgramSpending(prev, profiles, userDeltaMap) {\n  const byCategory = {};\n  let total = 0;\n  for (const [k, v] of Object.entries(prev.spendingByCategory)) {\n    const prof = profiles?.[k] || { baseline: 0, demographic: 0 };\n    const delta = userDeltaMap?.[k] || { level: 0, growthDelta: 0, ongoing: true };\n    // Clamp growth delta to reasonable bounds\n    const growthDelta = Math.max(-2, Math.min(2, Number(delta.growthDelta || 0)));\n    const growPct = Math.max(-90, (prof.baseline || 0) + (prof.demographic || 0) + growthDelta);\n    const factor = 1 + growPct / 100;\n    // Level is a one-time shift unless explicitly flagged ongoing\n    const levelPct = Math.max(-15, Math.min(15, Number(delta.level || 0)));\n    const levelAdj = (delta.ongoing ? (1 + levelPct / 100) : 1);\n    const projected = round2(v * factor * levelAdj);\n    byCategory[k] = projected;\n    total += projected;\n  }\n  return { total: round2(total), byCategory };\n}\n\n/** Simple interest cost given beginning-of-period debt and average rate. */\nexport function calcInterest(debtBop, avgRatePct) {\n  const rate = Math.max(0, Number(avgRatePct ?? 0)) / 100;\n  return round2(debtBop * rate);\n}\n\n/** Update debt with deficit (deficit increases debt, surplus decreases debt). */\nexport function calcDebt(debtBop, deficit) {\n  // Deficit is negative when spending > revenue, so we subtract it to increase debt\n  return round2(debtBop - deficit);\n}\n\n/**\n * Project all years using base snapshot and settings.\n * @param {{ base: BaseBudgetSnapshot, settings: {\n *   planning: { baseYear: number, horizonYears: number },\n *   economic: { gdpReal: number, inflation: number, interestRate: number },\n *   revenueElasticity?: Record<string, number>,\n *   spendingGrowth?: Record<string, { baseline: number, demographic: number }>,\n *   categoryUserDelta?: Record<string, { level: number, growthDelta: number, ongoing: boolean }>\n * }}} args\n * @returns {ProjectionYear[]}\n */\nexport function projectAll(args) {\n  const { base, settings } = args || {};\n  if (!base || !settings) return [];\n  const horizon = Math.max(1, Number(settings?.planning?.horizonYears ?? 10));\n  const startYear = Number(settings?.planning?.baseYear ?? new Date().getFullYear());\n  const globalLevel = Number(settings?.spendingGlobal?.levelPct || 0);\n  const globalGrowthDelta = Number(settings?.spendingGlobal?.growthDeltaPct || 0);\n\n  const first = /** @type {ProjectionYear} */ ({\n    year: startYear,\n    gdp: round2(base.gdp),\n    revenueBySource: { ...base.revenuesBySource },\n    revenueTotal: sumValues(base.revenuesBySource),\n    spendingByCategory: { ...base.spendingByCategory },\n    programSpending: sumValues(base.spendingByCategory),\n    interest: calcInterest(base.debt, settings?.economic?.interestRate),\n    spendingTotal: 0, // to be set\n    deficit: 0,       // to be set\n    debt: round2(base.debt),\n    debtToGDP: 0,     // to be set\n  });\n  // Apply global level shift at base year (program spending only)\n  const baseYearLevelAdj = 1 + Math.max(-15, Math.min(15, globalLevel)) / 100;\n  first.spendingTotal = round2(first.programSpending * baseYearLevelAdj + first.interest);\n  first.deficit = round2(first.revenueTotal - first.spendingTotal);\n\n  first.debtToGDP = safeRatio(first.debt, first.gdp);\n\n  const out = [first];\n  for (let i = 1; i < horizon; i++) {\n    const prev = out[i - 1];\n    const nextYear = startYear + i;\n    const gdp = calcNominalGDP(prev.gdp, settings?.economic);\n    const rev = calcRevenue(prev, gdp, settings?.revenueElasticity, settings?.economic?.inflation);\n    // Build merged user deltas: category deltas + global growthDelta + per-year overrides\n    const yearOv = settings?.yearOverrides?.[nextYear]?.spending || {};\n    const applyYearLevel = Number(yearOv.levelPct || 0);\n    const applyYearGrowth = Number(yearOv.growthDeltaPct || 0);\n    const mergedUserDelta = {};\n    for (const k of Object.keys(prev.spendingByCategory || {})) {\n      const baseDelta = settings?.categoryUserDelta?.[k] || { level: 0, growthDelta: 0, ongoing: true };\n      mergedUserDelta[k] = {\n        level: Number(baseDelta.level || 0) + (i === 0 ? globalLevel : 0) + applyYearLevel,\n        growthDelta: Number(baseDelta.growthDelta || 0) + globalGrowthDelta + applyYearGrowth,\n        ongoing: false, // level shifts are one-time by default in projections\n      };\n    }\n    const spend = calcProgramSpending(prev, settings?.spendingGrowth, mergedUserDelta);\n    const interest = calcInterest(prev.debt, settings?.economic?.interestRate);\n    const spendingTotal = round2(spend.total + interest);\n    const deficit = round2(rev.total - spendingTotal);\n    const debt = calcDebt(prev.debt, deficit);\n    const debtToGDP = safeRatio(debt, gdp);\n\n    out.push({\n      year: nextYear,\n      gdp,\n      revenueBySource: rev.bySource,\n      revenueTotal: rev.total,\n      spendingByCategory: spend.byCategory,\n      programSpending: spend.total,\n      interest,\n      spendingTotal,\n      deficit,\n      debt,\n      debtToGDP,\n    });\n  }\n  return out;\n}\n\n// Utilities\nfunction sumValues(obj) {\n  if (!obj) return 0;\n  return Object.values(obj).reduce((a, b) => a + Number(b || 0), 0);\n}\n\nfunction round2(n) {\n  return Math.round((Number(n || 0) + Number.EPSILON) * 100) / 100;\n}\n\nfunction safeRatio(num, den) {\n  return den && den !== 0 ? round2(num / den) : 0;\n}"],"names":["budgetScenarioModifiers","balancedBudget","label","description","provinces","Ontario","Quebec","Alberta","Saskatchewan","Manitoba","NovaScotia","NewBrunswick","Yukon","Nunavut","demographics","youth","seniors","families","workers","students","urban","rural","indigenous","sectors","business","manufacturing","technology","environment","healthcare","defense","education","energy","publicSector","creativeIndustries","tourism","agriculture","progressiveExpansion","infrastructureBuilder","businessFriendly","greenGrowthStimulus","securityFirst","austerityPlan","useMultiYearSettingsStore","defineStore","planning","ref","baseYear","horizonYears","economic","gdpReal","inflation","interestRate","population","revenueElasticity","personalIncomeTax","corporateIncomeTax","gst","exciseTaxes","carbonPricing","customsDuties","eiPremiums","crownProfits","resourceRoyalties","nonTaxRevenue","spendingGrowthDefaults","Object","freeze","baseline","demographic","childrenFamilies","indigenousServices","employmentInsurance","defensePublicSafety","transportationInfrastructure","environmentalPrograms","publicSafetyEmergency","governmentBuildings","researchInnovation","digitalGovernment","federalEmployeeSalaries","legalJusticeSystem","indigenousServicesOps","culturalHeritage","scientificResearch","diplomaticRepresentation","spendingGrowth","JSON","parse","stringify","spendingGlobal","levelPct","growthDeltaPct","yearOverrides","categoryUserDelta","multiYearPlans","revenue","spending","presets","optimistic","pessimistic","applyPreset","name","p","value","resetSpendingGrowthKey","key","def","resetAllSpendingGrowth","setRevenuePlan","sourceId","plan","setSpendingPlan","categoryId","clearPlan","id","type","c","getPlannedRateForYear","year","fallbackRate","points","Number","mode","rule","base","startRate","delta","annualDeltaPct","years","Math","max","toFixed","getPlannedFactorForYear","fallbackFactor","ongoingLevelPct","level","downloadBudgetPDF","includeFullBreakdown","console","log","exportElement","document","getElementById","handleError","Error","msg","alert","classList","remove","add","options","margin","filename","image","quality","html2canvas","scale","useCORS","letterRendering","allowTaint","logging","jsPDF","unit","format","orientation","compress","pagebreak","before","after","avoid","html2pdf","from","set","save","then","catch","error","makeBaseSnapshotFromStore","budgetStore","gdp","fiscalIndicators","debt","revenuesBySource","revSrc","revenueSources","src","entries","adj","adjustedAmount","rate","to2","spendingByCategory","cats","spendingCategories","cat","isGroup","children","childKey","child","amt","baseAmount","adjustmentFactor","n","round","EPSILON","calcNominalGDP","prevGDP","real","infl","growth","round2","calcRevenue","prev","nextGDP","elasticityMap","inflationPct","bySource","total","k","v","revenueBySource","elastic","gdpFactor","pow","inflFactor","projected","calcProgramSpending","profiles","userDeltaMap","byCategory","prof","growthDelta","ongoing","min","growPct","factor","levelAdj","calcInterest","debtBop","avgRatePct","calcDebt","deficit","projectAll","args","settings","horizon","startYear","Date","getFullYear","globalLevel","globalGrowthDelta","first","revenueTotal","sumValues","programSpending","interest","spendingTotal","debtToGDP","baseYearLevelAdj","safeRatio","out","i","nextYear","rev","yearOv","applyYearLevel","applyYearGrowth","mergedUserDelta","keys","baseDelta","spend","push","obj","values","reduce","a","b","num","den"],"sourceRoot":""}