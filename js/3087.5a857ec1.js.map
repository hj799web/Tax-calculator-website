{"version":3,"file":"js/3087.5a857ec1.js","mappings":"igCAqHA,MAAMA,GAASC,EAAAA,EAAAA,KACTC,GAAoBC,EAAAA,EAAAA,MACpB,EAAEC,IAAMC,EAAAA,EAAAA,MACRC,GAAgBC,EAAAA,EAAAA,IAAI,aAKpBC,GAAqBC,EAAAA,EAAAA,KAAS,KAClC,MAAMC,EAAKV,EAAOW,gBAAkB,CAAC,EAC/BC,EAAMA,CAACC,EAAIC,IAASC,OAAOL,EAAGG,KAAMC,IAAS,GACnD,MAAO,CACLE,WAAY,CACVC,kBAAmBL,EAAI,oBAAoB,QAC3CM,mBAAoBN,EAAI,qBAAqB,QAC7CO,IAAKP,EAAI,MAAM,QACfQ,cAAeR,EAAI,gBAAgB,QACnCS,YAAaT,EAAI,cAAc,QAC/BU,WAAYV,EAAI,aAAa,QAC7BW,cAAeX,EAAI,gBAAgB,QACnCY,aAAcZ,EAAI,eAAe,QACjCa,cAAeb,EAAI,gBAAgB,QACnCc,kBAAmBd,EAAI,oBAAoB,QAC3Ce,wBAAyBf,EAAI,oBAAoB,kBACjDgB,yBAA0BhB,EAAI,qBAAqB,kBACnDiB,UAAWjB,EAAI,MAAM,kBACrBkB,oBAAqBlB,EAAI,gBAAgB,kBACzCmB,kBAAmBnB,EAAI,cAAc,kBACrCoB,iBAAkBpB,EAAI,aAAa,kBACnCqB,oBAAqBrB,EAAI,gBAAgB,kBACzCsB,mBAAoBtB,EAAI,eAAe,kBACvCuB,oBAAqBvB,EAAI,gBAAgB,kBACzCwB,wBAAyBxB,EAAI,oBAAoB,mBAEnDyB,iBAAkB,CAChBC,QAASvB,OAAOf,EAAOuC,eAAiB,GAAKxB,OAAOf,EAAOwC,cAAgB,GAC3EC,QAAS1B,OAAOf,EAAOwC,cAAgB,GAAKzB,OAAOf,EAAOuC,eAAiB,GAC3EG,eAAyF,IAAzEC,EAAU3C,EAAOqC,kBAAkBO,KAAM5C,EAAOqC,kBAAkBQ,MAErF,IAGGC,GAAYrC,EAAAA,EAAAA,KAAS,KACzB,MAAMsC,GAAIC,EAAAA,EAAAA,IACRxC,EAAmByC,MACnBjD,EAAOkD,QAAU,GACjBlD,EAAOmD,cAAgB,KACvBjD,EAAkBkD,cACf,CAAC,EACN,MAAO,CACLC,UAAWN,EAAEM,WAAa,CAAC,EAC3BC,aAAcP,EAAEO,cAAgB,CAAC,EACjCC,QAASR,EAAEQ,SAAW,CAAC,EACvBC,YAAaT,EAAES,cAAe,EAC9BC,sBAAuBV,EAAEU,uBAAyB,KACnD,IAIH,SAASd,EAAUe,EAAGC,GACpB,MAAMC,EAAI7C,OAAO2C,GAAK,GAAIG,EAAI9C,OAAO4C,GAAK,GAC1C,OAAKE,EACED,EAAIC,EADI,CAEjB,CAGA,SAASC,EAAKC,EAAOL,EAAI,EAAGM,GAAM,GAChC,MAAMC,EAAUC,OAAOD,QAAQF,GAAS,CAAC,GAAGI,QAAO,EAAE,CAACC,KAAoB,kBAANA,IAEpE,OADAH,EAAQI,MAAK,CAACC,EAAEC,IAAOP,EAAMM,EAAE,GAAGC,EAAE,GAAKA,EAAE,GAAGD,EAAE,KACzCL,EAAQO,MAAM,EAAGd,EAC1B,CAEA,SAASe,EAAUC,GACjB,MAAMC,GAAQC,EAAAA,EAAAA,IAAkB7D,OAAO2D,IAAU,GACjD,MAAO,CAAE,eAAgBC,EAAOA,QAAOE,YAAaF,EACtD,CAEA,SAASG,EAAYJ,GACnB,MAAMK,EAAQhE,OAAO2D,GAAS,EACxBM,EAAOD,EAAQ,EAAI,IAAkB,GAC3C,MAAO,GAAGC,IAAOD,EAAME,QAAQ,IACjC,CAEA,SAASC,EAAWR,GAClB,MAAM3B,EAAIhC,OAAO2D,GACjB,OAAI3B,EAAI,KAAa,YACjBA,EAAI,KAAa,YACd,eACT,CAEA,SAASoC,GAAkBC,GACzB,OAAOC,OAAOD,GAAO,IAClBE,UAAU,OACVC,QAAQ,oBAAqB,IAC7BA,QAAQ,iBAAkB,KAC1BC,OACAC,MAAM,KACNC,KAAI,CAACC,EAAMC,KACV,MAAMC,EAAQF,EAAKG,cACnB,OAAc,IAAVF,EAAoBC,EACjBA,EAAME,OAAO,GAAGC,cAAgBH,EAAMrB,MAAM,EAAE,IAEtDyB,KAAK,GACV,CAEA,SAASC,GAAoBC,GAC3B,MAAMC,EAAMf,OAAOc,GAAS,IACtBE,EAASD,EACZb,QAAQ,WAAY,OACpBA,QAAQ,KAAM,KACdA,QAAQ,OAAQ,KAChBC,OACH,OAAKa,EACEA,EAAOZ,MAAM,KAAKC,KAAIC,GAAQA,EAAOA,EAAKI,OAAO,GAAGC,cAAgBL,EAAKnB,MAAM,GAAK,KAAIyB,KAAK,KAAKT,OADrF,EAEtB,CAEA,SAASc,GAAevC,EAAOoC,GAC7B,MAAMI,EAAMpB,GAAkBgB,GACxBK,EAAiB,8BAA8BzC,KAASwC,IACxDE,EAAarG,EAAEoG,GACrB,OAAOC,IAAeD,EAAiBN,GAAoBC,GAASM,CACtE,CAEA,SAASC,GAAU3C,EAAOoC,EAAOzB,GAC/B,OAAOtE,EAAE,qCAAsC,CAC7C+F,MAAOG,GAAevC,EAAOoC,GAC7BzB,MAAO3D,OAAO2D,GAAOO,QAAQ,GAC7BF,MAAOD,EAAYJ,IAEvB,CAEA,SAASiC,GAAc5C,GACrB,OAAOG,OAAOD,QAAQF,GAAS,CAAC,GAAGI,QAAO,EAAE,CAACC,KAAoB,kBAANA,IAAgBC,MAAK,CAACC,EAAEC,IAAMA,EAAE,GAAGD,EAAE,IAClG,C,m4KCpPA,MAAMsC,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://my-new-project/./src/domains/sentiment/components/SentimentPanel.vue","webpack://my-new-project/./src/domains/sentiment/components/SentimentPanel.vue?0e52"],"sourcesContent":["<template>\n  <div class=\"sentiment-panel\">\n    <div class=\"controls\">\n      <SentimentSensitivityControl />\n    </div>\n    <div class=\"chart\">\n      <RadarSentiment :external-tab=\"selectedGroup\" />\n    </div>\n    <div class=\"group-tabs\">\n      <button :class=\"{active: selectedGroup==='provinces'}\" @click=\"selectedGroup='provinces'\">{{ t('simulator.sentiment.tabs.provinces') }}</button>\n      <button :class=\"{active: selectedGroup==='demographics'}\" @click=\"selectedGroup='demographics'\">{{ t('simulator.sentiment.tabs.demographics') }}</button>\n      <button :class=\"{active: selectedGroup==='sectors'}\" @click=\"selectedGroup='sectors'\">{{ t('simulator.sentiment.tabs.sectors') }}</button>\n    </div>\n    <div class=\"segments\">\n      <div class=\"seg-col\" v-show=\"selectedGroup==='provinces'\">\n        <h4>{{ t('simulator.sentiment.headers.regions') }}</h4>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.top') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.provinces,3,false)\" :key=\"'p-top-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('provinces', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('provinces', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.bottom') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.provinces,3,true)\" :key=\"'p-btm-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('provinces', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('provinces', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block full-list\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.allRegions') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in sortedEntries(sentiment.provinces)\" :key=\"'p-all-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('provinces', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('provinces', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"seg-col\" v-show=\"selectedGroup==='demographics'\">\n        <h4>{{ t('simulator.sentiment.headers.demographics') }}</h4>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.top') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.demographics,3,false)\" :key=\"'d-top-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('demographics', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('demographics', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.bottom') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.demographics,3,true)\" :key=\"'d-btm-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('demographics', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('demographics', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block full-list\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.allDemographics') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in sortedEntries(sentiment.demographics)\" :key=\"'d-all-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('demographics', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('demographics', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n      <div class=\"seg-col\" v-show=\"selectedGroup==='sectors'\">\n        <h4>{{ t('simulator.sentiment.headers.sectors') }}</h4>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.top') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.sectors,3,false)\" :key=\"'s-top-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('sectors', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('sectors', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.bottom') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in topN(sentiment.sectors,3,true)\" :key=\"'s-btm-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('sectors', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('sectors', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n        <div class=\"seg-block full-list\">\n          <div class=\"seg-subtitle\">{{ t('simulator.sentiment.sections.allSectors') }}</div>\n          <ul>\n            <li v-for=\"([k,v]) in sortedEntries(sentiment.sectors)\" :key=\"'s-all-'+k\">\n              <span class=\"chip\" :style=\"chipStyle(v)\" :title=\"chipTitle('sectors', k, v)\">{{ v.toFixed(1) }}</span> {{ translateLabel('sectors', k) }}\n              <span class=\"delta\" :class=\"deltaClass(v)\">{{ formatDelta(v) }}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup>\nimport { computed, ref } from 'vue';\nimport SentimentSensitivityControl from '@/domains/sentiment/components/SentimentSensitivityControl.vue';\nimport RadarSentiment from '@/domains/sentiment/components/RadarSentiment.vue';\nimport { useI18n } from '@/i18n';\nimport { useBudgetSimulatorStore } from '@/domains/budget/store/budgetSimulator';\nimport { useSentimentSettingsStore } from '@/domains/sentiment/store/sentimentSettings';\nimport { computeSentimentScores, getSentimentColor } from '@/domains/sentiment/utils/computeSentimentScores';\n\nconst budget = useBudgetSimulatorStore();\nconst sentimentSettings = useSentimentSettingsStore();\nconst { t } = useI18n();\nconst selectedGroup = ref('provinces');\n\n// Minimal data object for the radar; extend if the component uses more fields\n\n// Build a light budget object for the sentiment model (rates and amounts)\nconst budgetForSentiment = computed(() => {\n  const rs = budget.revenueSources || {};\n  const mix = (id, prop) => Number(rs[id]?.[prop] || 0);\n  return {\n    revenueMix: {\n      personalIncomeTax: mix('personalIncomeTax','rate'),\n      corporateIncomeTax: mix('corporateIncomeTax','rate'),\n      gst: mix('gst','rate'),\n      carbonPricing: mix('carbonPricing','rate'),\n      exciseTaxes: mix('exciseTaxes','rate'),\n      eiPremiums: mix('eiPremiums','rate'),\n      customsDuties: mix('customsDuties','rate'),\n      crownProfits: mix('crownProfits','rate'),\n      nonTaxRevenue: mix('nonTaxRevenue','rate'),\n      resourceRoyalties: mix('resourceRoyalties','rate'),\n      personalIncomeTaxAmount: mix('personalIncomeTax','adjustedAmount'),\n      corporateIncomeTaxAmount: mix('corporateIncomeTax','adjustedAmount'),\n      gstAmount: mix('gst','adjustedAmount'),\n      carbonPricingAmount: mix('carbonPricing','adjustedAmount'),\n      exciseTaxesAmount: mix('exciseTaxes','adjustedAmount'),\n      eiPremiumsAmount: mix('eiPremiums','adjustedAmount'),\n      customsDutiesAmount: mix('customsDuties','adjustedAmount'),\n      crownProfitsAmount: mix('crownProfits','adjustedAmount'),\n      nonTaxRevenueAmount: mix('nonTaxRevenue','adjustedAmount'),\n      resourceRoyaltiesAmount: mix('resourceRoyalties','adjustedAmount'),\n    },\n    fiscalIndicators: {\n      deficit: Number(budget.totalSpending || 0) - Number(budget.totalRevenue || 0),\n      surplus: Number(budget.totalRevenue || 0) - Number(budget.totalSpending || 0),\n      debtToGdpRatio: safeRatio(budget.fiscalIndicators?.debt, budget.fiscalIndicators?.gdp) * 100,\n    },\n  };\n});\n\nconst sentiment = computed(() => {\n  const s = computeSentimentScores(\n    budgetForSentiment.value,\n    budget.badges || [],\n    budget.activePreset || null,\n    sentimentSettings.sensitivity\n  ) || {};\n  return {\n    provinces: s.provinces || {},\n    demographics: s.demographics || {},\n    sectors: s.sectors || {},\n    fiscalChaos: s.fiscalChaos || false,\n    activeTriggersByGroup: s.activeTriggersByGroup || null,\n  };\n});\n\n\nfunction safeRatio(n, d) {\n  const N = Number(n || 0), D = Number(d || 0);\n  if (!D) return 0;\n  return N / D;\n}\n\n// Helpers: top/bottom N and color chips\nfunction topN(group, n = 3, asc = false) {\n  const entries = Object.entries(group || {}).filter(([,v]) => typeof v === 'number');\n  entries.sort((a,b) => (asc ? a[1]-b[1] : b[1]-a[1]));\n  return entries.slice(0, n);\n}\n\nfunction chipStyle(score) {\n  const color = getSentimentColor(Number(score) || 0);\n  return { '--chip-color': color, color, borderColor: color };\n}\n\nfunction formatDelta(score) {\n  const delta = Number(score) - 3;\n  const sign = delta > 0 ? '+' : delta < 0 ? '' : '';\n  return `${sign}${delta.toFixed(1)}`;\n}\n\nfunction deltaClass(score) {\n  const s = Number(score);\n  if (s > 3.05) return 'delta-pos';\n  if (s < 2.95) return 'delta-neg';\n  return 'delta-neutral';\n}\n\nfunction normalizeGroupKey(raw) {\n  return String(raw || '')\n    .normalize('NFD')\n    .replace(/[\\u0300-\\u036f']/g, '')\n    .replace(/[^A-Za-z0-9]+/g, ' ')\n    .trim()\n    .split(' ')\n    .map((word, index) => {\n      const lower = word.toLowerCase();\n      if (index === 0) return lower;\n      return lower.charAt(0).toUpperCase() + lower.slice(1);\n    })\n    .join('');\n}\n\nfunction formatLabelFallback(label) {\n  const str = String(label || '');\n  const spaced = str\n    .replace(/([A-Z])/g, ' $1')\n    .replace(/_/g, ' ')\n    .replace(/\\s+/g, ' ')\n    .trim();\n  if (!spaced) return '';\n  return spaced.split(' ').map(word => word ? word.charAt(0).toUpperCase() + word.slice(1) : '').join(' ').trim();\n}\n\nfunction translateLabel(group, label) {\n  const key = normalizeGroupKey(label);\n  const translationKey = `simulator.sentiment.groups.${group}.${key}`;\n  const translated = t(translationKey);\n  return translated === translationKey ? formatLabelFallback(label) : translated;\n}\n\nfunction chipTitle(group, label, score) {\n  return t('simulator.sentiment.tooltips.score', {\n    label: translateLabel(group, label),\n    score: Number(score).toFixed(2),\n    delta: formatDelta(score)\n  });\n}\n\nfunction sortedEntries(group) {\n  return Object.entries(group || {}).filter(([,v]) => typeof v === 'number').sort((a,b) => b[1]-a[1]);\n}\n</script>\n\n<style scoped>\n.sentiment-panel { display: grid; gap: 12px; }\n.controls { border: 1px solid #e5e7eb; border-radius: 12px; padding: 12px; background: #fff; }\n.chart { border: 1px solid #e5e7eb; border-radius: 12px; padding: 12px; background: #fff; min-height: 360px; display: grid; align-items: center; }\n.chart :deep(canvas) { width: 100% !important; height: 320px !important; display: block; }\n.segments { display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; }\n.seg-col { border: 1px solid #e5e7eb; border-radius: 12px; padding: 10px; background: #fff; }\n.seg-col h4 { margin: 0 0 6px; font-size: .9rem; color: #111827; }\n.seg-block { margin-bottom: 8px; }\n.seg-subtitle { font-size: .8rem; color: #6b7280; margin: 2px 0 4px; }\n.seg-col ul { margin: 0; padding-left: 0; list-style: none; display: grid; gap: 4px; }\n.group-tabs { display: flex; gap: 6px; margin: 6px 0; }\n.group-tabs button { padding: 6px 10px; border: 1px solid #e5e7eb; border-radius: 8px; background: #f9fafb; cursor: pointer; }\n.group-tabs button.active { background: #2563eb; border-color: #2563eb; color: #fff; }\n.chip { display: inline-block; padding: 2px 8px; border-radius: 999px; border: 1px solid var(--chip-color); color: var(--chip-color); font-weight: 600; font-size: .8rem; margin-right: 6px; }\n.delta { font-size: .8rem; margin-left: 6px; }\n.delta-pos { color: #065f46; }\n.delta-neg { color: #7f1d1d; }\n.delta-neutral { color: #6b7280; }\n</style>\n","import script from \"./SentimentPanel.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./SentimentPanel.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./SentimentPanel.vue?vue&type=style&index=0&id=59917407&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-59917407\"]])\n\nexport default __exports__"],"names":["budget","useBudgetSimulatorStore","sentimentSettings","useSentimentSettingsStore","t","useI18n","selectedGroup","ref","budgetForSentiment","computed","rs","revenueSources","mix","id","prop","Number","revenueMix","personalIncomeTax","corporateIncomeTax","gst","carbonPricing","exciseTaxes","eiPremiums","customsDuties","crownProfits","nonTaxRevenue","resourceRoyalties","personalIncomeTaxAmount","corporateIncomeTaxAmount","gstAmount","carbonPricingAmount","exciseTaxesAmount","eiPremiumsAmount","customsDutiesAmount","crownProfitsAmount","nonTaxRevenueAmount","resourceRoyaltiesAmount","fiscalIndicators","deficit","totalSpending","totalRevenue","surplus","debtToGdpRatio","safeRatio","debt","gdp","sentiment","s","computeSentimentScores","value","badges","activePreset","sensitivity","provinces","demographics","sectors","fiscalChaos","activeTriggersByGroup","n","d","N","D","topN","group","asc","entries","Object","filter","v","sort","a","b","slice","chipStyle","score","color","getSentimentColor","borderColor","formatDelta","delta","sign","toFixed","deltaClass","normalizeGroupKey","raw","String","normalize","replace","trim","split","map","word","index","lower","toLowerCase","charAt","toUpperCase","join","formatLabelFallback","label","str","spaced","translateLabel","key","translationKey","translated","chipTitle","sortedEntries","__exports__"],"sourceRoot":""}