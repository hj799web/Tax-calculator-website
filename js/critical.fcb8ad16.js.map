{"version":3,"file":"js/critical.fcb8ad16.js","mappings":"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","sources":["webpack://my-new-project/./node_modules/vue/dist/vue.esm-bundler.js","webpack://my-new-project/./node_modules/pinia/dist/pinia.mjs","webpack://my-new-project/./node_modules/vue-router/dist/vue-router.mjs"],"sourcesContent":["/**\n* vue v3.5.13\n* (c) 2018-present Yuxi (Evan) You and Vue contributors\n* @license MIT\n**/\nimport * as runtimeDom from '@vue/runtime-dom';\nimport { initCustomFormatter, registerRuntimeCompiler, warn } from '@vue/runtime-dom';\nexport * from '@vue/runtime-dom';\nimport { compile } from '@vue/compiler-dom';\nimport { isString, NOOP, genCacheKey, extend, generateCodeFrame } from '@vue/shared';\n\nfunction initDev() {\n  {\n    initCustomFormatter();\n  }\n}\n\nif (!!(process.env.NODE_ENV !== \"production\")) {\n  initDev();\n}\nconst compileCache = /* @__PURE__ */ Object.create(null);\nfunction compileToFunction(template, options) {\n  if (!isString(template)) {\n    if (template.nodeType) {\n      template = template.innerHTML;\n    } else {\n      !!(process.env.NODE_ENV !== \"production\") && warn(`invalid template option: `, template);\n      return NOOP;\n    }\n  }\n  const key = genCacheKey(template, options);\n  const cached = compileCache[key];\n  if (cached) {\n    return cached;\n  }\n  if (template[0] === \"#\") {\n    const el = document.querySelector(template);\n    if (!!(process.env.NODE_ENV !== \"production\") && !el) {\n      warn(`Template element not found or is empty: ${template}`);\n    }\n    template = el ? el.innerHTML : ``;\n  }\n  const opts = extend(\n    {\n      hoistStatic: true,\n      onError: !!(process.env.NODE_ENV !== \"production\") ? onError : void 0,\n      onWarn: !!(process.env.NODE_ENV !== \"production\") ? (e) => onError(e, true) : NOOP\n    },\n    options\n  );\n  if (!opts.isCustomElement && typeof customElements !== \"undefined\") {\n    opts.isCustomElement = (tag) => !!customElements.get(tag);\n  }\n  const { code } = compile(template, opts);\n  function onError(err, asWarning = false) {\n    const message = asWarning ? err.message : `Template compilation error: ${err.message}`;\n    const codeFrame = err.loc && generateCodeFrame(\n      template,\n      err.loc.start.offset,\n      err.loc.end.offset\n    );\n    warn(codeFrame ? `${message}\n${codeFrame}` : message);\n  }\n  const render = new Function(\"Vue\", code)(runtimeDom);\n  render._rc = true;\n  return compileCache[key] = render;\n}\nregisterRuntimeCompiler(compileToFunction);\n\nexport { compileToFunction as compile };\n","/*!\n * pinia v2.3.1\n * (c) 2025 Eduardo San Martin Morote\n * @license MIT\n */\nimport { hasInjectionContext, inject, toRaw, watch, unref, markRaw, effectScope, ref, isVue2, isRef, isReactive, set, getCurrentScope, onScopeDispose, getCurrentInstance, reactive, toRef, del, nextTick, computed, toRefs } from 'vue-demi';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\n/**\n * setActivePinia must be called to handle SSR at the top of functions like\n * `fetch`, `setup`, `serverPrefetch` and others\n */\nlet activePinia;\n/**\n * Sets or unsets the active pinia. Used in SSR and internally when calling\n * actions and getters\n *\n * @param pinia - Pinia instance\n */\n// @ts-expect-error: cannot constrain the type of the return\nconst setActivePinia = (pinia) => (activePinia = pinia);\n/**\n * Get the currently active pinia if there is any.\n */\nconst getActivePinia = () => (hasInjectionContext() && inject(piniaSymbol)) || activePinia;\nconst piniaSymbol = ((process.env.NODE_ENV !== 'production') ? Symbol('pinia') : /* istanbul ignore next */ Symbol());\n\nfunction isPlainObject(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no) {\n    return (o &&\n        typeof o === 'object' &&\n        Object.prototype.toString.call(o) === '[object Object]' &&\n        typeof o.toJSON !== 'function');\n}\n// type DeepReadonly<T> = { readonly [P in keyof T]: DeepReadonly<T[P]> }\n// TODO: can we change these to numbers?\n/**\n * Possible types for SubscriptionCallback\n */\nvar MutationType;\n(function (MutationType) {\n    /**\n     * Direct mutation of the state:\n     *\n     * - `store.name = 'new name'`\n     * - `store.$state.name = 'new name'`\n     * - `store.list.push('new item')`\n     */\n    MutationType[\"direct\"] = \"direct\";\n    /**\n     * Mutated the state with `$patch` and an object\n     *\n     * - `store.$patch({ name: 'newName' })`\n     */\n    MutationType[\"patchObject\"] = \"patch object\";\n    /**\n     * Mutated the state with `$patch` and a function\n     *\n     * - `store.$patch(state => state.name = 'newName')`\n     */\n    MutationType[\"patchFunction\"] = \"patch function\";\n    // maybe reset? for $state = {} and $reset\n})(MutationType || (MutationType = {}));\n\nconst IS_CLIENT = typeof window !== 'undefined';\n\n/*\n * FileSaver.js A saveAs() FileSaver implementation.\n *\n * Originally by Eli Grey, adapted as an ESM module by Eduardo San Martin\n * Morote.\n *\n * License : MIT\n */\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nconst _global = /*#__PURE__*/ (() => typeof window === 'object' && window.window === window\n    ? window\n    : typeof self === 'object' && self.self === self\n        ? self\n        : typeof global === 'object' && global.global === global\n            ? global\n            : typeof globalThis === 'object'\n                ? globalThis\n                : { HTMLElement: null })();\nfunction bom(blob, { autoBom = false } = {}) {\n    // prepend BOM for UTF-8 XML and text/* types (including HTML)\n    // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n    if (autoBom &&\n        /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n        return new Blob([String.fromCharCode(0xfeff), blob], { type: blob.type });\n    }\n    return blob;\n}\nfunction download(url, name, opts) {\n    const xhr = new XMLHttpRequest();\n    xhr.open('GET', url);\n    xhr.responseType = 'blob';\n    xhr.onload = function () {\n        saveAs(xhr.response, name, opts);\n    };\n    xhr.onerror = function () {\n        console.error('could not download file');\n    };\n    xhr.send();\n}\nfunction corsEnabled(url) {\n    const xhr = new XMLHttpRequest();\n    // use sync to avoid popup blocker\n    xhr.open('HEAD', url, false);\n    try {\n        xhr.send();\n    }\n    catch (e) { }\n    return xhr.status >= 200 && xhr.status <= 299;\n}\n// `a.click()` doesn't work for all browsers (#465)\nfunction click(node) {\n    try {\n        node.dispatchEvent(new MouseEvent('click'));\n    }\n    catch (e) {\n        const evt = document.createEvent('MouseEvents');\n        evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80, 20, false, false, false, false, 0, null);\n        node.dispatchEvent(evt);\n    }\n}\nconst _navigator = typeof navigator === 'object' ? navigator : { userAgent: '' };\n// Detect WebView inside a native macOS app by ruling out all browsers\n// We just need to check for 'Safari' because all other browsers (besides Firefox) include that too\n// https://www.whatismybrowser.com/guides/the-latest-user-agent/macos\nconst isMacOSWebView = /*#__PURE__*/ (() => /Macintosh/.test(_navigator.userAgent) &&\n    /AppleWebKit/.test(_navigator.userAgent) &&\n    !/Safari/.test(_navigator.userAgent))();\nconst saveAs = !IS_CLIENT\n    ? () => { } // noop\n    : // Use download attribute first if possible (#193 Lumia mobile) unless this is a macOS WebView or mini program\n        typeof HTMLAnchorElement !== 'undefined' &&\n            'download' in HTMLAnchorElement.prototype &&\n            !isMacOSWebView\n            ? downloadSaveAs\n            : // Use msSaveOrOpenBlob as a second approach\n                'msSaveOrOpenBlob' in _navigator\n                    ? msSaveAs\n                    : // Fallback to using FileReader and a popup\n                        fileSaverSaveAs;\nfunction downloadSaveAs(blob, name = 'download', opts) {\n    const a = document.createElement('a');\n    a.download = name;\n    a.rel = 'noopener'; // tabnabbing\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n    if (typeof blob === 'string') {\n        // Support regular links\n        a.href = blob;\n        if (a.origin !== location.origin) {\n            if (corsEnabled(a.href)) {\n                download(blob, name, opts);\n            }\n            else {\n                a.target = '_blank';\n                click(a);\n            }\n        }\n        else {\n            click(a);\n        }\n    }\n    else {\n        // Support blobs\n        a.href = URL.createObjectURL(blob);\n        setTimeout(function () {\n            URL.revokeObjectURL(a.href);\n        }, 4e4); // 40s\n        setTimeout(function () {\n            click(a);\n        }, 0);\n    }\n}\nfunction msSaveAs(blob, name = 'download', opts) {\n    if (typeof blob === 'string') {\n        if (corsEnabled(blob)) {\n            download(blob, name, opts);\n        }\n        else {\n            const a = document.createElement('a');\n            a.href = blob;\n            a.target = '_blank';\n            setTimeout(function () {\n                click(a);\n            });\n        }\n    }\n    else {\n        // @ts-ignore: works on windows\n        navigator.msSaveOrOpenBlob(bom(blob, opts), name);\n    }\n}\nfunction fileSaverSaveAs(blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank');\n    if (popup) {\n        popup.document.title = popup.document.body.innerText = 'downloading...';\n    }\n    if (typeof blob === 'string')\n        return download(blob, name, opts);\n    const force = blob.type === 'application/octet-stream';\n    const isSafari = /constructor/i.test(String(_global.HTMLElement)) || 'safari' in _global;\n    const isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent);\n    if ((isChromeIOS || (force && isSafari) || isMacOSWebView) &&\n        typeof FileReader !== 'undefined') {\n        // Safari doesn't allow downloading of blob URLs\n        const reader = new FileReader();\n        reader.onloadend = function () {\n            let url = reader.result;\n            if (typeof url !== 'string') {\n                popup = null;\n                throw new Error('Wrong reader.result type');\n            }\n            url = isChromeIOS\n                ? url\n                : url.replace(/^data:[^;]*;/, 'data:attachment/file;');\n            if (popup) {\n                popup.location.href = url;\n            }\n            else {\n                location.assign(url);\n            }\n            popup = null; // reverse-tabnabbing #460\n        };\n        reader.readAsDataURL(blob);\n    }\n    else {\n        const url = URL.createObjectURL(blob);\n        if (popup)\n            popup.location.assign(url);\n        else\n            location.href = url;\n        popup = null; // reverse-tabnabbing #460\n        setTimeout(function () {\n            URL.revokeObjectURL(url);\n        }, 4e4); // 40s\n    }\n}\n\n/**\n * Shows a toast or console.log\n *\n * @param message - message to log\n * @param type - different color of the tooltip\n */\nfunction toastMessage(message, type) {\n    const piniaMessage = '🍍 ' + message;\n    if (typeof __VUE_DEVTOOLS_TOAST__ === 'function') {\n        // No longer available :(\n        __VUE_DEVTOOLS_TOAST__(piniaMessage, type);\n    }\n    else if (type === 'error') {\n        console.error(piniaMessage);\n    }\n    else if (type === 'warn') {\n        console.warn(piniaMessage);\n    }\n    else {\n        console.log(piniaMessage);\n    }\n}\nfunction isPinia(o) {\n    return '_a' in o && 'install' in o;\n}\n\n/**\n * This file contain devtools actions, they are not Pinia actions.\n */\n// ---\nfunction checkClipboardAccess() {\n    if (!('clipboard' in navigator)) {\n        toastMessage(`Your browser doesn't support the Clipboard API`, 'error');\n        return true;\n    }\n}\nfunction checkNotFocusedError(error) {\n    if (error instanceof Error &&\n        error.message.toLowerCase().includes('document is not focused')) {\n        toastMessage('You need to activate the \"Emulate a focused page\" setting in the \"Rendering\" panel of devtools.', 'warn');\n        return true;\n    }\n    return false;\n}\nasync function actionGlobalCopyState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        await navigator.clipboard.writeText(JSON.stringify(pinia.state.value));\n        toastMessage('Global state copied to clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to serialize the state. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalPasteState(pinia) {\n    if (checkClipboardAccess())\n        return;\n    try {\n        loadStoresState(pinia, JSON.parse(await navigator.clipboard.readText()));\n        toastMessage('Global state pasted from clipboard.');\n    }\n    catch (error) {\n        if (checkNotFocusedError(error))\n            return;\n        toastMessage(`Failed to deserialize the state from clipboard. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nasync function actionGlobalSaveState(pinia) {\n    try {\n        saveAs(new Blob([JSON.stringify(pinia.state.value)], {\n            type: 'text/plain;charset=utf-8',\n        }), 'pinia-state.json');\n    }\n    catch (error) {\n        toastMessage(`Failed to export the state as JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nlet fileInput;\nfunction getFileOpener() {\n    if (!fileInput) {\n        fileInput = document.createElement('input');\n        fileInput.type = 'file';\n        fileInput.accept = '.json';\n    }\n    function openFile() {\n        return new Promise((resolve, reject) => {\n            fileInput.onchange = async () => {\n                const files = fileInput.files;\n                if (!files)\n                    return resolve(null);\n                const file = files.item(0);\n                if (!file)\n                    return resolve(null);\n                return resolve({ text: await file.text(), file });\n            };\n            // @ts-ignore: TODO: changed from 4.3 to 4.4\n            fileInput.oncancel = () => resolve(null);\n            fileInput.onerror = reject;\n            fileInput.click();\n        });\n    }\n    return openFile;\n}\nasync function actionGlobalOpenStateFile(pinia) {\n    try {\n        const open = getFileOpener();\n        const result = await open();\n        if (!result)\n            return;\n        const { text, file } = result;\n        loadStoresState(pinia, JSON.parse(text));\n        toastMessage(`Global state imported from \"${file.name}\".`);\n    }\n    catch (error) {\n        toastMessage(`Failed to import the state from JSON. Check the console for more details.`, 'error');\n        console.error(error);\n    }\n}\nfunction loadStoresState(pinia, state) {\n    for (const key in state) {\n        const storeState = pinia.state.value[key];\n        // store is already instantiated, patch it\n        if (storeState) {\n            Object.assign(storeState, state[key]);\n        }\n        else {\n            // store is not instantiated, set the initial state\n            pinia.state.value[key] = state[key];\n        }\n    }\n}\n\nfunction formatDisplay(display) {\n    return {\n        _custom: {\n            display,\n        },\n    };\n}\nconst PINIA_ROOT_LABEL = '🍍 Pinia (root)';\nconst PINIA_ROOT_ID = '_root';\nfunction formatStoreForInspectorTree(store) {\n    return isPinia(store)\n        ? {\n            id: PINIA_ROOT_ID,\n            label: PINIA_ROOT_LABEL,\n        }\n        : {\n            id: store.$id,\n            label: store.$id,\n        };\n}\nfunction formatStoreForInspectorState(store) {\n    if (isPinia(store)) {\n        const storeNames = Array.from(store._s.keys());\n        const storeMap = store._s;\n        const state = {\n            state: storeNames.map((storeId) => ({\n                editable: true,\n                key: storeId,\n                value: store.state.value[storeId],\n            })),\n            getters: storeNames\n                .filter((id) => storeMap.get(id)._getters)\n                .map((id) => {\n                const store = storeMap.get(id);\n                return {\n                    editable: false,\n                    key: id,\n                    value: store._getters.reduce((getters, key) => {\n                        getters[key] = store[key];\n                        return getters;\n                    }, {}),\n                };\n            }),\n        };\n        return state;\n    }\n    const state = {\n        state: Object.keys(store.$state).map((key) => ({\n            editable: true,\n            key,\n            value: store.$state[key],\n        })),\n    };\n    // avoid adding empty getters\n    if (store._getters && store._getters.length) {\n        state.getters = store._getters.map((getterName) => ({\n            editable: false,\n            key: getterName,\n            value: store[getterName],\n        }));\n    }\n    if (store._customProperties.size) {\n        state.customProperties = Array.from(store._customProperties).map((key) => ({\n            editable: true,\n            key,\n            value: store[key],\n        }));\n    }\n    return state;\n}\nfunction formatEventData(events) {\n    if (!events)\n        return {};\n    if (Array.isArray(events)) {\n        // TODO: handle add and delete for arrays and objects\n        return events.reduce((data, event) => {\n            data.keys.push(event.key);\n            data.operations.push(event.type);\n            data.oldValue[event.key] = event.oldValue;\n            data.newValue[event.key] = event.newValue;\n            return data;\n        }, {\n            oldValue: {},\n            keys: [],\n            operations: [],\n            newValue: {},\n        });\n    }\n    else {\n        return {\n            operation: formatDisplay(events.type),\n            key: formatDisplay(events.key),\n            oldValue: events.oldValue,\n            newValue: events.newValue,\n        };\n    }\n}\nfunction formatMutationType(type) {\n    switch (type) {\n        case MutationType.direct:\n            return 'mutation';\n        case MutationType.patchFunction:\n            return '$patch';\n        case MutationType.patchObject:\n            return '$patch';\n        default:\n            return 'unknown';\n    }\n}\n\n// timeline can be paused when directly changing the state\nlet isTimelineActive = true;\nconst componentStateTypes = [];\nconst MUTATIONS_LAYER_ID = 'pinia:mutations';\nconst INSPECTOR_ID = 'pinia';\nconst { assign: assign$1 } = Object;\n/**\n * Gets the displayed name of a store in devtools\n *\n * @param id - id of the store\n * @returns a formatted string\n */\nconst getStoreType = (id) => '🍍 ' + id;\n/**\n * Add the pinia plugin without any store. Allows displaying a Pinia plugin tab\n * as soon as it is added to the application.\n *\n * @param app - Vue application\n * @param pinia - pinia instance\n */\nfunction registerPiniaDevtools(app, pinia) {\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia 🍍',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n    }, (api) => {\n        if (typeof api.now !== 'function') {\n            toastMessage('You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\n        }\n        api.addTimelineLayer({\n            id: MUTATIONS_LAYER_ID,\n            label: `Pinia 🍍`,\n            color: 0xe5df88,\n        });\n        api.addInspector({\n            id: INSPECTOR_ID,\n            label: 'Pinia 🍍',\n            icon: 'storage',\n            treeFilterPlaceholder: 'Search stores',\n            actions: [\n                {\n                    icon: 'content_copy',\n                    action: () => {\n                        actionGlobalCopyState(pinia);\n                    },\n                    tooltip: 'Serialize and copy the state',\n                },\n                {\n                    icon: 'content_paste',\n                    action: async () => {\n                        await actionGlobalPasteState(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Replace the state with the content of your clipboard',\n                },\n                {\n                    icon: 'save',\n                    action: () => {\n                        actionGlobalSaveState(pinia);\n                    },\n                    tooltip: 'Save the state as a JSON file',\n                },\n                {\n                    icon: 'folder_open',\n                    action: async () => {\n                        await actionGlobalOpenStateFile(pinia);\n                        api.sendInspectorTree(INSPECTOR_ID);\n                        api.sendInspectorState(INSPECTOR_ID);\n                    },\n                    tooltip: 'Import the state from a JSON file',\n                },\n            ],\n            nodeActions: [\n                {\n                    icon: 'restore',\n                    tooltip: 'Reset the state (with \"$reset\")',\n                    action: (nodeId) => {\n                        const store = pinia._s.get(nodeId);\n                        if (!store) {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it wasn't found.`, 'warn');\n                        }\n                        else if (typeof store.$reset !== 'function') {\n                            toastMessage(`Cannot reset \"${nodeId}\" store because it doesn't have a \"$reset\" method implemented.`, 'warn');\n                        }\n                        else {\n                            store.$reset();\n                            toastMessage(`Store \"${nodeId}\" reset.`);\n                        }\n                    },\n                },\n            ],\n        });\n        api.on.inspectComponent((payload, ctx) => {\n            const proxy = (payload.componentInstance &&\n                payload.componentInstance.proxy);\n            if (proxy && proxy._pStores) {\n                const piniaStores = payload.componentInstance.proxy._pStores;\n                Object.values(piniaStores).forEach((store) => {\n                    payload.instanceData.state.push({\n                        type: getStoreType(store.$id),\n                        key: 'state',\n                        editable: true,\n                        value: store._isOptionsAPI\n                            ? {\n                                _custom: {\n                                    value: toRaw(store.$state),\n                                    actions: [\n                                        {\n                                            icon: 'restore',\n                                            tooltip: 'Reset the state of this store',\n                                            action: () => store.$reset(),\n                                        },\n                                    ],\n                                },\n                            }\n                            : // NOTE: workaround to unwrap transferred refs\n                                Object.keys(store.$state).reduce((state, key) => {\n                                    state[key] = store.$state[key];\n                                    return state;\n                                }, {}),\n                    });\n                    if (store._getters && store._getters.length) {\n                        payload.instanceData.state.push({\n                            type: getStoreType(store.$id),\n                            key: 'getters',\n                            editable: false,\n                            value: store._getters.reduce((getters, key) => {\n                                try {\n                                    getters[key] = store[key];\n                                }\n                                catch (error) {\n                                    // @ts-expect-error: we just want to show it in devtools\n                                    getters[key] = error;\n                                }\n                                return getters;\n                            }, {}),\n                        });\n                    }\n                });\n            }\n        });\n        api.on.getInspectorTree((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                let stores = [pinia];\n                stores = stores.concat(Array.from(pinia._s.values()));\n                payload.rootNodes = (payload.filter\n                    ? stores.filter((store) => '$id' in store\n                        ? store.$id\n                            .toLowerCase()\n                            .includes(payload.filter.toLowerCase())\n                        : PINIA_ROOT_LABEL.toLowerCase().includes(payload.filter.toLowerCase()))\n                    : stores).map(formatStoreForInspectorTree);\n            }\n        });\n        // Expose pinia instance as $pinia to window\n        globalThis.$pinia = pinia;\n        api.on.getInspectorState((payload) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    // this could be the selected store restored for a different project\n                    // so it's better not to say anything here\n                    return;\n                }\n                if (inspectedStore) {\n                    // Expose selected store as $store to window\n                    if (payload.nodeId !== PINIA_ROOT_ID)\n                        globalThis.$store = toRaw(inspectedStore);\n                    payload.state = formatStoreForInspectorState(inspectedStore);\n                }\n            }\n        });\n        api.on.editInspectorState((payload, ctx) => {\n            if (payload.app === app && payload.inspectorId === INSPECTOR_ID) {\n                const inspectedStore = payload.nodeId === PINIA_ROOT_ID\n                    ? pinia\n                    : pinia._s.get(payload.nodeId);\n                if (!inspectedStore) {\n                    return toastMessage(`store \"${payload.nodeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (!isPinia(inspectedStore)) {\n                    // access only the state\n                    if (path.length !== 1 ||\n                        !inspectedStore._customProperties.has(path[0]) ||\n                        path[0] in inspectedStore.$state) {\n                        path.unshift('$state');\n                    }\n                }\n                else {\n                    // Root access, we can omit the `.value` because the devtools API does it for us\n                    path.unshift('state');\n                }\n                isTimelineActive = false;\n                payload.set(inspectedStore, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n        api.on.editComponentState((payload) => {\n            if (payload.type.startsWith('🍍')) {\n                const storeId = payload.type.replace(/^🍍\\s*/, '');\n                const store = pinia._s.get(storeId);\n                if (!store) {\n                    return toastMessage(`store \"${storeId}\" not found`, 'error');\n                }\n                const { path } = payload;\n                if (path[0] !== 'state') {\n                    return toastMessage(`Invalid path for store \"${storeId}\":\\n${path}\\nOnly state can be modified.`);\n                }\n                // rewrite the first entry to be able to directly set the state as\n                // well as any other path\n                path[0] = '$state';\n                isTimelineActive = false;\n                payload.set(store, path, payload.state.value);\n                isTimelineActive = true;\n            }\n        });\n    });\n}\nfunction addStoreToDevtools(app, store) {\n    if (!componentStateTypes.includes(getStoreType(store.$id))) {\n        componentStateTypes.push(getStoreType(store.$id));\n    }\n    setupDevtoolsPlugin({\n        id: 'dev.esm.pinia',\n        label: 'Pinia 🍍',\n        logo: 'https://pinia.vuejs.org/logo.svg',\n        packageName: 'pinia',\n        homepage: 'https://pinia.vuejs.org',\n        componentStateTypes,\n        app,\n        settings: {\n            logStoreChanges: {\n                label: 'Notify about new/deleted stores',\n                type: 'boolean',\n                defaultValue: true,\n            },\n            // useEmojis: {\n            //   label: 'Use emojis in messages ⚡️',\n            //   type: 'boolean',\n            //   defaultValue: true,\n            // },\n        },\n    }, (api) => {\n        // gracefully handle errors\n        const now = typeof api.now === 'function' ? api.now.bind(api) : Date.now;\n        store.$onAction(({ after, onError, name, args }) => {\n            const groupId = runningActionId++;\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: '🛫 ' + name,\n                    subtitle: 'start',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        action: formatDisplay(name),\n                        args,\n                    },\n                    groupId,\n                },\n            });\n            after((result) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        title: '🛬 ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            result,\n                        },\n                        groupId,\n                    },\n                });\n            });\n            onError((error) => {\n                activeAction = undefined;\n                api.addTimelineEvent({\n                    layerId: MUTATIONS_LAYER_ID,\n                    event: {\n                        time: now(),\n                        logType: 'error',\n                        title: '💥 ' + name,\n                        subtitle: 'end',\n                        data: {\n                            store: formatDisplay(store.$id),\n                            action: formatDisplay(name),\n                            args,\n                            error,\n                        },\n                        groupId,\n                    },\n                });\n            });\n        }, true);\n        store._customProperties.forEach((name) => {\n            watch(() => unref(store[name]), (newValue, oldValue) => {\n                api.notifyComponentUpdate();\n                api.sendInspectorState(INSPECTOR_ID);\n                if (isTimelineActive) {\n                    api.addTimelineEvent({\n                        layerId: MUTATIONS_LAYER_ID,\n                        event: {\n                            time: now(),\n                            title: 'Change',\n                            subtitle: name,\n                            data: {\n                                newValue,\n                                oldValue,\n                            },\n                            groupId: activeAction,\n                        },\n                    });\n                }\n            }, { deep: true });\n        });\n        store.$subscribe(({ events, type }, state) => {\n            api.notifyComponentUpdate();\n            api.sendInspectorState(INSPECTOR_ID);\n            if (!isTimelineActive)\n                return;\n            // rootStore.state[store.id] = state\n            const eventData = {\n                time: now(),\n                title: formatMutationType(type),\n                data: assign$1({ store: formatDisplay(store.$id) }, formatEventData(events)),\n                groupId: activeAction,\n            };\n            if (type === MutationType.patchFunction) {\n                eventData.subtitle = '⤵️';\n            }\n            else if (type === MutationType.patchObject) {\n                eventData.subtitle = '🧩';\n            }\n            else if (events && !Array.isArray(events)) {\n                eventData.subtitle = events.type;\n            }\n            if (events) {\n                eventData.data['rawEvent(s)'] = {\n                    _custom: {\n                        display: 'DebuggerEvent',\n                        type: 'object',\n                        tooltip: 'raw DebuggerEvent[]',\n                        value: events,\n                    },\n                };\n            }\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: eventData,\n            });\n        }, { detached: true, flush: 'sync' });\n        const hotUpdate = store._hotUpdate;\n        store._hotUpdate = markRaw((newStore) => {\n            hotUpdate(newStore);\n            api.addTimelineEvent({\n                layerId: MUTATIONS_LAYER_ID,\n                event: {\n                    time: now(),\n                    title: '🔥 ' + store.$id,\n                    subtitle: 'HMR update',\n                    data: {\n                        store: formatDisplay(store.$id),\n                        info: formatDisplay(`HMR update`),\n                    },\n                },\n            });\n            // update the devtools too\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n        });\n        const { $dispose } = store;\n        store.$dispose = () => {\n            $dispose();\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(INSPECTOR_ID);\n            api.sendInspectorState(INSPECTOR_ID);\n            api.getSettings().logStoreChanges &&\n                toastMessage(`Disposed \"${store.$id}\" store 🗑`);\n        };\n        // trigger an update so it can display new registered stores\n        api.notifyComponentUpdate();\n        api.sendInspectorTree(INSPECTOR_ID);\n        api.sendInspectorState(INSPECTOR_ID);\n        api.getSettings().logStoreChanges &&\n            toastMessage(`\"${store.$id}\" store installed 🆕`);\n    });\n}\nlet runningActionId = 0;\nlet activeAction;\n/**\n * Patches a store to enable action grouping in devtools by wrapping the store with a Proxy that is passed as the\n * context of all actions, allowing us to set `runningAction` on each access and effectively associating any state\n * mutation to the action.\n *\n * @param store - store to patch\n * @param actionNames - list of actionst to patch\n */\nfunction patchActionForGrouping(store, actionNames, wrapWithProxy) {\n    // original actions of the store as they are given by pinia. We are going to override them\n    const actions = actionNames.reduce((storeActions, actionName) => {\n        // use toRaw to avoid tracking #541\n        storeActions[actionName] = toRaw(store)[actionName];\n        return storeActions;\n    }, {});\n    for (const actionName in actions) {\n        store[actionName] = function () {\n            // the running action id is incremented in a before action hook\n            const _actionId = runningActionId;\n            const trackedStore = wrapWithProxy\n                ? new Proxy(store, {\n                    get(...args) {\n                        activeAction = _actionId;\n                        return Reflect.get(...args);\n                    },\n                    set(...args) {\n                        activeAction = _actionId;\n                        return Reflect.set(...args);\n                    },\n                })\n                : store;\n            // For Setup Stores we need https://github.com/tc39/proposal-async-context\n            activeAction = _actionId;\n            const retValue = actions[actionName].apply(trackedStore, arguments);\n            // this is safer as async actions in Setup Stores would associate mutations done outside of the action\n            activeAction = undefined;\n            return retValue;\n        };\n    }\n}\n/**\n * pinia.use(devtoolsPlugin)\n */\nfunction devtoolsPlugin({ app, store, options }) {\n    // HMR module\n    if (store.$id.startsWith('__hot:')) {\n        return;\n    }\n    // detect option api vs setup api\n    store._isOptionsAPI = !!options.state;\n    // Do not overwrite actions mocked by @pinia/testing (#2298)\n    if (!store._p._testing) {\n        patchActionForGrouping(store, Object.keys(options.actions), store._isOptionsAPI);\n        // Upgrade the HMR to also update the new actions\n        const originalHotUpdate = store._hotUpdate;\n        toRaw(store)._hotUpdate = function (newStore) {\n            originalHotUpdate.apply(this, arguments);\n            patchActionForGrouping(store, Object.keys(newStore._hmrPayload.actions), !!store._isOptionsAPI);\n        };\n    }\n    addStoreToDevtools(app, \n    // FIXME: is there a way to allow the assignment from Store<Id, S, G, A> to StoreGeneric?\n    store);\n}\n\n/**\n * Creates a Pinia instance to be used by the application\n */\nfunction createPinia() {\n    const scope = effectScope(true);\n    // NOTE: here we could check the window object for a state and directly set it\n    // if there is anything like it with Vue 3 SSR\n    const state = scope.run(() => ref({}));\n    let _p = [];\n    // plugins added before calling app.use(pinia)\n    let toBeInstalled = [];\n    const pinia = markRaw({\n        install(app) {\n            // this allows calling useStore() outside of a component setup after\n            // installing pinia's plugin\n            setActivePinia(pinia);\n            if (!isVue2) {\n                pinia._a = app;\n                app.provide(piniaSymbol, pinia);\n                app.config.globalProperties.$pinia = pinia;\n                /* istanbul ignore else */\n                if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n                    registerPiniaDevtools(app, pinia);\n                }\n                toBeInstalled.forEach((plugin) => _p.push(plugin));\n                toBeInstalled = [];\n            }\n        },\n        use(plugin) {\n            if (!this._a && !isVue2) {\n                toBeInstalled.push(plugin);\n            }\n            else {\n                _p.push(plugin);\n            }\n            return this;\n        },\n        _p,\n        // it's actually undefined here\n        // @ts-expect-error\n        _a: null,\n        _e: scope,\n        _s: new Map(),\n        state,\n    });\n    // pinia devtools rely on dev only features so they cannot be forced unless\n    // the dev build of Vue is used. Avoid old browsers like IE11.\n    if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT && typeof Proxy !== 'undefined') {\n        pinia.use(devtoolsPlugin);\n    }\n    return pinia;\n}\n/**\n * Dispose a Pinia instance by stopping its effectScope and removing the state, plugins and stores. This is mostly\n * useful in tests, with both a testing pinia or a regular pinia and in applications that use multiple pinia instances.\n * Once disposed, the pinia instance cannot be used anymore.\n *\n * @param pinia - pinia instance\n */\nfunction disposePinia(pinia) {\n    pinia._e.stop();\n    pinia._s.clear();\n    pinia._p.splice(0);\n    pinia.state.value = {};\n    // @ts-expect-error: non valid\n    pinia._a = null;\n}\n\n/**\n * Checks if a function is a `StoreDefinition`.\n *\n * @param fn - object to test\n * @returns true if `fn` is a StoreDefinition\n */\nconst isUseStore = (fn) => {\n    return typeof fn === 'function' && typeof fn.$id === 'string';\n};\n/**\n * Mutates in place `newState` with `oldState` to _hot update_ it. It will\n * remove any key not existing in `newState` and recursively merge plain\n * objects.\n *\n * @param newState - new state object to be patched\n * @param oldState - old state that should be used to patch newState\n * @returns - newState\n */\nfunction patchObject(newState, oldState) {\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in oldState) {\n        const subPatch = oldState[key];\n        // skip the whole sub tree\n        if (!(key in newState)) {\n            continue;\n        }\n        const targetValue = newState[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            newState[key] = patchObject(targetValue, subPatch);\n        }\n        else {\n            // objects are either a bit more complex (e.g. refs) or primitives, so we\n            // just set the whole thing\n            if (isVue2) {\n                set(newState, key, subPatch);\n            }\n            else {\n                newState[key] = subPatch;\n            }\n        }\n    }\n    return newState;\n}\n/**\n * Creates an _accept_ function to pass to `import.meta.hot` in Vite applications.\n *\n * @example\n * ```js\n * const useUser = defineStore(...)\n * if (import.meta.hot) {\n *   import.meta.hot.accept(acceptHMRUpdate(useUser, import.meta.hot))\n * }\n * ```\n *\n * @param initialUseStore - return of the defineStore to hot update\n * @param hot - `import.meta.hot`\n */\nfunction acceptHMRUpdate(initialUseStore, hot) {\n    // strip as much as possible from iife.prod\n    if (!(process.env.NODE_ENV !== 'production')) {\n        return () => { };\n    }\n    return (newModule) => {\n        const pinia = hot.data.pinia || initialUseStore._pinia;\n        if (!pinia) {\n            // this store is still not used\n            return;\n        }\n        // preserve the pinia instance across loads\n        hot.data.pinia = pinia;\n        // console.log('got data', newStore)\n        for (const exportName in newModule) {\n            const useStore = newModule[exportName];\n            // console.log('checking for', exportName)\n            if (isUseStore(useStore) && pinia._s.has(useStore.$id)) {\n                // console.log('Accepting update for', useStore.$id)\n                const id = useStore.$id;\n                if (id !== initialUseStore.$id) {\n                    console.warn(`The id of the store changed from \"${initialUseStore.$id}\" to \"${id}\". Reloading.`);\n                    // return import.meta.hot.invalidate()\n                    return hot.invalidate();\n                }\n                const existingStore = pinia._s.get(id);\n                if (!existingStore) {\n                    console.log(`[Pinia]: skipping hmr because store doesn't exist yet`);\n                    return;\n                }\n                useStore(pinia, existingStore);\n            }\n        }\n    };\n}\n\nconst noop = () => { };\nfunction addSubscription(subscriptions, callback, detached, onCleanup = noop) {\n    subscriptions.push(callback);\n    const removeSubscription = () => {\n        const idx = subscriptions.indexOf(callback);\n        if (idx > -1) {\n            subscriptions.splice(idx, 1);\n            onCleanup();\n        }\n    };\n    if (!detached && getCurrentScope()) {\n        onScopeDispose(removeSubscription);\n    }\n    return removeSubscription;\n}\nfunction triggerSubscriptions(subscriptions, ...args) {\n    subscriptions.slice().forEach((callback) => {\n        callback(...args);\n    });\n}\n\nconst fallbackRunWithContext = (fn) => fn();\n/**\n * Marks a function as an action for `$onAction`\n * @internal\n */\nconst ACTION_MARKER = Symbol();\n/**\n * Action name symbol. Allows to add a name to an action after defining it\n * @internal\n */\nconst ACTION_NAME = Symbol();\nfunction mergeReactiveObjects(target, patchToApply) {\n    // Handle Map instances\n    if (target instanceof Map && patchToApply instanceof Map) {\n        patchToApply.forEach((value, key) => target.set(key, value));\n    }\n    else if (target instanceof Set && patchToApply instanceof Set) {\n        // Handle Set instances\n        patchToApply.forEach(target.add, target);\n    }\n    // no need to go through symbols because they cannot be serialized anyway\n    for (const key in patchToApply) {\n        if (!patchToApply.hasOwnProperty(key))\n            continue;\n        const subPatch = patchToApply[key];\n        const targetValue = target[key];\n        if (isPlainObject(targetValue) &&\n            isPlainObject(subPatch) &&\n            target.hasOwnProperty(key) &&\n            !isRef(subPatch) &&\n            !isReactive(subPatch)) {\n            // NOTE: here I wanted to warn about inconsistent types but it's not possible because in setup stores one might\n            // start the value of a property as a certain type e.g. a Map, and then for some reason, during SSR, change that\n            // to `undefined`. When trying to hydrate, we want to override the Map with `undefined`.\n            target[key] = mergeReactiveObjects(targetValue, subPatch);\n        }\n        else {\n            // @ts-expect-error: subPatch is a valid value\n            target[key] = subPatch;\n        }\n    }\n    return target;\n}\nconst skipHydrateSymbol = (process.env.NODE_ENV !== 'production')\n    ? Symbol('pinia:skipHydration')\n    : /* istanbul ignore next */ Symbol();\n/**\n * Tells Pinia to skip the hydration process of a given object. This is useful in setup stores (only) when you return a\n * stateful object in the store but it isn't really state. e.g. returning a router instance in a setup store.\n *\n * @param obj - target object\n * @returns obj\n */\nfunction skipHydrate(obj) {\n    return Object.defineProperty(obj, skipHydrateSymbol, {});\n}\n/**\n * Returns whether a value should be hydrated\n *\n * @param obj - target variable\n * @returns true if `obj` should be hydrated\n */\nfunction shouldHydrate(obj) {\n    return !isPlainObject(obj) || !obj.hasOwnProperty(skipHydrateSymbol);\n}\nconst { assign } = Object;\nfunction isComputed(o) {\n    return !!(isRef(o) && o.effect);\n}\nfunction createOptionsStore(id, options, pinia, hot) {\n    const { state, actions, getters } = options;\n    const initialState = pinia.state.value[id];\n    let store;\n    function setup() {\n        if (!initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(pinia.state.value, id, state ? state() : {});\n            }\n            else {\n                pinia.state.value[id] = state ? state() : {};\n            }\n        }\n        // avoid creating a state in pinia.state.value\n        const localState = (process.env.NODE_ENV !== 'production') && hot\n            ? // use ref() to unwrap refs inside state TODO: check if this is still necessary\n                toRefs(ref(state ? state() : {}).value)\n            : toRefs(pinia.state.value[id]);\n        return assign(localState, actions, Object.keys(getters || {}).reduce((computedGetters, name) => {\n            if ((process.env.NODE_ENV !== 'production') && name in localState) {\n                console.warn(`[🍍]: A getter cannot have the same name as another state property. Rename one of them. Found with \"${name}\" in store \"${id}\".`);\n            }\n            computedGetters[name] = markRaw(computed(() => {\n                setActivePinia(pinia);\n                // it was created just before\n                const store = pinia._s.get(id);\n                // allow cross using stores\n                /* istanbul ignore if */\n                if (isVue2 && !store._r)\n                    return;\n                // @ts-expect-error\n                // return getters![name].call(context, context)\n                // TODO: avoid reading the getter while assigning with a global variable\n                return getters[name].call(store, store);\n            }));\n            return computedGetters;\n        }, {}));\n    }\n    store = createSetupStore(id, setup, options, pinia, hot, true);\n    return store;\n}\nfunction createSetupStore($id, setup, options = {}, pinia, hot, isOptionsStore) {\n    let scope;\n    const optionsForPlugin = assign({ actions: {} }, options);\n    /* istanbul ignore if */\n    if ((process.env.NODE_ENV !== 'production') && !pinia._e.active) {\n        throw new Error('Pinia destroyed');\n    }\n    // watcher options for $subscribe\n    const $subscribeOptions = { deep: true };\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production') && !isVue2) {\n        $subscribeOptions.onTrigger = (event) => {\n            /* istanbul ignore else */\n            if (isListening) {\n                debuggerEvents = event;\n                // avoid triggering this while the store is being built and the state is being set in pinia\n            }\n            else if (isListening == false && !store._hotUpdating) {\n                // let patch send all the events together later\n                /* istanbul ignore else */\n                if (Array.isArray(debuggerEvents)) {\n                    debuggerEvents.push(event);\n                }\n                else {\n                    console.error('🍍 debuggerEvents should be an array. This is most likely an internal Pinia bug.');\n                }\n            }\n        };\n    }\n    // internal state\n    let isListening; // set to true at the end\n    let isSyncListening; // set to true at the end\n    let subscriptions = [];\n    let actionSubscriptions = [];\n    let debuggerEvents;\n    const initialState = pinia.state.value[$id];\n    // avoid setting the state for option stores if it is set\n    // by the setup\n    if (!isOptionsStore && !initialState && (!(process.env.NODE_ENV !== 'production') || !hot)) {\n        /* istanbul ignore if */\n        if (isVue2) {\n            set(pinia.state.value, $id, {});\n        }\n        else {\n            pinia.state.value[$id] = {};\n        }\n    }\n    const hotState = ref({});\n    // avoid triggering too many listeners\n    // https://github.com/vuejs/pinia/issues/1129\n    let activeListener;\n    function $patch(partialStateOrMutator) {\n        let subscriptionMutation;\n        isListening = isSyncListening = false;\n        // reset the debugger events since patches are sync\n        /* istanbul ignore else */\n        if ((process.env.NODE_ENV !== 'production')) {\n            debuggerEvents = [];\n        }\n        if (typeof partialStateOrMutator === 'function') {\n            partialStateOrMutator(pinia.state.value[$id]);\n            subscriptionMutation = {\n                type: MutationType.patchFunction,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        else {\n            mergeReactiveObjects(pinia.state.value[$id], partialStateOrMutator);\n            subscriptionMutation = {\n                type: MutationType.patchObject,\n                payload: partialStateOrMutator,\n                storeId: $id,\n                events: debuggerEvents,\n            };\n        }\n        const myListenerId = (activeListener = Symbol());\n        nextTick().then(() => {\n            if (activeListener === myListenerId) {\n                isListening = true;\n            }\n        });\n        isSyncListening = true;\n        // because we paused the watcher, we need to manually call the subscriptions\n        triggerSubscriptions(subscriptions, subscriptionMutation, pinia.state.value[$id]);\n    }\n    const $reset = isOptionsStore\n        ? function $reset() {\n            const { state } = options;\n            const newState = state ? state() : {};\n            // we use a patch to group all changes into one single subscription\n            this.$patch(($state) => {\n                // @ts-expect-error: FIXME: shouldn't error?\n                assign($state, newState);\n            });\n        }\n        : /* istanbul ignore next */\n            (process.env.NODE_ENV !== 'production')\n                ? () => {\n                    throw new Error(`🍍: Store \"${$id}\" is built using the setup syntax and does not implement $reset().`);\n                }\n                : noop;\n    function $dispose() {\n        scope.stop();\n        subscriptions = [];\n        actionSubscriptions = [];\n        pinia._s.delete($id);\n    }\n    /**\n     * Helper that wraps function so it can be tracked with $onAction\n     * @param fn - action to wrap\n     * @param name - name of the action\n     */\n    const action = (fn, name = '') => {\n        if (ACTION_MARKER in fn) {\n            fn[ACTION_NAME] = name;\n            return fn;\n        }\n        const wrappedAction = function () {\n            setActivePinia(pinia);\n            const args = Array.from(arguments);\n            const afterCallbackList = [];\n            const onErrorCallbackList = [];\n            function after(callback) {\n                afterCallbackList.push(callback);\n            }\n            function onError(callback) {\n                onErrorCallbackList.push(callback);\n            }\n            // @ts-expect-error\n            triggerSubscriptions(actionSubscriptions, {\n                args,\n                name: wrappedAction[ACTION_NAME],\n                store,\n                after,\n                onError,\n            });\n            let ret;\n            try {\n                ret = fn.apply(this && this.$id === $id ? this : store, args);\n                // handle sync errors\n            }\n            catch (error) {\n                triggerSubscriptions(onErrorCallbackList, error);\n                throw error;\n            }\n            if (ret instanceof Promise) {\n                return ret\n                    .then((value) => {\n                    triggerSubscriptions(afterCallbackList, value);\n                    return value;\n                })\n                    .catch((error) => {\n                    triggerSubscriptions(onErrorCallbackList, error);\n                    return Promise.reject(error);\n                });\n            }\n            // trigger after callbacks\n            triggerSubscriptions(afterCallbackList, ret);\n            return ret;\n        };\n        wrappedAction[ACTION_MARKER] = true;\n        wrappedAction[ACTION_NAME] = name; // will be set later\n        // @ts-expect-error: we are intentionally limiting the returned type to just Fn\n        // because all the added properties are internals that are exposed through `$onAction()` only\n        return wrappedAction;\n    };\n    const _hmrPayload = /*#__PURE__*/ markRaw({\n        actions: {},\n        getters: {},\n        state: [],\n        hotState,\n    });\n    const partialStore = {\n        _p: pinia,\n        // _s: scope,\n        $id,\n        $onAction: addSubscription.bind(null, actionSubscriptions),\n        $patch,\n        $reset,\n        $subscribe(callback, options = {}) {\n            const removeSubscription = addSubscription(subscriptions, callback, options.detached, () => stopWatcher());\n            const stopWatcher = scope.run(() => watch(() => pinia.state.value[$id], (state) => {\n                if (options.flush === 'sync' ? isSyncListening : isListening) {\n                    callback({\n                        storeId: $id,\n                        type: MutationType.direct,\n                        events: debuggerEvents,\n                    }, state);\n                }\n            }, assign({}, $subscribeOptions, options)));\n            return removeSubscription;\n        },\n        $dispose,\n    };\n    /* istanbul ignore if */\n    if (isVue2) {\n        // start as non ready\n        partialStore._r = false;\n    }\n    const store = reactive((process.env.NODE_ENV !== 'production') || ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT)\n        ? assign({\n            _hmrPayload,\n            _customProperties: markRaw(new Set()), // devtools custom properties\n        }, partialStore\n        // must be added later\n        // setupStore\n        )\n        : partialStore);\n    // store the partial store now so the setup of stores can instantiate each other before they are finished without\n    // creating infinite loops.\n    pinia._s.set($id, store);\n    const runWithContext = (pinia._a && pinia._a.runWithContext) || fallbackRunWithContext;\n    // TODO: idea create skipSerialize that marks properties as non serializable and they are skipped\n    const setupStore = runWithContext(() => pinia._e.run(() => (scope = effectScope()).run(() => setup({ action }))));\n    // overwrite existing actions to support $onAction\n    for (const key in setupStore) {\n        const prop = setupStore[key];\n        if ((isRef(prop) && !isComputed(prop)) || isReactive(prop)) {\n            // mark it as a piece of state to be serialized\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                set(hotState.value, key, toRef(setupStore, key));\n                // createOptionStore directly sets the state in pinia.state.value so we\n                // can just skip that\n            }\n            else if (!isOptionsStore) {\n                // in setup stores we must hydrate the state and sync pinia state tree with the refs the user just created\n                if (initialState && shouldHydrate(prop)) {\n                    if (isRef(prop)) {\n                        prop.value = initialState[key];\n                    }\n                    else {\n                        // probably a reactive object, lets recursively assign\n                        // @ts-expect-error: prop is unknown\n                        mergeReactiveObjects(prop, initialState[key]);\n                    }\n                }\n                // transfer the ref to the pinia state to keep everything in sync\n                /* istanbul ignore if */\n                if (isVue2) {\n                    set(pinia.state.value[$id], key, prop);\n                }\n                else {\n                    pinia.state.value[$id][key] = prop;\n                }\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.state.push(key);\n            }\n            // action\n        }\n        else if (typeof prop === 'function') {\n            const actionValue = (process.env.NODE_ENV !== 'production') && hot ? prop : action(prop, key);\n            // this a hot module replacement store because the hotUpdate method needs\n            // to do it with the right context\n            /* istanbul ignore if */\n            if (isVue2) {\n                set(setupStore, key, actionValue);\n            }\n            else {\n                // @ts-expect-error\n                setupStore[key] = actionValue;\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                _hmrPayload.actions[key] = prop;\n            }\n            // list actions so they can be used in plugins\n            // @ts-expect-error\n            optionsForPlugin.actions[key] = prop;\n        }\n        else if ((process.env.NODE_ENV !== 'production')) {\n            // add getters for devtools\n            if (isComputed(prop)) {\n                _hmrPayload.getters[key] = isOptionsStore\n                    ? // @ts-expect-error\n                        options.getters[key]\n                    : prop;\n                if (IS_CLIENT) {\n                    const getters = setupStore._getters ||\n                        // @ts-expect-error: same\n                        (setupStore._getters = markRaw([]));\n                    getters.push(key);\n                }\n            }\n        }\n    }\n    // add the state, getters, and action properties\n    /* istanbul ignore if */\n    if (isVue2) {\n        Object.keys(setupStore).forEach((key) => {\n            set(store, key, setupStore[key]);\n        });\n    }\n    else {\n        assign(store, setupStore);\n        // allows retrieving reactive objects with `storeToRefs()`. Must be called after assigning to the reactive object.\n        // Make `storeToRefs()` work with `reactive()` #799\n        assign(toRaw(store), setupStore);\n    }\n    // use this instead of a computed with setter to be able to create it anywhere\n    // without linking the computed lifespan to wherever the store is first\n    // created.\n    Object.defineProperty(store, '$state', {\n        get: () => ((process.env.NODE_ENV !== 'production') && hot ? hotState.value : pinia.state.value[$id]),\n        set: (state) => {\n            /* istanbul ignore if */\n            if ((process.env.NODE_ENV !== 'production') && hot) {\n                throw new Error('cannot set hotState');\n            }\n            $patch(($state) => {\n                // @ts-expect-error: FIXME: shouldn't error?\n                assign($state, state);\n            });\n        },\n    });\n    // add the hotUpdate before plugins to allow them to override it\n    /* istanbul ignore else */\n    if ((process.env.NODE_ENV !== 'production')) {\n        store._hotUpdate = markRaw((newStore) => {\n            store._hotUpdating = true;\n            newStore._hmrPayload.state.forEach((stateKey) => {\n                if (stateKey in store.$state) {\n                    const newStateTarget = newStore.$state[stateKey];\n                    const oldStateSource = store.$state[stateKey];\n                    if (typeof newStateTarget === 'object' &&\n                        isPlainObject(newStateTarget) &&\n                        isPlainObject(oldStateSource)) {\n                        patchObject(newStateTarget, oldStateSource);\n                    }\n                    else {\n                        // transfer the ref\n                        newStore.$state[stateKey] = oldStateSource;\n                    }\n                }\n                // patch direct access properties to allow store.stateProperty to work as\n                // store.$state.stateProperty\n                set(store, stateKey, toRef(newStore.$state, stateKey));\n            });\n            // remove deleted state properties\n            Object.keys(store.$state).forEach((stateKey) => {\n                if (!(stateKey in newStore.$state)) {\n                    del(store, stateKey);\n                }\n            });\n            // avoid devtools logging this as a mutation\n            isListening = false;\n            isSyncListening = false;\n            pinia.state.value[$id] = toRef(newStore._hmrPayload, 'hotState');\n            isSyncListening = true;\n            nextTick().then(() => {\n                isListening = true;\n            });\n            for (const actionName in newStore._hmrPayload.actions) {\n                const actionFn = newStore[actionName];\n                set(store, actionName, action(actionFn, actionName));\n            }\n            // TODO: does this work in both setup and option store?\n            for (const getterName in newStore._hmrPayload.getters) {\n                const getter = newStore._hmrPayload.getters[getterName];\n                const getterValue = isOptionsStore\n                    ? // special handling of options api\n                        computed(() => {\n                            setActivePinia(pinia);\n                            return getter.call(store, store);\n                        })\n                    : getter;\n                set(store, getterName, getterValue);\n            }\n            // remove deleted getters\n            Object.keys(store._hmrPayload.getters).forEach((key) => {\n                if (!(key in newStore._hmrPayload.getters)) {\n                    del(store, key);\n                }\n            });\n            // remove old actions\n            Object.keys(store._hmrPayload.actions).forEach((key) => {\n                if (!(key in newStore._hmrPayload.actions)) {\n                    del(store, key);\n                }\n            });\n            // update the values used in devtools and to allow deleting new properties later on\n            store._hmrPayload = newStore._hmrPayload;\n            store._getters = newStore._getters;\n            store._hotUpdating = false;\n        });\n    }\n    if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n        const nonEnumerable = {\n            writable: true,\n            configurable: true,\n            // avoid warning on devtools trying to display this property\n            enumerable: false,\n        };\n        ['_p', '_hmrPayload', '_getters', '_customProperties'].forEach((p) => {\n            Object.defineProperty(store, p, assign({ value: store[p] }, nonEnumerable));\n        });\n    }\n    /* istanbul ignore if */\n    if (isVue2) {\n        // mark the store as ready before plugins\n        store._r = true;\n    }\n    // apply all plugins\n    pinia._p.forEach((extender) => {\n        /* istanbul ignore else */\n        if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n            const extensions = scope.run(() => extender({\n                store: store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            }));\n            Object.keys(extensions || {}).forEach((key) => store._customProperties.add(key));\n            assign(store, extensions);\n        }\n        else {\n            assign(store, scope.run(() => extender({\n                store: store,\n                app: pinia._a,\n                pinia,\n                options: optionsForPlugin,\n            })));\n        }\n    });\n    if ((process.env.NODE_ENV !== 'production') &&\n        store.$state &&\n        typeof store.$state === 'object' &&\n        typeof store.$state.constructor === 'function' &&\n        !store.$state.constructor.toString().includes('[native code]')) {\n        console.warn(`[🍍]: The \"state\" must be a plain object. It cannot be\\n` +\n            `\\tstate: () => new MyClass()\\n` +\n            `Found in store \"${store.$id}\".`);\n    }\n    // only apply hydrate to option stores with an initial state in pinia\n    if (initialState &&\n        isOptionsStore &&\n        options.hydrate) {\n        options.hydrate(store.$state, initialState);\n    }\n    isListening = true;\n    isSyncListening = true;\n    return store;\n}\n// allows unused stores to be tree shaken\n/*! #__NO_SIDE_EFFECTS__ */\nfunction defineStore(\n// TODO: add proper types from above\nidOrOptions, setup, setupOptions) {\n    let id;\n    let options;\n    const isSetupStore = typeof setup === 'function';\n    if (typeof idOrOptions === 'string') {\n        id = idOrOptions;\n        // the option store setup will contain the actual options in this case\n        options = isSetupStore ? setupOptions : setup;\n    }\n    else {\n        options = idOrOptions;\n        id = idOrOptions.id;\n        if ((process.env.NODE_ENV !== 'production') && typeof id !== 'string') {\n            throw new Error(`[🍍]: \"defineStore()\" must be passed a store id as its first argument.`);\n        }\n    }\n    function useStore(pinia, hot) {\n        const hasContext = hasInjectionContext();\n        pinia =\n            // in test mode, ignore the argument provided as we can always retrieve a\n            // pinia instance with getActivePinia()\n            ((process.env.NODE_ENV === 'test') && activePinia && activePinia._testing ? null : pinia) ||\n                (hasContext ? inject(piniaSymbol, null) : null);\n        if (pinia)\n            setActivePinia(pinia);\n        if ((process.env.NODE_ENV !== 'production') && !activePinia) {\n            throw new Error(`[🍍]: \"getActivePinia()\" was called but there was no active Pinia. Are you trying to use a store before calling \"app.use(pinia)\"?\\n` +\n                `See https://pinia.vuejs.org/core-concepts/outside-component-usage.html for help.\\n` +\n                `This will fail in production.`);\n        }\n        pinia = activePinia;\n        if (!pinia._s.has(id)) {\n            // creating the store registers it in `pinia._s`\n            if (isSetupStore) {\n                createSetupStore(id, setup, options, pinia);\n            }\n            else {\n                createOptionsStore(id, options, pinia);\n            }\n            /* istanbul ignore else */\n            if ((process.env.NODE_ENV !== 'production')) {\n                // @ts-expect-error: not the right inferred type\n                useStore._pinia = pinia;\n            }\n        }\n        const store = pinia._s.get(id);\n        if ((process.env.NODE_ENV !== 'production') && hot) {\n            const hotId = '__hot:' + id;\n            const newStore = isSetupStore\n                ? createSetupStore(hotId, setup, options, pinia, true)\n                : createOptionsStore(hotId, assign({}, options), pinia, true);\n            hot._hotUpdate(newStore);\n            // cleanup the state properties and the store from the cache\n            delete pinia.state.value[hotId];\n            pinia._s.delete(hotId);\n        }\n        if ((process.env.NODE_ENV !== 'production') && IS_CLIENT) {\n            const currentInstance = getCurrentInstance();\n            // save stores in instances to access them devtools\n            if (currentInstance &&\n                currentInstance.proxy &&\n                // avoid adding stores that are just built for hot module replacement\n                !hot) {\n                const vm = currentInstance.proxy;\n                const cache = '_pStores' in vm ? vm._pStores : (vm._pStores = {});\n                cache[id] = store;\n            }\n        }\n        // StoreGeneric cannot be casted towards Store\n        return store;\n    }\n    useStore.$id = id;\n    return useStore;\n}\n\nlet mapStoreSuffix = 'Store';\n/**\n * Changes the suffix added by `mapStores()`. Can be set to an empty string.\n * Defaults to `\"Store\"`. Make sure to extend the MapStoresCustomization\n * interface if you are using TypeScript.\n *\n * @param suffix - new suffix\n */\nfunction setMapStoreSuffix(suffix // could be 'Store' but that would be annoying for JS\n) {\n    mapStoreSuffix = suffix;\n}\n/**\n * Allows using stores without the composition API (`setup()`) by generating an\n * object to be spread in the `computed` field of a component. It accepts a list\n * of store definitions.\n *\n * @example\n * ```js\n * export default {\n *   computed: {\n *     // other computed properties\n *     ...mapStores(useUserStore, useCartStore)\n *   },\n *\n *   created() {\n *     this.userStore // store with id \"user\"\n *     this.cartStore // store with id \"cart\"\n *   }\n * }\n * ```\n *\n * @param stores - list of stores to map to an object\n */\nfunction mapStores(...stores) {\n    if ((process.env.NODE_ENV !== 'production') && Array.isArray(stores[0])) {\n        console.warn(`[🍍]: Directly pass all stores to \"mapStores()\" without putting them in an array:\\n` +\n            `Replace\\n` +\n            `\\tmapStores([useAuthStore, useCartStore])\\n` +\n            `with\\n` +\n            `\\tmapStores(useAuthStore, useCartStore)\\n` +\n            `This will fail in production if not fixed.`);\n        stores = stores[0];\n    }\n    return stores.reduce((reduced, useStore) => {\n        // @ts-expect-error: $id is added by defineStore\n        reduced[useStore.$id + mapStoreSuffix] = function () {\n            return useStore(this.$pinia);\n        };\n        return reduced;\n    }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            reduced[key] = function () {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[key];\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function () {\n                const store = useStore(this.$pinia);\n                const storeKey = keysOrMapper[key];\n                // for some reason TS is unable to infer the type of storeKey to be a\n                // function\n                return typeof storeKey === 'function'\n                    ? storeKey.call(this, store)\n                    : // @ts-expect-error: FIXME: should work?\n                        store[storeKey];\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Alias for `mapState()`. You should use `mapState()` instead.\n * @deprecated use `mapState()` instead.\n */\nconst mapGetters = mapState;\n/**\n * Allows directly using actions from your store without using the composition\n * API (`setup()`) by generating an object to be spread in the `methods` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapActions(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[key](...args);\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            // @ts-expect-error\n            reduced[key] = function (...args) {\n                // @ts-expect-error: FIXME: should work?\n                return useStore(this.$pinia)[keysOrMapper[key]](...args);\n            };\n            return reduced;\n        }, {});\n}\n/**\n * Allows using state and getters from one store without using the composition\n * API (`setup()`) by generating an object to be spread in the `computed` field\n * of a component.\n *\n * @param useStore - store to map from\n * @param keysOrMapper - array or object\n */\nfunction mapWritableState(useStore, keysOrMapper) {\n    return Array.isArray(keysOrMapper)\n        ? keysOrMapper.reduce((reduced, key) => {\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[key];\n                },\n                set(value) {\n                    return (useStore(this.$pinia)[key] = value);\n                },\n            };\n            return reduced;\n        }, {})\n        : Object.keys(keysOrMapper).reduce((reduced, key) => {\n            reduced[key] = {\n                get() {\n                    return useStore(this.$pinia)[keysOrMapper[key]];\n                },\n                set(value) {\n                    return (useStore(this.$pinia)[keysOrMapper[key]] = value);\n                },\n            };\n            return reduced;\n        }, {});\n}\n\n/**\n * Creates an object of references with all the state, getters, and plugin-added\n * state properties of the store. Similar to `toRefs()` but specifically\n * designed for Pinia stores so methods and non reactive properties are\n * completely ignored.\n *\n * @param store - store to extract the refs from\n */\nfunction storeToRefs(store) {\n    // See https://github.com/vuejs/pinia/issues/852\n    // It's easier to just use toRefs() even if it includes more stuff\n    if (isVue2) {\n        // @ts-expect-error: toRefs include methods and others\n        return toRefs(store);\n    }\n    else {\n        const rawStore = toRaw(store);\n        const refs = {};\n        for (const key in rawStore) {\n            const value = rawStore[key];\n            // There is no native method to check for a computed\n            // https://github.com/vuejs/core/pull/4165\n            if (value.effect) {\n                // @ts-expect-error: too hard to type correctly\n                refs[key] =\n                    // ...\n                    computed({\n                        get: () => store[key],\n                        set(value) {\n                            store[key] = value;\n                        },\n                    });\n            }\n            else if (isRef(value) || isReactive(value)) {\n                // @ts-expect-error: the key is state or getter\n                refs[key] =\n                    // ---\n                    toRef(store, key);\n            }\n        }\n        return refs;\n    }\n}\n\n/**\n * Vue 2 Plugin that must be installed for pinia to work. Note **you don't need\n * this plugin if you are using Nuxt.js**. Use the `buildModule` instead:\n * https://pinia.vuejs.org/ssr/nuxt.html.\n *\n * @example\n * ```js\n * import Vue from 'vue'\n * import { PiniaVuePlugin, createPinia } from 'pinia'\n *\n * Vue.use(PiniaVuePlugin)\n * const pinia = createPinia()\n *\n * new Vue({\n *   el: '#app',\n *   // ...\n *   pinia,\n * })\n * ```\n *\n * @param _Vue - `Vue` imported from 'vue'.\n */\nconst PiniaVuePlugin = function (_Vue) {\n    // Equivalent of\n    // app.config.globalProperties.$pinia = pinia\n    _Vue.mixin({\n        beforeCreate() {\n            const options = this.$options;\n            if (options.pinia) {\n                const pinia = options.pinia;\n                // HACK: taken from provide(): https://github.com/vuejs/composition-api/blob/main/src/apis/inject.ts#L31\n                /* istanbul ignore else */\n                if (!this._provided) {\n                    const provideCache = {};\n                    Object.defineProperty(this, '_provided', {\n                        get: () => provideCache,\n                        set: (v) => Object.assign(provideCache, v),\n                    });\n                }\n                this._provided[piniaSymbol] = pinia;\n                // propagate the pinia instance in an SSR friendly way\n                // avoid adding it to nuxt twice\n                /* istanbul ignore else */\n                if (!this.$pinia) {\n                    this.$pinia = pinia;\n                }\n                pinia._a = this;\n                if (IS_CLIENT) {\n                    // this allows calling useStore() outside of a component setup after\n                    // installing pinia's plugin\n                    setActivePinia(pinia);\n                }\n                if ((((process.env.NODE_ENV !== 'production') || (typeof __VUE_PROD_DEVTOOLS__ !== 'undefined' && __VUE_PROD_DEVTOOLS__)) && !(process.env.NODE_ENV === 'test')) && IS_CLIENT) {\n                    registerPiniaDevtools(pinia._a, pinia);\n                }\n            }\n            else if (!this.$pinia && options.parent && options.parent.$pinia) {\n                this.$pinia = options.parent.$pinia;\n            }\n        },\n        destroyed() {\n            delete this._pStores;\n        },\n    });\n};\n\nexport { MutationType, PiniaVuePlugin, acceptHMRUpdate, createPinia, defineStore, disposePinia, getActivePinia, mapActions, mapGetters, mapState, mapStores, mapWritableState, setActivePinia, setMapStoreSuffix, shouldHydrate, skipHydrate, storeToRefs };\n","/*!\n  * vue-router v4.5.0\n  * (c) 2024 Eduardo San Martin Morote\n  * @license MIT\n  */\nimport { getCurrentInstance, inject, onUnmounted, onDeactivated, onActivated, computed, unref, watchEffect, defineComponent, reactive, h, provide, ref, watch, shallowRef, shallowReactive, nextTick } from 'vue';\nimport { setupDevtoolsPlugin } from '@vue/devtools-api';\n\nconst isBrowser = typeof document !== 'undefined';\n\n/**\n * Allows differentiating lazy components from functional components and vue-class-component\n * @internal\n *\n * @param component\n */\nfunction isRouteComponent(component) {\n    return (typeof component === 'object' ||\n        'displayName' in component ||\n        'props' in component ||\n        '__vccOpts' in component);\n}\nfunction isESModule(obj) {\n    return (obj.__esModule ||\n        obj[Symbol.toStringTag] === 'Module' ||\n        // support CF with dynamic imports that do not\n        // add the Module string tag\n        (obj.default && isRouteComponent(obj.default)));\n}\nconst assign = Object.assign;\nfunction applyToParams(fn, params) {\n    const newParams = {};\n    for (const key in params) {\n        const value = params[key];\n        newParams[key] = isArray(value)\n            ? value.map(fn)\n            : fn(value);\n    }\n    return newParams;\n}\nconst noop = () => { };\n/**\n * Typesafe alternative to Array.isArray\n * https://github.com/microsoft/TypeScript/pull/48228\n */\nconst isArray = Array.isArray;\n\nfunction warn(msg) {\n    // avoid using ...args as it breaks in older Edge builds\n    const args = Array.from(arguments).slice(1);\n    console.warn.apply(console, ['[Vue Router warn]: ' + msg].concat(args));\n}\n\n/**\n * Encoding Rules (␣ = Space)\n * - Path: ␣ \" < > # ? { }\n * - Query: ␣ \" < > # & =\n * - Hash: ␣ \" < > `\n *\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\n * defines some extra characters to be encoded. Most browsers do not encode them\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\n * also encode `!'()*`. Leaving un-encoded only ASCII alphanumeric(`a-zA-Z0-9`)\n * plus `-._~`. This extra safety should be applied to query by patching the\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\n * encoded everywhere because some browsers like FF encode it when directly\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\n */\n// const EXTRA_RESERVED_RE = /[!'()*]/g\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\nconst HASH_RE = /#/g; // %23\nconst AMPERSAND_RE = /&/g; // %26\nconst SLASH_RE = /\\//g; // %2F\nconst EQUAL_RE = /=/g; // %3D\nconst IM_RE = /\\?/g; // %3F\nconst PLUS_RE = /\\+/g; // %2B\n/**\n * NOTE: It's not clear to me if we should encode the + symbol in queries, it\n * seems to be less flexible than not doing so and I can't find out the legacy\n * systems requiring this for regular requests like text/html. In the standard,\n * the encoding of the plus character is only mentioned for\n * application/x-www-form-urlencoded\n * (https://url.spec.whatwg.org/#urlencoded-parsing) and most browsers seems lo\n * leave the plus character as is in queries. To be more flexible, we allow the\n * plus character on the query, but it can also be manually encoded by the user.\n *\n * Resources:\n * - https://url.spec.whatwg.org/#urlencoded-parsing\n * - https://stackoverflow.com/questions/1634271/url-encoding-the-space-character-or-20\n */\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\nconst ENC_CARET_RE = /%5E/g; // ^\nconst ENC_BACKTICK_RE = /%60/g; // `\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\nconst ENC_PIPE_RE = /%7C/g; // |\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\nconst ENC_SPACE_RE = /%20/g; // }\n/**\n * Encode characters that need to be encoded on the path, search and hash\n * sections of the URL.\n *\n * @internal\n * @param text - string to encode\n * @returns encoded string\n */\nfunction commonEncode(text) {\n    return encodeURI('' + text)\n        .replace(ENC_PIPE_RE, '|')\n        .replace(ENC_BRACKET_OPEN_RE, '[')\n        .replace(ENC_BRACKET_CLOSE_RE, ']');\n}\n/**\n * Encode characters that need to be encoded on the hash section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodeHash(text) {\n    return commonEncode(text)\n        .replace(ENC_CURLY_OPEN_RE, '{')\n        .replace(ENC_CURLY_CLOSE_RE, '}')\n        .replace(ENC_CARET_RE, '^');\n}\n/**\n * Encode characters that need to be encoded query values on the query\n * section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodeQueryValue(text) {\n    return (commonEncode(text)\n        // Encode the space as +, encode the + to differentiate it from the space\n        .replace(PLUS_RE, '%2B')\n        .replace(ENC_SPACE_RE, '+')\n        .replace(HASH_RE, '%23')\n        .replace(AMPERSAND_RE, '%26')\n        .replace(ENC_BACKTICK_RE, '`')\n        .replace(ENC_CURLY_OPEN_RE, '{')\n        .replace(ENC_CURLY_CLOSE_RE, '}')\n        .replace(ENC_CARET_RE, '^'));\n}\n/**\n * Like `encodeQueryValue` but also encodes the `=` character.\n *\n * @param text - string to encode\n */\nfunction encodeQueryKey(text) {\n    return encodeQueryValue(text).replace(EQUAL_RE, '%3D');\n}\n/**\n * Encode characters that need to be encoded on the path section of the URL.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodePath(text) {\n    return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\n}\n/**\n * Encode characters that need to be encoded on the path section of the URL as a\n * param. This function encodes everything {@link encodePath} does plus the\n * slash (`/`) character. If `text` is `null` or `undefined`, returns an empty\n * string instead.\n *\n * @param text - string to encode\n * @returns encoded string\n */\nfunction encodeParam(text) {\n    return text == null ? '' : encodePath(text).replace(SLASH_RE, '%2F');\n}\n/**\n * Decode text using `decodeURIComponent`. Returns the original text if it\n * fails.\n *\n * @param text - string to decode\n * @returns decoded string\n */\nfunction decode(text) {\n    try {\n        return decodeURIComponent('' + text);\n    }\n    catch (err) {\n        (process.env.NODE_ENV !== 'production') && warn(`Error decoding \"${text}\". Using original value`);\n    }\n    return '' + text;\n}\n\nconst TRAILING_SLASH_RE = /\\/$/;\nconst removeTrailingSlash = (path) => path.replace(TRAILING_SLASH_RE, '');\n/**\n * Transforms a URI into a normalized history location\n *\n * @param parseQuery\n * @param location - URI to normalize\n * @param currentLocation - current absolute location. Allows resolving relative\n * paths. Must start with `/`. Defaults to `/`\n * @returns a normalized history location\n */\nfunction parseURL(parseQuery, location, currentLocation = '/') {\n    let path, query = {}, searchString = '', hash = '';\n    // Could use URL and URLSearchParams but IE 11 doesn't support it\n    // TODO: move to new URL()\n    const hashPos = location.indexOf('#');\n    let searchPos = location.indexOf('?');\n    // the hash appears before the search, so it's not part of the search string\n    if (hashPos < searchPos && hashPos >= 0) {\n        searchPos = -1;\n    }\n    if (searchPos > -1) {\n        path = location.slice(0, searchPos);\n        searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\n        query = parseQuery(searchString);\n    }\n    if (hashPos > -1) {\n        path = path || location.slice(0, hashPos);\n        // keep the # character\n        hash = location.slice(hashPos, location.length);\n    }\n    // no search and no query\n    path = resolveRelativePath(path != null ? path : location, currentLocation);\n    // empty path means a relative query or hash `?foo=f`, `#thing`\n    return {\n        fullPath: path + (searchString && '?') + searchString + hash,\n        path,\n        query,\n        hash: decode(hash),\n    };\n}\n/**\n * Stringifies a URL object\n *\n * @param stringifyQuery\n * @param location\n */\nfunction stringifyURL(stringifyQuery, location) {\n    const query = location.query ? stringifyQuery(location.query) : '';\n    return location.path + (query && '?') + query + (location.hash || '');\n}\n/**\n * Strips off the base from the beginning of a location.pathname in a non-case-sensitive way.\n *\n * @param pathname - location.pathname\n * @param base - base to strip off\n */\nfunction stripBase(pathname, base) {\n    // no base or base is not found at the beginning\n    if (!base || !pathname.toLowerCase().startsWith(base.toLowerCase()))\n        return pathname;\n    return pathname.slice(base.length) || '/';\n}\n/**\n * Checks if two RouteLocation are equal. This means that both locations are\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\n * parameters and `hash` are the same\n *\n * @param stringifyQuery - A function that takes a query object of type LocationQueryRaw and returns a string representation of it.\n * @param a - first {@link RouteLocation}\n * @param b - second {@link RouteLocation}\n */\nfunction isSameRouteLocation(stringifyQuery, a, b) {\n    const aLastIndex = a.matched.length - 1;\n    const bLastIndex = b.matched.length - 1;\n    return (aLastIndex > -1 &&\n        aLastIndex === bLastIndex &&\n        isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) &&\n        isSameRouteLocationParams(a.params, b.params) &&\n        stringifyQuery(a.query) === stringifyQuery(b.query) &&\n        a.hash === b.hash);\n}\n/**\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\n * considered equal to the `RouteRecord` they are aliasing.\n *\n * @param a - first {@link RouteRecord}\n * @param b - second {@link RouteRecord}\n */\nfunction isSameRouteRecord(a, b) {\n    // since the original record has an undefined value for aliasOf\n    // but all aliases point to the original record, this will always compare\n    // the original record\n    return (a.aliasOf || a) === (b.aliasOf || b);\n}\nfunction isSameRouteLocationParams(a, b) {\n    if (Object.keys(a).length !== Object.keys(b).length)\n        return false;\n    for (const key in a) {\n        if (!isSameRouteLocationParamsValue(a[key], b[key]))\n            return false;\n    }\n    return true;\n}\nfunction isSameRouteLocationParamsValue(a, b) {\n    return isArray(a)\n        ? isEquivalentArray(a, b)\n        : isArray(b)\n            ? isEquivalentArray(b, a)\n            : a === b;\n}\n/**\n * Check if two arrays are the same or if an array with one single entry is the\n * same as another primitive value. Used to check query and parameters\n *\n * @param a - array of values\n * @param b - array of values or a single value\n */\nfunction isEquivalentArray(a, b) {\n    return isArray(b)\n        ? a.length === b.length && a.every((value, i) => value === b[i])\n        : a.length === 1 && a[0] === b;\n}\n/**\n * Resolves a relative path that starts with `.`.\n *\n * @param to - path location we are resolving\n * @param from - currentLocation.path, should start with `/`\n */\nfunction resolveRelativePath(to, from) {\n    if (to.startsWith('/'))\n        return to;\n    if ((process.env.NODE_ENV !== 'production') && !from.startsWith('/')) {\n        warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\n        return to;\n    }\n    if (!to)\n        return from;\n    const fromSegments = from.split('/');\n    const toSegments = to.split('/');\n    const lastToSegment = toSegments[toSegments.length - 1];\n    // make . and ./ the same (../ === .., ../../ === ../..)\n    // this is the same behavior as new URL()\n    if (lastToSegment === '..' || lastToSegment === '.') {\n        toSegments.push('');\n    }\n    let position = fromSegments.length - 1;\n    let toPosition;\n    let segment;\n    for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\n        segment = toSegments[toPosition];\n        // we stay on the same position\n        if (segment === '.')\n            continue;\n        // go up in the from array\n        if (segment === '..') {\n            // we can't go below zero, but we still need to increment toPosition\n            if (position > 1)\n                position--;\n            // continue\n        }\n        // we reached a non-relative path, we stop here\n        else\n            break;\n    }\n    return (fromSegments.slice(0, position).join('/') +\n        '/' +\n        toSegments.slice(toPosition).join('/'));\n}\n/**\n * Initial route location where the router is. Can be used in navigation guards\n * to differentiate the initial navigation.\n *\n * @example\n * ```js\n * import { START_LOCATION } from 'vue-router'\n *\n * router.beforeEach((to, from) => {\n *   if (from === START_LOCATION) {\n *     // initial navigation\n *   }\n * })\n * ```\n */\nconst START_LOCATION_NORMALIZED = {\n    path: '/',\n    // TODO: could we use a symbol in the future?\n    name: undefined,\n    params: {},\n    query: {},\n    hash: '',\n    fullPath: '/',\n    matched: [],\n    meta: {},\n    redirectedFrom: undefined,\n};\n\nvar NavigationType;\n(function (NavigationType) {\n    NavigationType[\"pop\"] = \"pop\";\n    NavigationType[\"push\"] = \"push\";\n})(NavigationType || (NavigationType = {}));\nvar NavigationDirection;\n(function (NavigationDirection) {\n    NavigationDirection[\"back\"] = \"back\";\n    NavigationDirection[\"forward\"] = \"forward\";\n    NavigationDirection[\"unknown\"] = \"\";\n})(NavigationDirection || (NavigationDirection = {}));\n/**\n * Starting location for Histories\n */\nconst START = '';\n// Generic utils\n/**\n * Normalizes a base by removing any trailing slash and reading the base tag if\n * present.\n *\n * @param base - base to normalize\n */\nfunction normalizeBase(base) {\n    if (!base) {\n        if (isBrowser) {\n            // respect <base> tag\n            const baseEl = document.querySelector('base');\n            base = (baseEl && baseEl.getAttribute('href')) || '/';\n            // strip full URL origin\n            base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\n        }\n        else {\n            base = '/';\n        }\n    }\n    // ensure leading slash when it was removed by the regex above avoid leading\n    // slash with hash because the file could be read from the disk like file://\n    // and the leading slash would cause problems\n    if (base[0] !== '/' && base[0] !== '#')\n        base = '/' + base;\n    // remove the trailing slash so all other method can just do `base + fullPath`\n    // to build an href\n    return removeTrailingSlash(base);\n}\n// remove any character before the hash\nconst BEFORE_HASH_RE = /^[^#]+#/;\nfunction createHref(base, location) {\n    return base.replace(BEFORE_HASH_RE, '#') + location;\n}\n\nfunction getElementPosition(el, offset) {\n    const docRect = document.documentElement.getBoundingClientRect();\n    const elRect = el.getBoundingClientRect();\n    return {\n        behavior: offset.behavior,\n        left: elRect.left - docRect.left - (offset.left || 0),\n        top: elRect.top - docRect.top - (offset.top || 0),\n    };\n}\nconst computeScrollPosition = () => ({\n    left: window.scrollX,\n    top: window.scrollY,\n});\nfunction scrollToPosition(position) {\n    let scrollToOptions;\n    if ('el' in position) {\n        const positionEl = position.el;\n        const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\n        /**\n         * `id`s can accept pretty much any characters, including CSS combinators\n         * like `>` or `~`. It's still possible to retrieve elements using\n         * `document.getElementById('~')` but it needs to be escaped when using\n         * `document.querySelector('#\\\\~')` for it to be valid. The only\n         * requirements for `id`s are them to be unique on the page and to not be\n         * empty (`id=\"\"`). Because of that, when passing an id selector, it should\n         * be properly escaped for it to work with `querySelector`. We could check\n         * for the id selector to be simple (no CSS combinators `+ >~`) but that\n         * would make things inconsistent since they are valid characters for an\n         * `id` but would need to be escaped when using `querySelector`, breaking\n         * their usage and ending up in no selector returned. Selectors need to be\n         * escaped:\n         *\n         * - `#1-thing` becomes `#\\31 -thing`\n         * - `#with~symbols` becomes `#with\\\\~symbols`\n         *\n         * - More information about  the topic can be found at\n         *   https://mathiasbynens.be/notes/html5-id-class.\n         * - Practical example: https://mathiasbynens.be/demo/html5-id\n         */\n        if ((process.env.NODE_ENV !== 'production') && typeof position.el === 'string') {\n            if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\n                try {\n                    const foundEl = document.querySelector(position.el);\n                    if (isIdSelector && foundEl) {\n                        warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`);\n                        // return to avoid other warnings\n                        return;\n                    }\n                }\n                catch (err) {\n                    warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`);\n                    // return to avoid other warnings\n                    return;\n                }\n            }\n        }\n        const el = typeof positionEl === 'string'\n            ? isIdSelector\n                ? document.getElementById(positionEl.slice(1))\n                : document.querySelector(positionEl)\n            : positionEl;\n        if (!el) {\n            (process.env.NODE_ENV !== 'production') &&\n                warn(`Couldn't find element using selector \"${position.el}\" returned by scrollBehavior.`);\n            return;\n        }\n        scrollToOptions = getElementPosition(el, position);\n    }\n    else {\n        scrollToOptions = position;\n    }\n    if ('scrollBehavior' in document.documentElement.style)\n        window.scrollTo(scrollToOptions);\n    else {\n        window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.scrollX, scrollToOptions.top != null ? scrollToOptions.top : window.scrollY);\n    }\n}\nfunction getScrollKey(path, delta) {\n    const position = history.state ? history.state.position - delta : -1;\n    return position + path;\n}\nconst scrollPositions = new Map();\nfunction saveScrollPosition(key, scrollPosition) {\n    scrollPositions.set(key, scrollPosition);\n}\nfunction getSavedScrollPosition(key) {\n    const scroll = scrollPositions.get(key);\n    // consume it so it's not used again\n    scrollPositions.delete(key);\n    return scroll;\n}\n// TODO: RFC about how to save scroll position\n/**\n * ScrollBehavior instance used by the router to compute and restore the scroll\n * position when navigating.\n */\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\n//   // returns a scroll position that can be saved in history\n//   compute(): ScrollPositionEntry\n//   // can take an extended ScrollPositionEntry\n//   scroll(position: ScrollPosition): void\n// }\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\n//   compute: computeScroll,\n//   scroll: scrollToPosition,\n// }\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\n/**\n * Creates a normalized history location from a window.location object\n * @param base - The base path\n * @param location - The window.location object\n */\nfunction createCurrentLocation(base, location) {\n    const { pathname, search, hash } = location;\n    // allows hash bases like #, /#, #/, #!, #!/, /#!/, or even /folder#end\n    const hashPos = base.indexOf('#');\n    if (hashPos > -1) {\n        let slicePos = hash.includes(base.slice(hashPos))\n            ? base.slice(hashPos).length\n            : 1;\n        let pathFromHash = hash.slice(slicePos);\n        // prepend the starting slash to hash so the url starts with /#\n        if (pathFromHash[0] !== '/')\n            pathFromHash = '/' + pathFromHash;\n        return stripBase(pathFromHash, '');\n    }\n    const path = stripBase(pathname, base);\n    return path + search + hash;\n}\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\n    let listeners = [];\n    let teardowns = [];\n    // TODO: should it be a stack? a Dict. Check if the popstate listener\n    // can trigger twice\n    let pauseState = null;\n    const popStateHandler = ({ state, }) => {\n        const to = createCurrentLocation(base, location);\n        const from = currentLocation.value;\n        const fromState = historyState.value;\n        let delta = 0;\n        if (state) {\n            currentLocation.value = to;\n            historyState.value = state;\n            // ignore the popstate and reset the pauseState\n            if (pauseState && pauseState === from) {\n                pauseState = null;\n                return;\n            }\n            delta = fromState ? state.position - fromState.position : 0;\n        }\n        else {\n            replace(to);\n        }\n        // Here we could also revert the navigation by calling history.go(-delta)\n        // this listener will have to be adapted to not trigger again and to wait for the url\n        // to be updated before triggering the listeners. Some kind of validation function would also\n        // need to be passed to the listeners so the navigation can be accepted\n        // call all listeners\n        listeners.forEach(listener => {\n            listener(currentLocation.value, from, {\n                delta,\n                type: NavigationType.pop,\n                direction: delta\n                    ? delta > 0\n                        ? NavigationDirection.forward\n                        : NavigationDirection.back\n                    : NavigationDirection.unknown,\n            });\n        });\n    };\n    function pauseListeners() {\n        pauseState = currentLocation.value;\n    }\n    function listen(callback) {\n        // set up the listener and prepare teardown callbacks\n        listeners.push(callback);\n        const teardown = () => {\n            const index = listeners.indexOf(callback);\n            if (index > -1)\n                listeners.splice(index, 1);\n        };\n        teardowns.push(teardown);\n        return teardown;\n    }\n    function beforeUnloadListener() {\n        const { history } = window;\n        if (!history.state)\n            return;\n        history.replaceState(assign({}, history.state, { scroll: computeScrollPosition() }), '');\n    }\n    function destroy() {\n        for (const teardown of teardowns)\n            teardown();\n        teardowns = [];\n        window.removeEventListener('popstate', popStateHandler);\n        window.removeEventListener('beforeunload', beforeUnloadListener);\n    }\n    // set up the listeners and prepare teardown callbacks\n    window.addEventListener('popstate', popStateHandler);\n    // TODO: could we use 'pagehide' or 'visibilitychange' instead?\n    // https://developer.chrome.com/blog/page-lifecycle-api/\n    window.addEventListener('beforeunload', beforeUnloadListener, {\n        passive: true,\n    });\n    return {\n        pauseListeners,\n        listen,\n        destroy,\n    };\n}\n/**\n * Creates a state object\n */\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\n    return {\n        back,\n        current,\n        forward,\n        replaced,\n        position: window.history.length,\n        scroll: computeScroll ? computeScrollPosition() : null,\n    };\n}\nfunction useHistoryStateNavigation(base) {\n    const { history, location } = window;\n    // private variables\n    const currentLocation = {\n        value: createCurrentLocation(base, location),\n    };\n    const historyState = { value: history.state };\n    // build current history entry as this is a fresh navigation\n    if (!historyState.value) {\n        changeLocation(currentLocation.value, {\n            back: null,\n            current: currentLocation.value,\n            forward: null,\n            // the length is off by one, we need to decrease it\n            position: history.length - 1,\n            replaced: true,\n            // don't add a scroll as the user may have an anchor, and we want\n            // scrollBehavior to be triggered without a saved position\n            scroll: null,\n        }, true);\n    }\n    function changeLocation(to, state, replace) {\n        /**\n         * if a base tag is provided, and we are on a normal domain, we have to\n         * respect the provided `base` attribute because pushState() will use it and\n         * potentially erase anything before the `#` like at\n         * https://github.com/vuejs/router/issues/685 where a base of\n         * `/folder/#` but a base of `/` would erase the `/folder/` section. If\n         * there is no host, the `<base>` tag makes no sense and if there isn't a\n         * base tag we can just use everything after the `#`.\n         */\n        const hashIndex = base.indexOf('#');\n        const url = hashIndex > -1\n            ? (location.host && document.querySelector('base')\n                ? base\n                : base.slice(hashIndex)) + to\n            : createBaseLocation() + base + to;\n        try {\n            // BROWSER QUIRK\n            // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\n            history[replace ? 'replaceState' : 'pushState'](state, '', url);\n            historyState.value = state;\n        }\n        catch (err) {\n            if ((process.env.NODE_ENV !== 'production')) {\n                warn('Error with push/replace State', err);\n            }\n            else {\n                console.error(err);\n            }\n            // Force the navigation, this also resets the call count\n            location[replace ? 'replace' : 'assign'](url);\n        }\n    }\n    function replace(to, data) {\n        const state = assign({}, history.state, buildState(historyState.value.back, \n        // keep back and forward entries but override current position\n        to, historyState.value.forward, true), data, { position: historyState.value.position });\n        changeLocation(to, state, true);\n        currentLocation.value = to;\n    }\n    function push(to, data) {\n        // Add to current entry the information of where we are going\n        // as well as saving the current position\n        const currentState = assign({}, \n        // use current history state to gracefully handle a wrong call to\n        // history.replaceState\n        // https://github.com/vuejs/router/issues/366\n        historyState.value, history.state, {\n            forward: to,\n            scroll: computeScrollPosition(),\n        });\n        if ((process.env.NODE_ENV !== 'production') && !history.state) {\n            warn(`history.state seems to have been manually replaced without preserving the necessary values. Make sure to preserve existing history state if you are manually calling history.replaceState:\\n\\n` +\n                `history.replaceState(history.state, '', url)\\n\\n` +\n                `You can find more information at https://router.vuejs.org/guide/migration/#Usage-of-history-state`);\n        }\n        changeLocation(currentState.current, currentState, true);\n        const state = assign({}, buildState(currentLocation.value, to, null), { position: currentState.position + 1 }, data);\n        changeLocation(to, state, false);\n        currentLocation.value = to;\n    }\n    return {\n        location: currentLocation,\n        state: historyState,\n        push,\n        replace,\n    };\n}\n/**\n * Creates an HTML5 history. Most common history for single page applications.\n *\n * @param base -\n */\nfunction createWebHistory(base) {\n    base = normalizeBase(base);\n    const historyNavigation = useHistoryStateNavigation(base);\n    const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\n    function go(delta, triggerListeners = true) {\n        if (!triggerListeners)\n            historyListeners.pauseListeners();\n        history.go(delta);\n    }\n    const routerHistory = assign({\n        // it's overridden right after\n        location: '',\n        base,\n        go,\n        createHref: createHref.bind(null, base),\n    }, historyNavigation, historyListeners);\n    Object.defineProperty(routerHistory, 'location', {\n        enumerable: true,\n        get: () => historyNavigation.location.value,\n    });\n    Object.defineProperty(routerHistory, 'state', {\n        enumerable: true,\n        get: () => historyNavigation.state.value,\n    });\n    return routerHistory;\n}\n\n/**\n * Creates an in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\n * It's up to the user to replace that location with the starter location by either calling `router.push` or `router.replace`.\n *\n * @param base - Base applied to all urls, defaults to '/'\n * @returns a history object that can be passed to the router constructor\n */\nfunction createMemoryHistory(base = '') {\n    let listeners = [];\n    let queue = [START];\n    let position = 0;\n    base = normalizeBase(base);\n    function setLocation(location) {\n        position++;\n        if (position !== queue.length) {\n            // we are in the middle, we remove everything from here in the queue\n            queue.splice(position);\n        }\n        queue.push(location);\n    }\n    function triggerListeners(to, from, { direction, delta }) {\n        const info = {\n            direction,\n            delta,\n            type: NavigationType.pop,\n        };\n        for (const callback of listeners) {\n            callback(to, from, info);\n        }\n    }\n    const routerHistory = {\n        // rewritten by Object.defineProperty\n        location: START,\n        // TODO: should be kept in queue\n        state: {},\n        base,\n        createHref: createHref.bind(null, base),\n        replace(to) {\n            // remove current entry and decrement position\n            queue.splice(position--, 1);\n            setLocation(to);\n        },\n        push(to, data) {\n            setLocation(to);\n        },\n        listen(callback) {\n            listeners.push(callback);\n            return () => {\n                const index = listeners.indexOf(callback);\n                if (index > -1)\n                    listeners.splice(index, 1);\n            };\n        },\n        destroy() {\n            listeners = [];\n            queue = [START];\n            position = 0;\n        },\n        go(delta, shouldTrigger = true) {\n            const from = this.location;\n            const direction = \n            // we are considering delta === 0 going forward, but in abstract mode\n            // using 0 for the delta doesn't make sense like it does in html5 where\n            // it reloads the page\n            delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\n            position = Math.max(0, Math.min(position + delta, queue.length - 1));\n            if (shouldTrigger) {\n                triggerListeners(this.location, from, {\n                    direction,\n                    delta,\n                });\n            }\n        },\n    };\n    Object.defineProperty(routerHistory, 'location', {\n        enumerable: true,\n        get: () => queue[position],\n    });\n    return routerHistory;\n}\n\n/**\n * Creates a hash history. Useful for web applications with no host (e.g. `file://`) or when configuring a server to\n * handle any URL is not possible.\n *\n * @param base - optional base to provide. Defaults to `location.pathname + location.search` If there is a `<base>` tag\n * in the `head`, its value will be ignored in favor of this parameter **but note it affects all the history.pushState()\n * calls**, meaning that if you use a `<base>` tag, it's `href` value **has to match this parameter** (ignoring anything\n * after the `#`).\n *\n * @example\n * ```js\n * // at https://example.com/folder\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\n * // you should avoid doing this because it changes the original url and breaks copying urls\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\n *\n * // at file:///usr/etc/folder/index.html\n * // for locations with no `host`, the base is ignored\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\n * ```\n */\nfunction createWebHashHistory(base) {\n    // Make sure this implementation is fine in terms of encoding, specially for IE11\n    // for `file://`, directly use the pathname and ignore the base\n    // location.pathname contains an initial `/` even at the root: `https://example.com`\n    base = location.host ? base || location.pathname + location.search : '';\n    // allow the user to provide a `#` in the middle: `/base/#/app`\n    if (!base.includes('#'))\n        base += '#';\n    if ((process.env.NODE_ENV !== 'production') && !base.endsWith('#/') && !base.endsWith('#')) {\n        warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\n    }\n    return createWebHistory(base);\n}\n\nfunction isRouteLocation(route) {\n    return typeof route === 'string' || (route && typeof route === 'object');\n}\nfunction isRouteName(name) {\n    return typeof name === 'string' || typeof name === 'symbol';\n}\n\nconst NavigationFailureSymbol = Symbol((process.env.NODE_ENV !== 'production') ? 'navigation failure' : '');\n/**\n * Enumeration with all possible types for navigation failures. Can be passed to\n * {@link isNavigationFailure} to check for specific failures.\n */\nvar NavigationFailureType;\n(function (NavigationFailureType) {\n    /**\n     * An aborted navigation is a navigation that failed because a navigation\n     * guard returned `false` or called `next(false)`\n     */\n    NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\n    /**\n     * A cancelled navigation is a navigation that failed because a more recent\n     * navigation finished started (not necessarily finished).\n     */\n    NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\n    /**\n     * A duplicated navigation is a navigation that failed because it was\n     * initiated while already being at the exact same location.\n     */\n    NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\n})(NavigationFailureType || (NavigationFailureType = {}));\n// DEV only debug messages\nconst ErrorTypeMessages = {\n    [1 /* ErrorTypes.MATCHER_NOT_FOUND */]({ location, currentLocation }) {\n        return `No match for\\n ${JSON.stringify(location)}${currentLocation\n            ? '\\nwhile being at\\n' + JSON.stringify(currentLocation)\n            : ''}`;\n    },\n    [2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */]({ from, to, }) {\n        return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\n    },\n    [4 /* ErrorTypes.NAVIGATION_ABORTED */]({ from, to }) {\n        return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\n    },\n    [8 /* ErrorTypes.NAVIGATION_CANCELLED */]({ from, to }) {\n        return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\n    },\n    [16 /* ErrorTypes.NAVIGATION_DUPLICATED */]({ from, to }) {\n        return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\n    },\n};\n/**\n * Creates a typed NavigationFailure object.\n * @internal\n * @param type - NavigationFailureType\n * @param params - { from, to }\n */\nfunction createRouterError(type, params) {\n    // keep full error messages in cjs versions\n    if ((process.env.NODE_ENV !== 'production') || !true) {\n        return assign(new Error(ErrorTypeMessages[type](params)), {\n            type,\n            [NavigationFailureSymbol]: true,\n        }, params);\n    }\n    else {\n        return assign(new Error(), {\n            type,\n            [NavigationFailureSymbol]: true,\n        }, params);\n    }\n}\nfunction isNavigationFailure(error, type) {\n    return (error instanceof Error &&\n        NavigationFailureSymbol in error &&\n        (type == null || !!(error.type & type)));\n}\nconst propertiesToLog = ['params', 'query', 'hash'];\nfunction stringifyRoute(to) {\n    if (typeof to === 'string')\n        return to;\n    if (to.path != null)\n        return to.path;\n    const location = {};\n    for (const key of propertiesToLog) {\n        if (key in to)\n            location[key] = to[key];\n    }\n    return JSON.stringify(location, null, 2);\n}\n\n// default pattern for a param: non-greedy everything but /\nconst BASE_PARAM_PATTERN = '[^/]+?';\nconst BASE_PATH_PARSER_OPTIONS = {\n    sensitive: false,\n    strict: false,\n    start: true,\n    end: true,\n};\n// Special Regex characters that must be escaped in static tokens\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\n/**\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\n *\n * @param segments - array of segments returned by tokenizePath\n * @param extraOptions - optional options for the regexp\n * @returns a PathParser\n */\nfunction tokensToParser(segments, extraOptions) {\n    const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions);\n    // the amount of scores is the same as the length of segments except for the root segment \"/\"\n    const score = [];\n    // the regexp as a string\n    let pattern = options.start ? '^' : '';\n    // extracted keys\n    const keys = [];\n    for (const segment of segments) {\n        // the root segment needs special treatment\n        const segmentScores = segment.length ? [] : [90 /* PathScore.Root */];\n        // allow trailing slash\n        if (options.strict && !segment.length)\n            pattern += '/';\n        for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\n            const token = segment[tokenIndex];\n            // resets the score if we are inside a sub-segment /:a-other-:b\n            let subSegmentScore = 40 /* PathScore.Segment */ +\n                (options.sensitive ? 0.25 /* PathScore.BonusCaseSensitive */ : 0);\n            if (token.type === 0 /* TokenType.Static */) {\n                // prepend the slash if we are starting a new segment\n                if (!tokenIndex)\n                    pattern += '/';\n                pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\n                subSegmentScore += 40 /* PathScore.Static */;\n            }\n            else if (token.type === 1 /* TokenType.Param */) {\n                const { value, repeatable, optional, regexp } = token;\n                keys.push({\n                    name: value,\n                    repeatable,\n                    optional,\n                });\n                const re = regexp ? regexp : BASE_PARAM_PATTERN;\n                // the user provided a custom regexp /:id(\\\\d+)\n                if (re !== BASE_PARAM_PATTERN) {\n                    subSegmentScore += 10 /* PathScore.BonusCustomRegExp */;\n                    // make sure the regexp is valid before using it\n                    try {\n                        new RegExp(`(${re})`);\n                    }\n                    catch (err) {\n                        throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` +\n                            err.message);\n                    }\n                }\n                // when we repeat we must take care of the repeating leading slash\n                let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`;\n                // prepend the slash if we are starting a new segment\n                if (!tokenIndex)\n                    subPattern =\n                        // avoid an optional / if there are more segments e.g. /:p?-static\n                        // or /:p?-:p2\n                        optional && segment.length < 2\n                            ? `(?:/${subPattern})`\n                            : '/' + subPattern;\n                if (optional)\n                    subPattern += '?';\n                pattern += subPattern;\n                subSegmentScore += 20 /* PathScore.Dynamic */;\n                if (optional)\n                    subSegmentScore += -8 /* PathScore.BonusOptional */;\n                if (repeatable)\n                    subSegmentScore += -20 /* PathScore.BonusRepeatable */;\n                if (re === '.*')\n                    subSegmentScore += -50 /* PathScore.BonusWildcard */;\n            }\n            segmentScores.push(subSegmentScore);\n        }\n        // an empty array like /home/ -> [[{home}], []]\n        // if (!segment.length) pattern += '/'\n        score.push(segmentScores);\n    }\n    // only apply the strict bonus to the last score\n    if (options.strict && options.end) {\n        const i = score.length - 1;\n        score[i][score[i].length - 1] += 0.7000000000000001 /* PathScore.BonusStrict */;\n    }\n    // TODO: dev only warn double trailing slash\n    if (!options.strict)\n        pattern += '/?';\n    if (options.end)\n        pattern += '$';\n    // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\n    else if (options.strict && !pattern.endsWith('/'))\n        pattern += '(?:/|$)';\n    const re = new RegExp(pattern, options.sensitive ? '' : 'i');\n    function parse(path) {\n        const match = path.match(re);\n        const params = {};\n        if (!match)\n            return null;\n        for (let i = 1; i < match.length; i++) {\n            const value = match[i] || '';\n            const key = keys[i - 1];\n            params[key.name] = value && key.repeatable ? value.split('/') : value;\n        }\n        return params;\n    }\n    function stringify(params) {\n        let path = '';\n        // for optional parameters to allow to be empty\n        let avoidDuplicatedSlash = false;\n        for (const segment of segments) {\n            if (!avoidDuplicatedSlash || !path.endsWith('/'))\n                path += '/';\n            avoidDuplicatedSlash = false;\n            for (const token of segment) {\n                if (token.type === 0 /* TokenType.Static */) {\n                    path += token.value;\n                }\n                else if (token.type === 1 /* TokenType.Param */) {\n                    const { value, repeatable, optional } = token;\n                    const param = value in params ? params[value] : '';\n                    if (isArray(param) && !repeatable) {\n                        throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\n                    }\n                    const text = isArray(param)\n                        ? param.join('/')\n                        : param;\n                    if (!text) {\n                        if (optional) {\n                            // if we have more than one optional param like /:a?-static we don't need to care about the optional param\n                            if (segment.length < 2) {\n                                // remove the last slash as we could be at the end\n                                if (path.endsWith('/'))\n                                    path = path.slice(0, -1);\n                                // do not append a slash on the next iteration\n                                else\n                                    avoidDuplicatedSlash = true;\n                            }\n                        }\n                        else\n                            throw new Error(`Missing required param \"${value}\"`);\n                    }\n                    path += text;\n                }\n            }\n        }\n        // avoid empty path when we have multiple optional params\n        return path || '/';\n    }\n    return {\n        re,\n        score,\n        keys,\n        parse,\n        stringify,\n    };\n}\n/**\n * Compares an array of numbers as used in PathParser.score and returns a\n * number. This function can be used to `sort` an array\n *\n * @param a - first array of numbers\n * @param b - second array of numbers\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\n * should be sorted first\n */\nfunction compareScoreArray(a, b) {\n    let i = 0;\n    while (i < a.length && i < b.length) {\n        const diff = b[i] - a[i];\n        // only keep going if diff === 0\n        if (diff)\n            return diff;\n        i++;\n    }\n    // if the last subsegment was Static, the shorter segments should be sorted first\n    // otherwise sort the longest segment first\n    if (a.length < b.length) {\n        return a.length === 1 && a[0] === 40 /* PathScore.Static */ + 40 /* PathScore.Segment */\n            ? -1\n            : 1;\n    }\n    else if (a.length > b.length) {\n        return b.length === 1 && b[0] === 40 /* PathScore.Static */ + 40 /* PathScore.Segment */\n            ? 1\n            : -1;\n    }\n    return 0;\n}\n/**\n * Compare function that can be used with `sort` to sort an array of PathParser\n *\n * @param a - first PathParser\n * @param b - second PathParser\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\n */\nfunction comparePathParserScore(a, b) {\n    let i = 0;\n    const aScore = a.score;\n    const bScore = b.score;\n    while (i < aScore.length && i < bScore.length) {\n        const comp = compareScoreArray(aScore[i], bScore[i]);\n        // do not return if both are equal\n        if (comp)\n            return comp;\n        i++;\n    }\n    if (Math.abs(bScore.length - aScore.length) === 1) {\n        if (isLastScoreNegative(aScore))\n            return 1;\n        if (isLastScoreNegative(bScore))\n            return -1;\n    }\n    // if a and b share the same score entries but b has more, sort b first\n    return bScore.length - aScore.length;\n    // this is the ternary version\n    // return aScore.length < bScore.length\n    //   ? 1\n    //   : aScore.length > bScore.length\n    //   ? -1\n    //   : 0\n}\n/**\n * This allows detecting splats at the end of a path: /home/:id(.*)*\n *\n * @param score - score to check\n * @returns true if the last entry is negative\n */\nfunction isLastScoreNegative(score) {\n    const last = score[score.length - 1];\n    return score.length > 0 && last[last.length - 1] < 0;\n}\n\nconst ROOT_TOKEN = {\n    type: 0 /* TokenType.Static */,\n    value: '',\n};\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/;\n// After some profiling, the cache seems to be unnecessary because tokenizePath\n// (the slowest part of adding a route) is very fast\n// const tokenCache = new Map<string, Token[][]>()\nfunction tokenizePath(path) {\n    if (!path)\n        return [[]];\n    if (path === '/')\n        return [[ROOT_TOKEN]];\n    if (!path.startsWith('/')) {\n        throw new Error((process.env.NODE_ENV !== 'production')\n            ? `Route paths should start with a \"/\": \"${path}\" should be \"/${path}\".`\n            : `Invalid path \"${path}\"`);\n    }\n    // if (tokenCache.has(path)) return tokenCache.get(path)!\n    function crash(message) {\n        throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\n    }\n    let state = 0 /* TokenizerState.Static */;\n    let previousState = state;\n    const tokens = [];\n    // the segment will always be valid because we get into the initial state\n    // with the leading /\n    let segment;\n    function finalizeSegment() {\n        if (segment)\n            tokens.push(segment);\n        segment = [];\n    }\n    // index on the path\n    let i = 0;\n    // char at index\n    let char;\n    // buffer of the value read\n    let buffer = '';\n    // custom regexp for a param\n    let customRe = '';\n    function consumeBuffer() {\n        if (!buffer)\n            return;\n        if (state === 0 /* TokenizerState.Static */) {\n            segment.push({\n                type: 0 /* TokenType.Static */,\n                value: buffer,\n            });\n        }\n        else if (state === 1 /* TokenizerState.Param */ ||\n            state === 2 /* TokenizerState.ParamRegExp */ ||\n            state === 3 /* TokenizerState.ParamRegExpEnd */) {\n            if (segment.length > 1 && (char === '*' || char === '+'))\n                crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\n            segment.push({\n                type: 1 /* TokenType.Param */,\n                value: buffer,\n                regexp: customRe,\n                repeatable: char === '*' || char === '+',\n                optional: char === '*' || char === '?',\n            });\n        }\n        else {\n            crash('Invalid state to consume buffer');\n        }\n        buffer = '';\n    }\n    function addCharToBuffer() {\n        buffer += char;\n    }\n    while (i < path.length) {\n        char = path[i++];\n        if (char === '\\\\' && state !== 2 /* TokenizerState.ParamRegExp */) {\n            previousState = state;\n            state = 4 /* TokenizerState.EscapeNext */;\n            continue;\n        }\n        switch (state) {\n            case 0 /* TokenizerState.Static */:\n                if (char === '/') {\n                    if (buffer) {\n                        consumeBuffer();\n                    }\n                    finalizeSegment();\n                }\n                else if (char === ':') {\n                    consumeBuffer();\n                    state = 1 /* TokenizerState.Param */;\n                }\n                else {\n                    addCharToBuffer();\n                }\n                break;\n            case 4 /* TokenizerState.EscapeNext */:\n                addCharToBuffer();\n                state = previousState;\n                break;\n            case 1 /* TokenizerState.Param */:\n                if (char === '(') {\n                    state = 2 /* TokenizerState.ParamRegExp */;\n                }\n                else if (VALID_PARAM_RE.test(char)) {\n                    addCharToBuffer();\n                }\n                else {\n                    consumeBuffer();\n                    state = 0 /* TokenizerState.Static */;\n                    // go back one character if we were not modifying\n                    if (char !== '*' && char !== '?' && char !== '+')\n                        i--;\n                }\n                break;\n            case 2 /* TokenizerState.ParamRegExp */:\n                // TODO: is it worth handling nested regexp? like :p(?:prefix_([^/]+)_suffix)\n                // it already works by escaping the closing )\n                // https://paths.esm.dev/?p=AAMeJbiAwQEcDKbAoAAkP60PG2R6QAvgNaA6AFACM2ABuQBB#\n                // is this really something people need since you can also write\n                // /prefix_:p()_suffix\n                if (char === ')') {\n                    // handle the escaped )\n                    if (customRe[customRe.length - 1] == '\\\\')\n                        customRe = customRe.slice(0, -1) + char;\n                    else\n                        state = 3 /* TokenizerState.ParamRegExpEnd */;\n                }\n                else {\n                    customRe += char;\n                }\n                break;\n            case 3 /* TokenizerState.ParamRegExpEnd */:\n                // same as finalizing a param\n                consumeBuffer();\n                state = 0 /* TokenizerState.Static */;\n                // go back one character if we were not modifying\n                if (char !== '*' && char !== '?' && char !== '+')\n                    i--;\n                customRe = '';\n                break;\n            default:\n                crash('Unknown state');\n                break;\n        }\n    }\n    if (state === 2 /* TokenizerState.ParamRegExp */)\n        crash(`Unfinished custom RegExp for param \"${buffer}\"`);\n    consumeBuffer();\n    finalizeSegment();\n    // tokenCache.set(path, tokens)\n    return tokens;\n}\n\nfunction createRouteRecordMatcher(record, parent, options) {\n    const parser = tokensToParser(tokenizePath(record.path), options);\n    // warn against params with the same name\n    if ((process.env.NODE_ENV !== 'production')) {\n        const existingKeys = new Set();\n        for (const key of parser.keys) {\n            if (existingKeys.has(key.name))\n                warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\n            existingKeys.add(key.name);\n        }\n    }\n    const matcher = assign(parser, {\n        record,\n        parent,\n        // these needs to be populated by the parent\n        children: [],\n        alias: [],\n    });\n    if (parent) {\n        // both are aliases or both are not aliases\n        // we don't want to mix them because the order is used when\n        // passing originalRecord in Matcher.addRoute\n        if (!matcher.record.aliasOf === !parent.record.aliasOf)\n            parent.children.push(matcher);\n    }\n    return matcher;\n}\n\n/**\n * Creates a Router Matcher.\n *\n * @internal\n * @param routes - array of initial routes\n * @param globalOptions - global route options\n */\nfunction createRouterMatcher(routes, globalOptions) {\n    // normalized ordered array of matchers\n    const matchers = [];\n    const matcherMap = new Map();\n    globalOptions = mergeOptions({ strict: false, end: true, sensitive: false }, globalOptions);\n    function getRecordMatcher(name) {\n        return matcherMap.get(name);\n    }\n    function addRoute(record, parent, originalRecord) {\n        // used later on to remove by name\n        const isRootAdd = !originalRecord;\n        const mainNormalizedRecord = normalizeRouteRecord(record);\n        if ((process.env.NODE_ENV !== 'production')) {\n            checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent);\n        }\n        // we might be the child of an alias\n        mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\n        const options = mergeOptions(globalOptions, record);\n        // generate an array of records to correctly handle aliases\n        const normalizedRecords = [mainNormalizedRecord];\n        if ('alias' in record) {\n            const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\n            for (const alias of aliases) {\n                normalizedRecords.push(\n                // we need to normalize again to ensure the `mods` property\n                // being non enumerable\n                normalizeRouteRecord(assign({}, mainNormalizedRecord, {\n                    // this allows us to hold a copy of the `components` option\n                    // so that async components cache is hold on the original record\n                    components: originalRecord\n                        ? originalRecord.record.components\n                        : mainNormalizedRecord.components,\n                    path: alias,\n                    // we might be the child of an alias\n                    aliasOf: originalRecord\n                        ? originalRecord.record\n                        : mainNormalizedRecord,\n                    // the aliases are always of the same kind as the original since they\n                    // are defined on the same record\n                })));\n            }\n        }\n        let matcher;\n        let originalMatcher;\n        for (const normalizedRecord of normalizedRecords) {\n            const { path } = normalizedRecord;\n            // Build up the path for nested routes if the child isn't an absolute\n            // route. Only add the / delimiter if the child path isn't empty and if the\n            // parent path doesn't have a trailing slash\n            if (parent && path[0] !== '/') {\n                const parentPath = parent.record.path;\n                const connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\n                normalizedRecord.path =\n                    parent.record.path + (path && connectingSlash + path);\n            }\n            if ((process.env.NODE_ENV !== 'production') && normalizedRecord.path === '*') {\n                throw new Error('Catch all routes (\"*\") must now be defined using a param with a custom regexp.\\n' +\n                    'See more at https://router.vuejs.org/guide/migration/#Removed-star-or-catch-all-routes.');\n            }\n            // create the object beforehand, so it can be passed to children\n            matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\n            if ((process.env.NODE_ENV !== 'production') && parent && path[0] === '/')\n                checkMissingParamsInAbsolutePath(matcher, parent);\n            // if we are an alias we must tell the original record that we exist,\n            // so we can be removed\n            if (originalRecord) {\n                originalRecord.alias.push(matcher);\n                if ((process.env.NODE_ENV !== 'production')) {\n                    checkSameParams(originalRecord, matcher);\n                }\n            }\n            else {\n                // otherwise, the first record is the original and others are aliases\n                originalMatcher = originalMatcher || matcher;\n                if (originalMatcher !== matcher)\n                    originalMatcher.alias.push(matcher);\n                // remove the route if named and only for the top record (avoid in nested calls)\n                // this works because the original record is the first one\n                if (isRootAdd && record.name && !isAliasRecord(matcher)) {\n                    if ((process.env.NODE_ENV !== 'production')) {\n                        checkSameNameAsAncestor(record, parent);\n                    }\n                    removeRoute(record.name);\n                }\n            }\n            // Avoid adding a record that doesn't display anything. This allows passing through records without a component to\n            // not be reached and pass through the catch all route\n            if (isMatchable(matcher)) {\n                insertMatcher(matcher);\n            }\n            if (mainNormalizedRecord.children) {\n                const children = mainNormalizedRecord.children;\n                for (let i = 0; i < children.length; i++) {\n                    addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\n                }\n            }\n            // if there was no original record, then the first one was not an alias and all\n            // other aliases (if any) need to reference this record when adding children\n            originalRecord = originalRecord || matcher;\n            // TODO: add normalized records for more flexibility\n            // if (parent && isAliasRecord(originalRecord)) {\n            //   parent.children.push(originalRecord)\n            // }\n        }\n        return originalMatcher\n            ? () => {\n                // since other matchers are aliases, they should be removed by the original matcher\n                removeRoute(originalMatcher);\n            }\n            : noop;\n    }\n    function removeRoute(matcherRef) {\n        if (isRouteName(matcherRef)) {\n            const matcher = matcherMap.get(matcherRef);\n            if (matcher) {\n                matcherMap.delete(matcherRef);\n                matchers.splice(matchers.indexOf(matcher), 1);\n                matcher.children.forEach(removeRoute);\n                matcher.alias.forEach(removeRoute);\n            }\n        }\n        else {\n            const index = matchers.indexOf(matcherRef);\n            if (index > -1) {\n                matchers.splice(index, 1);\n                if (matcherRef.record.name)\n                    matcherMap.delete(matcherRef.record.name);\n                matcherRef.children.forEach(removeRoute);\n                matcherRef.alias.forEach(removeRoute);\n            }\n        }\n    }\n    function getRoutes() {\n        return matchers;\n    }\n    function insertMatcher(matcher) {\n        const index = findInsertionIndex(matcher, matchers);\n        matchers.splice(index, 0, matcher);\n        // only add the original record to the name map\n        if (matcher.record.name && !isAliasRecord(matcher))\n            matcherMap.set(matcher.record.name, matcher);\n    }\n    function resolve(location, currentLocation) {\n        let matcher;\n        let params = {};\n        let path;\n        let name;\n        if ('name' in location && location.name) {\n            matcher = matcherMap.get(location.name);\n            if (!matcher)\n                throw createRouterError(1 /* ErrorTypes.MATCHER_NOT_FOUND */, {\n                    location,\n                });\n            // warn if the user is passing invalid params so they can debug it better when they get removed\n            if ((process.env.NODE_ENV !== 'production')) {\n                const invalidParams = Object.keys(location.params || {}).filter(paramName => !matcher.keys.find(k => k.name === paramName));\n                if (invalidParams.length) {\n                    warn(`Discarded invalid param(s) \"${invalidParams.join('\", \"')}\" when navigating. See https://github.com/vuejs/router/blob/main/packages/router/CHANGELOG.md#414-2022-08-22 for more details.`);\n                }\n            }\n            name = matcher.record.name;\n            params = assign(\n            // paramsFromLocation is a new object\n            paramsFromLocation(currentLocation.params, \n            // only keep params that exist in the resolved location\n            // only keep optional params coming from a parent record\n            matcher.keys\n                .filter(k => !k.optional)\n                .concat(matcher.parent ? matcher.parent.keys.filter(k => k.optional) : [])\n                .map(k => k.name)), \n            // discard any existing params in the current location that do not exist here\n            // #1497 this ensures better active/exact matching\n            location.params &&\n                paramsFromLocation(location.params, matcher.keys.map(k => k.name)));\n            // throws if cannot be stringified\n            path = matcher.stringify(params);\n        }\n        else if (location.path != null) {\n            // no need to resolve the path with the matcher as it was provided\n            // this also allows the user to control the encoding\n            path = location.path;\n            if ((process.env.NODE_ENV !== 'production') && !path.startsWith('/')) {\n                warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://github.com/vuejs/router/issues/new/choose.`);\n            }\n            matcher = matchers.find(m => m.re.test(path));\n            // matcher should have a value after the loop\n            if (matcher) {\n                // we know the matcher works because we tested the regexp\n                params = matcher.parse(path);\n                name = matcher.record.name;\n            }\n            // location is a relative path\n        }\n        else {\n            // match by name or path of current route\n            matcher = currentLocation.name\n                ? matcherMap.get(currentLocation.name)\n                : matchers.find(m => m.re.test(currentLocation.path));\n            if (!matcher)\n                throw createRouterError(1 /* ErrorTypes.MATCHER_NOT_FOUND */, {\n                    location,\n                    currentLocation,\n                });\n            name = matcher.record.name;\n            // since we are navigating to the same location, we don't need to pick the\n            // params like when `name` is provided\n            params = assign({}, currentLocation.params, location.params);\n            path = matcher.stringify(params);\n        }\n        const matched = [];\n        let parentMatcher = matcher;\n        while (parentMatcher) {\n            // reversed order so parents are at the beginning\n            matched.unshift(parentMatcher.record);\n            parentMatcher = parentMatcher.parent;\n        }\n        return {\n            name,\n            path,\n            params,\n            matched,\n            meta: mergeMetaFields(matched),\n        };\n    }\n    // add initial routes\n    routes.forEach(route => addRoute(route));\n    function clearRoutes() {\n        matchers.length = 0;\n        matcherMap.clear();\n    }\n    return {\n        addRoute,\n        resolve,\n        removeRoute,\n        clearRoutes,\n        getRoutes,\n        getRecordMatcher,\n    };\n}\nfunction paramsFromLocation(params, keys) {\n    const newParams = {};\n    for (const key of keys) {\n        if (key in params)\n            newParams[key] = params[key];\n    }\n    return newParams;\n}\n/**\n * Normalizes a RouteRecordRaw. Creates a copy\n *\n * @param record\n * @returns the normalized version\n */\nfunction normalizeRouteRecord(record) {\n    const normalized = {\n        path: record.path,\n        redirect: record.redirect,\n        name: record.name,\n        meta: record.meta || {},\n        aliasOf: record.aliasOf,\n        beforeEnter: record.beforeEnter,\n        props: normalizeRecordProps(record),\n        children: record.children || [],\n        instances: {},\n        leaveGuards: new Set(),\n        updateGuards: new Set(),\n        enterCallbacks: {},\n        // must be declared afterwards\n        // mods: {},\n        components: 'components' in record\n            ? record.components || null\n            : record.component && { default: record.component },\n    };\n    // mods contain modules and shouldn't be copied,\n    // logged or anything. It's just used for internal\n    // advanced use cases like data loaders\n    Object.defineProperty(normalized, 'mods', {\n        value: {},\n    });\n    return normalized;\n}\n/**\n * Normalize the optional `props` in a record to always be an object similar to\n * components. Also accept a boolean for components.\n * @param record\n */\nfunction normalizeRecordProps(record) {\n    const propsObject = {};\n    // props does not exist on redirect records, but we can set false directly\n    const props = record.props || false;\n    if ('component' in record) {\n        propsObject.default = props;\n    }\n    else {\n        // NOTE: we could also allow a function to be applied to every component.\n        // Would need user feedback for use cases\n        for (const name in record.components)\n            propsObject[name] = typeof props === 'object' ? props[name] : props;\n    }\n    return propsObject;\n}\n/**\n * Checks if a record or any of its parent is an alias\n * @param record\n */\nfunction isAliasRecord(record) {\n    while (record) {\n        if (record.record.aliasOf)\n            return true;\n        record = record.parent;\n    }\n    return false;\n}\n/**\n * Merge meta fields of an array of records\n *\n * @param matched - array of matched records\n */\nfunction mergeMetaFields(matched) {\n    return matched.reduce((meta, record) => assign(meta, record.meta), {});\n}\nfunction mergeOptions(defaults, partialOptions) {\n    const options = {};\n    for (const key in defaults) {\n        options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\n    }\n    return options;\n}\nfunction isSameParam(a, b) {\n    return (a.name === b.name &&\n        a.optional === b.optional &&\n        a.repeatable === b.repeatable);\n}\n/**\n * Check if a path and its alias have the same required params\n *\n * @param a - original record\n * @param b - alias record\n */\nfunction checkSameParams(a, b) {\n    for (const key of a.keys) {\n        if (!key.optional && !b.keys.find(isSameParam.bind(null, key)))\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" must have the exact same param named \"${key.name}\"`);\n    }\n    for (const key of b.keys) {\n        if (!key.optional && !a.keys.find(isSameParam.bind(null, key)))\n            return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" must have the exact same param named \"${key.name}\"`);\n    }\n}\n/**\n * A route with a name and a child with an empty path without a name should warn when adding the route\n *\n * @param mainNormalizedRecord - RouteRecordNormalized\n * @param parent - RouteRecordMatcher\n */\nfunction checkChildMissingNameWithEmptyPath(mainNormalizedRecord, parent) {\n    if (parent &&\n        parent.record.name &&\n        !mainNormalizedRecord.name &&\n        !mainNormalizedRecord.path) {\n        warn(`The route named \"${String(parent.record.name)}\" has a child without a name and an empty path. Using that name won't render the empty path child so you probably want to move the name to the child instead. If this is intentional, add a name to the child route to remove the warning.`);\n    }\n}\nfunction checkSameNameAsAncestor(record, parent) {\n    for (let ancestor = parent; ancestor; ancestor = ancestor.parent) {\n        if (ancestor.record.name === record.name) {\n            throw new Error(`A route named \"${String(record.name)}\" has been added as a ${parent === ancestor ? 'child' : 'descendant'} of a route with the same name. Route names must be unique and a nested route cannot use the same name as an ancestor.`);\n        }\n    }\n}\nfunction checkMissingParamsInAbsolutePath(record, parent) {\n    for (const key of parent.keys) {\n        if (!record.keys.find(isSameParam.bind(null, key)))\n            return warn(`Absolute path \"${record.record.path}\" must have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\n    }\n}\n/**\n * Performs a binary search to find the correct insertion index for a new matcher.\n *\n * Matchers are primarily sorted by their score. If scores are tied then we also consider parent/child relationships,\n * with descendants coming before ancestors. If there's still a tie, new routes are inserted after existing routes.\n *\n * @param matcher - new matcher to be inserted\n * @param matchers - existing matchers\n */\nfunction findInsertionIndex(matcher, matchers) {\n    // First phase: binary search based on score\n    let lower = 0;\n    let upper = matchers.length;\n    while (lower !== upper) {\n        const mid = (lower + upper) >> 1;\n        const sortOrder = comparePathParserScore(matcher, matchers[mid]);\n        if (sortOrder < 0) {\n            upper = mid;\n        }\n        else {\n            lower = mid + 1;\n        }\n    }\n    // Second phase: check for an ancestor with the same score\n    const insertionAncestor = getInsertionAncestor(matcher);\n    if (insertionAncestor) {\n        upper = matchers.lastIndexOf(insertionAncestor, upper - 1);\n        if ((process.env.NODE_ENV !== 'production') && upper < 0) {\n            // This should never happen\n            warn(`Finding ancestor route \"${insertionAncestor.record.path}\" failed for \"${matcher.record.path}\"`);\n        }\n    }\n    return upper;\n}\nfunction getInsertionAncestor(matcher) {\n    let ancestor = matcher;\n    while ((ancestor = ancestor.parent)) {\n        if (isMatchable(ancestor) &&\n            comparePathParserScore(matcher, ancestor) === 0) {\n            return ancestor;\n        }\n    }\n    return;\n}\n/**\n * Checks if a matcher can be reachable. This means if it's possible to reach it as a route. For example, routes without\n * a component, or name, or redirect, are just used to group other routes.\n * @param matcher\n * @param matcher.record record of the matcher\n * @returns\n */\nfunction isMatchable({ record }) {\n    return !!(record.name ||\n        (record.components && Object.keys(record.components).length) ||\n        record.redirect);\n}\n\n/**\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\n * version with the leading `?` and without Should work as URLSearchParams\n\n * @internal\n *\n * @param search - search string to parse\n * @returns a query object\n */\nfunction parseQuery(search) {\n    const query = {};\n    // avoid creating an object with an empty key and empty value\n    // because of split('&')\n    if (search === '' || search === '?')\n        return query;\n    const hasLeadingIM = search[0] === '?';\n    const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\n    for (let i = 0; i < searchParams.length; ++i) {\n        // pre decode the + into space\n        const searchParam = searchParams[i].replace(PLUS_RE, ' ');\n        // allow the = character\n        const eqPos = searchParam.indexOf('=');\n        const key = decode(eqPos < 0 ? searchParam : searchParam.slice(0, eqPos));\n        const value = eqPos < 0 ? null : decode(searchParam.slice(eqPos + 1));\n        if (key in query) {\n            // an extra variable for ts types\n            let currentValue = query[key];\n            if (!isArray(currentValue)) {\n                currentValue = query[key] = [currentValue];\n            }\n            currentValue.push(value);\n        }\n        else {\n            query[key] = value;\n        }\n    }\n    return query;\n}\n/**\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\n * doesn't prepend a `?`\n *\n * @internal\n *\n * @param query - query object to stringify\n * @returns string version of the query without the leading `?`\n */\nfunction stringifyQuery(query) {\n    let search = '';\n    for (let key in query) {\n        const value = query[key];\n        key = encodeQueryKey(key);\n        if (value == null) {\n            // only null adds the value\n            if (value !== undefined) {\n                search += (search.length ? '&' : '') + key;\n            }\n            continue;\n        }\n        // keep null values\n        const values = isArray(value)\n            ? value.map(v => v && encodeQueryValue(v))\n            : [value && encodeQueryValue(value)];\n        values.forEach(value => {\n            // skip undefined values in arrays as if they were not present\n            // smaller code than using filter\n            if (value !== undefined) {\n                // only append & with non-empty search\n                search += (search.length ? '&' : '') + key;\n                if (value != null)\n                    search += '=' + value;\n            }\n        });\n    }\n    return search;\n}\n/**\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\n * numbers into strings, removing keys with an undefined value and replacing\n * undefined with null in arrays\n *\n * @param query - query object to normalize\n * @returns a normalized query object\n */\nfunction normalizeQuery(query) {\n    const normalizedQuery = {};\n    for (const key in query) {\n        const value = query[key];\n        if (value !== undefined) {\n            normalizedQuery[key] = isArray(value)\n                ? value.map(v => (v == null ? null : '' + v))\n                : value == null\n                    ? value\n                    : '' + value;\n        }\n    }\n    return normalizedQuery;\n}\n\n/**\n * RouteRecord being rendered by the closest ancestor Router View. Used for\n * `onBeforeRouteUpdate` and `onBeforeRouteLeave`. rvlm stands for Router View\n * Location Matched\n *\n * @internal\n */\nconst matchedRouteKey = Symbol((process.env.NODE_ENV !== 'production') ? 'router view location matched' : '');\n/**\n * Allows overriding the router view depth to control which component in\n * `matched` is rendered. rvd stands for Router View Depth\n *\n * @internal\n */\nconst viewDepthKey = Symbol((process.env.NODE_ENV !== 'production') ? 'router view depth' : '');\n/**\n * Allows overriding the router instance returned by `useRouter` in tests. r\n * stands for router\n *\n * @internal\n */\nconst routerKey = Symbol((process.env.NODE_ENV !== 'production') ? 'router' : '');\n/**\n * Allows overriding the current route returned by `useRoute` in tests. rl\n * stands for route location\n *\n * @internal\n */\nconst routeLocationKey = Symbol((process.env.NODE_ENV !== 'production') ? 'route location' : '');\n/**\n * Allows overriding the current route used by router-view. Internally this is\n * used when the `route` prop is passed.\n *\n * @internal\n */\nconst routerViewLocationKey = Symbol((process.env.NODE_ENV !== 'production') ? 'router view location' : '');\n\n/**\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\n */\nfunction useCallbacks() {\n    let handlers = [];\n    function add(handler) {\n        handlers.push(handler);\n        return () => {\n            const i = handlers.indexOf(handler);\n            if (i > -1)\n                handlers.splice(i, 1);\n        };\n    }\n    function reset() {\n        handlers = [];\n    }\n    return {\n        add,\n        list: () => handlers.slice(),\n        reset,\n    };\n}\n\nfunction registerGuard(record, name, guard) {\n    const removeFromList = () => {\n        record[name].delete(guard);\n    };\n    onUnmounted(removeFromList);\n    onDeactivated(removeFromList);\n    onActivated(() => {\n        record[name].add(guard);\n    });\n    record[name].add(guard);\n}\n/**\n * Add a navigation guard that triggers whenever the component for the current\n * location is about to be left. Similar to {@link beforeRouteLeave} but can be\n * used in any component. The guard is removed when the component is unmounted.\n *\n * @param leaveGuard - {@link NavigationGuard}\n */\nfunction onBeforeRouteLeave(leaveGuard) {\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\n        warn('getCurrentInstance() returned null. onBeforeRouteLeave() must be called at the top of a setup function');\n        return;\n    }\n    const activeRecord = inject(matchedRouteKey, \n    // to avoid warning\n    {}).value;\n    if (!activeRecord) {\n        (process.env.NODE_ENV !== 'production') &&\n            warn('No active route record was found when calling `onBeforeRouteLeave()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?');\n        return;\n    }\n    registerGuard(activeRecord, 'leaveGuards', leaveGuard);\n}\n/**\n * Add a navigation guard that triggers whenever the current location is about\n * to be updated. Similar to {@link beforeRouteUpdate} but can be used in any\n * component. The guard is removed when the component is unmounted.\n *\n * @param updateGuard - {@link NavigationGuard}\n */\nfunction onBeforeRouteUpdate(updateGuard) {\n    if ((process.env.NODE_ENV !== 'production') && !getCurrentInstance()) {\n        warn('getCurrentInstance() returned null. onBeforeRouteUpdate() must be called at the top of a setup function');\n        return;\n    }\n    const activeRecord = inject(matchedRouteKey, \n    // to avoid warning\n    {}).value;\n    if (!activeRecord) {\n        (process.env.NODE_ENV !== 'production') &&\n            warn('No active route record was found when calling `onBeforeRouteUpdate()`. Make sure you call this function inside a component child of <router-view>. Maybe you called it inside of App.vue?');\n        return;\n    }\n    registerGuard(activeRecord, 'updateGuards', updateGuard);\n}\nfunction guardToPromiseFn(guard, to, from, record, name, runWithContext = fn => fn()) {\n    // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n    const enterCallbackArray = record &&\n        // name is defined if record is because of the function overload\n        (record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n    return () => new Promise((resolve, reject) => {\n        const next = (valid) => {\n            if (valid === false) {\n                reject(createRouterError(4 /* ErrorTypes.NAVIGATION_ABORTED */, {\n                    from,\n                    to,\n                }));\n            }\n            else if (valid instanceof Error) {\n                reject(valid);\n            }\n            else if (isRouteLocation(valid)) {\n                reject(createRouterError(2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */, {\n                    from: to,\n                    to: valid,\n                }));\n            }\n            else {\n                if (enterCallbackArray &&\n                    // since enterCallbackArray is truthy, both record and name also are\n                    record.enterCallbacks[name] === enterCallbackArray &&\n                    typeof valid === 'function') {\n                    enterCallbackArray.push(valid);\n                }\n                resolve();\n            }\n        };\n        // wrapping with Promise.resolve allows it to work with both async and sync guards\n        const guardReturn = runWithContext(() => guard.call(record && record.instances[name], to, from, (process.env.NODE_ENV !== 'production') ? canOnlyBeCalledOnce(next, to, from) : next));\n        let guardCall = Promise.resolve(guardReturn);\n        if (guard.length < 3)\n            guardCall = guardCall.then(next);\n        if ((process.env.NODE_ENV !== 'production') && guard.length > 2) {\n            const message = `The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`;\n            if (typeof guardReturn === 'object' && 'then' in guardReturn) {\n                guardCall = guardCall.then(resolvedValue => {\n                    // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n                    if (!next._called) {\n                        warn(message);\n                        return Promise.reject(new Error('Invalid navigation guard'));\n                    }\n                    return resolvedValue;\n                });\n            }\n            else if (guardReturn !== undefined) {\n                // @ts-expect-error: _called is added at canOnlyBeCalledOnce\n                if (!next._called) {\n                    warn(message);\n                    reject(new Error('Invalid navigation guard'));\n                    return;\n                }\n            }\n        }\n        guardCall.catch(err => reject(err));\n    });\n}\nfunction canOnlyBeCalledOnce(next, to, from) {\n    let called = 0;\n    return function () {\n        if (called++ === 1)\n            warn(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`);\n        // @ts-expect-error: we put it in the original one because it's easier to check\n        next._called = true;\n        if (called === 1)\n            next.apply(null, arguments);\n    };\n}\nfunction extractComponentsGuards(matched, guardType, to, from, runWithContext = fn => fn()) {\n    const guards = [];\n    for (const record of matched) {\n        if ((process.env.NODE_ENV !== 'production') && !record.components && !record.children.length) {\n            warn(`Record with path \"${record.path}\" is either missing a \"component(s)\"` +\n                ` or \"children\" property.`);\n        }\n        for (const name in record.components) {\n            let rawComponent = record.components[name];\n            if ((process.env.NODE_ENV !== 'production')) {\n                if (!rawComponent ||\n                    (typeof rawComponent !== 'object' &&\n                        typeof rawComponent !== 'function')) {\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is not` +\n                        ` a valid component. Received \"${String(rawComponent)}\".`);\n                    // throw to ensure we stop here but warn to ensure the message isn't\n                    // missed by the user\n                    throw new Error('Invalid route component');\n                }\n                else if ('then' in rawComponent) {\n                    // warn if user wrote import('/component.vue') instead of () =>\n                    // import('./component.vue')\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a ` +\n                        `Promise instead of a function that returns a Promise. Did you ` +\n                        `write \"import('./MyPage.vue')\" instead of ` +\n                        `\"() => import('./MyPage.vue')\" ? This will break in ` +\n                        `production if not fixed.`);\n                    const promise = rawComponent;\n                    rawComponent = () => promise;\n                }\n                else if (rawComponent.__asyncLoader &&\n                    // warn only once per component\n                    !rawComponent.__warnedDefineAsync) {\n                    rawComponent.__warnedDefineAsync = true;\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is defined ` +\n                        `using \"defineAsyncComponent()\". ` +\n                        `Write \"() => import('./MyPage.vue')\" instead of ` +\n                        `\"defineAsyncComponent(() => import('./MyPage.vue'))\".`);\n                }\n            }\n            // skip update and leave guards if the route component is not mounted\n            if (guardType !== 'beforeRouteEnter' && !record.instances[name])\n                continue;\n            if (isRouteComponent(rawComponent)) {\n                // __vccOpts is added by vue-class-component and contain the regular options\n                const options = rawComponent.__vccOpts || rawComponent;\n                const guard = options[guardType];\n                guard &&\n                    guards.push(guardToPromiseFn(guard, to, from, record, name, runWithContext));\n            }\n            else {\n                // start requesting the chunk already\n                let componentPromise = rawComponent();\n                if ((process.env.NODE_ENV !== 'production') && !('catch' in componentPromise)) {\n                    warn(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\n                    componentPromise = Promise.resolve(componentPromise);\n                }\n                guards.push(() => componentPromise.then(resolved => {\n                    if (!resolved)\n                        throw new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\"`);\n                    const resolvedComponent = isESModule(resolved)\n                        ? resolved.default\n                        : resolved;\n                    // keep the resolved module for plugins like data loaders\n                    record.mods[name] = resolved;\n                    // replace the function with the resolved component\n                    // cannot be null or undefined because we went into the for loop\n                    record.components[name] = resolvedComponent;\n                    // __vccOpts is added by vue-class-component and contain the regular options\n                    const options = resolvedComponent.__vccOpts || resolvedComponent;\n                    const guard = options[guardType];\n                    return (guard &&\n                        guardToPromiseFn(guard, to, from, record, name, runWithContext)());\n                }));\n            }\n        }\n    }\n    return guards;\n}\n/**\n * Ensures a route is loaded, so it can be passed as o prop to `<RouterView>`.\n *\n * @param route - resolved route to load\n */\nfunction loadRouteLocation(route) {\n    return route.matched.every(record => record.redirect)\n        ? Promise.reject(new Error('Cannot load a route that redirects.'))\n        : Promise.all(route.matched.map(record => record.components &&\n            Promise.all(Object.keys(record.components).reduce((promises, name) => {\n                const rawComponent = record.components[name];\n                if (typeof rawComponent === 'function' &&\n                    !('displayName' in rawComponent)) {\n                    promises.push(rawComponent().then(resolved => {\n                        if (!resolved)\n                            return Promise.reject(new Error(`Couldn't resolve component \"${name}\" at \"${record.path}\". Ensure you passed a function that returns a promise.`));\n                        const resolvedComponent = isESModule(resolved)\n                            ? resolved.default\n                            : resolved;\n                        // keep the resolved module for plugins like data loaders\n                        record.mods[name] = resolved;\n                        // replace the function with the resolved component\n                        // cannot be null or undefined because we went into the for loop\n                        record.components[name] = resolvedComponent;\n                        return;\n                    }));\n                }\n                return promises;\n            }, [])))).then(() => route);\n}\n\n// TODO: we could allow currentRoute as a prop to expose `isActive` and\n// `isExactActive` behavior should go through an RFC\n/**\n * Returns the internal behavior of a {@link RouterLink} without the rendering part.\n *\n * @param props - a `to` location and an optional `replace` flag\n */\nfunction useLink(props) {\n    const router = inject(routerKey);\n    const currentRoute = inject(routeLocationKey);\n    let hasPrevious = false;\n    let previousTo = null;\n    const route = computed(() => {\n        const to = unref(props.to);\n        if ((process.env.NODE_ENV !== 'production') && (!hasPrevious || to !== previousTo)) {\n            if (!isRouteLocation(to)) {\n                if (hasPrevious) {\n                    warn(`Invalid value for prop \"to\" in useLink()\\n- to:`, to, `\\n- previous to:`, previousTo, `\\n- props:`, props);\n                }\n                else {\n                    warn(`Invalid value for prop \"to\" in useLink()\\n- to:`, to, `\\n- props:`, props);\n                }\n            }\n            previousTo = to;\n            hasPrevious = true;\n        }\n        return router.resolve(to);\n    });\n    const activeRecordIndex = computed(() => {\n        const { matched } = route.value;\n        const { length } = matched;\n        const routeMatched = matched[length - 1];\n        const currentMatched = currentRoute.matched;\n        if (!routeMatched || !currentMatched.length)\n            return -1;\n        const index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\n        if (index > -1)\n            return index;\n        // possible parent record\n        const parentRecordPath = getOriginalPath(matched[length - 2]);\n        return (\n        // we are dealing with nested routes\n        length > 1 &&\n            // if the parent and matched route have the same path, this link is\n            // referring to the empty child. Or we currently are on a different\n            // child of the same parent\n            getOriginalPath(routeMatched) === parentRecordPath &&\n            // avoid comparing the child with its parent\n            currentMatched[currentMatched.length - 1].path !== parentRecordPath\n            ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2]))\n            : index);\n    });\n    const isActive = computed(() => activeRecordIndex.value > -1 &&\n        includesParams(currentRoute.params, route.value.params));\n    const isExactActive = computed(() => activeRecordIndex.value > -1 &&\n        activeRecordIndex.value === currentRoute.matched.length - 1 &&\n        isSameRouteLocationParams(currentRoute.params, route.value.params));\n    function navigate(e = {}) {\n        if (guardEvent(e)) {\n            const p = router[unref(props.replace) ? 'replace' : 'push'](unref(props.to)\n            // avoid uncaught errors are they are logged anyway\n            ).catch(noop);\n            if (props.viewTransition &&\n                typeof document !== 'undefined' &&\n                'startViewTransition' in document) {\n                document.startViewTransition(() => p);\n            }\n            return p;\n        }\n        return Promise.resolve();\n    }\n    // devtools only\n    if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) && isBrowser) {\n        const instance = getCurrentInstance();\n        if (instance) {\n            const linkContextDevtools = {\n                route: route.value,\n                isActive: isActive.value,\n                isExactActive: isExactActive.value,\n                error: null,\n            };\n            // @ts-expect-error: this is internal\n            instance.__vrl_devtools = instance.__vrl_devtools || [];\n            // @ts-expect-error: this is internal\n            instance.__vrl_devtools.push(linkContextDevtools);\n            watchEffect(() => {\n                linkContextDevtools.route = route.value;\n                linkContextDevtools.isActive = isActive.value;\n                linkContextDevtools.isExactActive = isExactActive.value;\n                linkContextDevtools.error = isRouteLocation(unref(props.to))\n                    ? null\n                    : 'Invalid \"to\" value';\n            }, { flush: 'post' });\n        }\n    }\n    /**\n     * NOTE: update {@link _RouterLinkI}'s `$slots` type when updating this\n     */\n    return {\n        route,\n        href: computed(() => route.value.href),\n        isActive,\n        isExactActive,\n        navigate,\n    };\n}\nfunction preferSingleVNode(vnodes) {\n    return vnodes.length === 1 ? vnodes[0] : vnodes;\n}\nconst RouterLinkImpl = /*#__PURE__*/ defineComponent({\n    name: 'RouterLink',\n    compatConfig: { MODE: 3 },\n    props: {\n        to: {\n            type: [String, Object],\n            required: true,\n        },\n        replace: Boolean,\n        activeClass: String,\n        // inactiveClass: String,\n        exactActiveClass: String,\n        custom: Boolean,\n        ariaCurrentValue: {\n            type: String,\n            default: 'page',\n        },\n    },\n    useLink,\n    setup(props, { slots }) {\n        const link = reactive(useLink(props));\n        const { options } = inject(routerKey);\n        const elClass = computed(() => ({\n            [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\n            // [getLinkClass(\n            //   props.inactiveClass,\n            //   options.linkInactiveClass,\n            //   'router-link-inactive'\n            // )]: !link.isExactActive,\n            [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive,\n        }));\n        return () => {\n            const children = slots.default && preferSingleVNode(slots.default(link));\n            return props.custom\n                ? children\n                : h('a', {\n                    'aria-current': link.isExactActive\n                        ? props.ariaCurrentValue\n                        : null,\n                    href: link.href,\n                    // this would override user added attrs but Vue will still add\n                    // the listener, so we end up triggering both\n                    onClick: link.navigate,\n                    class: elClass.value,\n                }, children);\n        };\n    },\n});\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to render a link that triggers a navigation on click.\n */\nconst RouterLink = RouterLinkImpl;\nfunction guardEvent(e) {\n    // don't redirect with control keys\n    if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey)\n        return;\n    // don't redirect when preventDefault called\n    if (e.defaultPrevented)\n        return;\n    // don't redirect on right click\n    if (e.button !== undefined && e.button !== 0)\n        return;\n    // don't redirect if `target=\"_blank\"`\n    // @ts-expect-error getAttribute does exist\n    if (e.currentTarget && e.currentTarget.getAttribute) {\n        // @ts-expect-error getAttribute exists\n        const target = e.currentTarget.getAttribute('target');\n        if (/\\b_blank\\b/i.test(target))\n            return;\n    }\n    // this may be a Weex event which doesn't have this method\n    if (e.preventDefault)\n        e.preventDefault();\n    return true;\n}\nfunction includesParams(outer, inner) {\n    for (const key in inner) {\n        const innerValue = inner[key];\n        const outerValue = outer[key];\n        if (typeof innerValue === 'string') {\n            if (innerValue !== outerValue)\n                return false;\n        }\n        else {\n            if (!isArray(outerValue) ||\n                outerValue.length !== innerValue.length ||\n                innerValue.some((value, i) => value !== outerValue[i]))\n                return false;\n        }\n    }\n    return true;\n}\n/**\n * Get the original path value of a record by following its aliasOf\n * @param record\n */\nfunction getOriginalPath(record) {\n    return record ? (record.aliasOf ? record.aliasOf.path : record.path) : '';\n}\n/**\n * Utility class to get the active class based on defaults.\n * @param propClass\n * @param globalClass\n * @param defaultClass\n */\nconst getLinkClass = (propClass, globalClass, defaultClass) => propClass != null\n    ? propClass\n    : globalClass != null\n        ? globalClass\n        : defaultClass;\n\nconst RouterViewImpl = /*#__PURE__*/ defineComponent({\n    name: 'RouterView',\n    // #674 we manually inherit them\n    inheritAttrs: false,\n    props: {\n        name: {\n            type: String,\n            default: 'default',\n        },\n        route: Object,\n    },\n    // Better compat for @vue/compat users\n    // https://github.com/vuejs/router/issues/1315\n    compatConfig: { MODE: 3 },\n    setup(props, { attrs, slots }) {\n        (process.env.NODE_ENV !== 'production') && warnDeprecatedUsage();\n        const injectedRoute = inject(routerViewLocationKey);\n        const routeToDisplay = computed(() => props.route || injectedRoute.value);\n        const injectedDepth = inject(viewDepthKey, 0);\n        // The depth changes based on empty components option, which allows passthrough routes e.g. routes with children\n        // that are used to reuse the `path` property\n        const depth = computed(() => {\n            let initialDepth = unref(injectedDepth);\n            const { matched } = routeToDisplay.value;\n            let matchedRoute;\n            while ((matchedRoute = matched[initialDepth]) &&\n                !matchedRoute.components) {\n                initialDepth++;\n            }\n            return initialDepth;\n        });\n        const matchedRouteRef = computed(() => routeToDisplay.value.matched[depth.value]);\n        provide(viewDepthKey, computed(() => depth.value + 1));\n        provide(matchedRouteKey, matchedRouteRef);\n        provide(routerViewLocationKey, routeToDisplay);\n        const viewRef = ref();\n        // watch at the same time the component instance, the route record we are\n        // rendering, and the name\n        watch(() => [viewRef.value, matchedRouteRef.value, props.name], ([instance, to, name], [oldInstance, from, oldName]) => {\n            // copy reused instances\n            if (to) {\n                // this will update the instance for new instances as well as reused\n                // instances when navigating to a new route\n                to.instances[name] = instance;\n                // the component instance is reused for a different route or name, so\n                // we copy any saved update or leave guards. With async setup, the\n                // mounting component will mount before the matchedRoute changes,\n                // making instance === oldInstance, so we check if guards have been\n                // added before. This works because we remove guards when\n                // unmounting/deactivating components\n                if (from && from !== to && instance && instance === oldInstance) {\n                    if (!to.leaveGuards.size) {\n                        to.leaveGuards = from.leaveGuards;\n                    }\n                    if (!to.updateGuards.size) {\n                        to.updateGuards = from.updateGuards;\n                    }\n                }\n            }\n            // trigger beforeRouteEnter next callbacks\n            if (instance &&\n                to &&\n                // if there is no instance but to and from are the same this might be\n                // the first visit\n                (!from || !isSameRouteRecord(to, from) || !oldInstance)) {\n                (to.enterCallbacks[name] || []).forEach(callback => callback(instance));\n            }\n        }, { flush: 'post' });\n        return () => {\n            const route = routeToDisplay.value;\n            // we need the value at the time we render because when we unmount, we\n            // navigated to a different location so the value is different\n            const currentName = props.name;\n            const matchedRoute = matchedRouteRef.value;\n            const ViewComponent = matchedRoute && matchedRoute.components[currentName];\n            if (!ViewComponent) {\n                return normalizeSlot(slots.default, { Component: ViewComponent, route });\n            }\n            // props from route configuration\n            const routePropsOption = matchedRoute.props[currentName];\n            const routeProps = routePropsOption\n                ? routePropsOption === true\n                    ? route.params\n                    : typeof routePropsOption === 'function'\n                        ? routePropsOption(route)\n                        : routePropsOption\n                : null;\n            const onVnodeUnmounted = vnode => {\n                // remove the instance reference to prevent leak\n                if (vnode.component.isUnmounted) {\n                    matchedRoute.instances[currentName] = null;\n                }\n            };\n            const component = h(ViewComponent, assign({}, routeProps, attrs, {\n                onVnodeUnmounted,\n                ref: viewRef,\n            }));\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) &&\n                isBrowser &&\n                component.ref) {\n                // TODO: can display if it's an alias, its props\n                const info = {\n                    depth: depth.value,\n                    name: matchedRoute.name,\n                    path: matchedRoute.path,\n                    meta: matchedRoute.meta,\n                };\n                const internalInstances = isArray(component.ref)\n                    ? component.ref.map(r => r.i)\n                    : [component.ref.i];\n                internalInstances.forEach(instance => {\n                    // @ts-expect-error\n                    instance.__vrv_devtools = info;\n                });\n            }\n            return (\n            // pass the vnode to the slot as a prop.\n            // h and <component :is=\"...\"> both accept vnodes\n            normalizeSlot(slots.default, { Component: component, route }) ||\n                component);\n        };\n    },\n});\nfunction normalizeSlot(slot, data) {\n    if (!slot)\n        return null;\n    const slotContent = slot(data);\n    return slotContent.length === 1 ? slotContent[0] : slotContent;\n}\n// export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n/**\n * Component to display the current route the user is at.\n */\nconst RouterView = RouterViewImpl;\n// warn against deprecated usage with <transition> & <keep-alive>\n// due to functional component being no longer eager in Vue 3\nfunction warnDeprecatedUsage() {\n    const instance = getCurrentInstance();\n    const parentName = instance.parent && instance.parent.type.name;\n    const parentSubTreeType = instance.parent && instance.parent.subTree && instance.parent.subTree.type;\n    if (parentName &&\n        (parentName === 'KeepAlive' || parentName.includes('Transition')) &&\n        typeof parentSubTreeType === 'object' &&\n        parentSubTreeType.name === 'RouterView') {\n        const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\n        warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` +\n            `Use slot props instead:\\n\\n` +\n            `<router-view v-slot=\"{ Component }\">\\n` +\n            `  <${comp}>\\n` +\n            `    <component :is=\"Component\" />\\n` +\n            `  </${comp}>\\n` +\n            `</router-view>`);\n    }\n}\n\n/**\n * Copies a route location and removes any problematic properties that cannot be shown in devtools (e.g. Vue instances).\n *\n * @param routeLocation - routeLocation to format\n * @param tooltip - optional tooltip\n * @returns a copy of the routeLocation\n */\nfunction formatRouteLocation(routeLocation, tooltip) {\n    const copy = assign({}, routeLocation, {\n        // remove variables that can contain vue instances\n        matched: routeLocation.matched.map(matched => omit(matched, ['instances', 'children', 'aliasOf'])),\n    });\n    return {\n        _custom: {\n            type: null,\n            readOnly: true,\n            display: routeLocation.fullPath,\n            tooltip,\n            value: copy,\n        },\n    };\n}\nfunction formatDisplay(display) {\n    return {\n        _custom: {\n            display,\n        },\n    };\n}\n// to support multiple router instances\nlet routerId = 0;\nfunction addDevtools(app, router, matcher) {\n    // Take over router.beforeEach and afterEach\n    // make sure we are not registering the devtool twice\n    if (router.__hasDevtools)\n        return;\n    router.__hasDevtools = true;\n    // increment to support multiple router instances\n    const id = routerId++;\n    setupDevtoolsPlugin({\n        id: 'org.vuejs.router' + (id ? '.' + id : ''),\n        label: 'Vue Router',\n        packageName: 'vue-router',\n        homepage: 'https://router.vuejs.org',\n        logo: 'https://router.vuejs.org/logo.png',\n        componentStateTypes: ['Routing'],\n        app,\n    }, api => {\n        if (typeof api.now !== 'function') {\n            console.warn('[Vue Router]: You seem to be using an outdated version of Vue Devtools. Are you still using the Beta release instead of the stable one? You can find the links at https://devtools.vuejs.org/guide/installation.html.');\n        }\n        // display state added by the router\n        api.on.inspectComponent((payload, ctx) => {\n            if (payload.instanceData) {\n                payload.instanceData.state.push({\n                    type: 'Routing',\n                    key: '$route',\n                    editable: false,\n                    value: formatRouteLocation(router.currentRoute.value, 'Current Route'),\n                });\n            }\n        });\n        // mark router-link as active and display tags on router views\n        api.on.visitComponentTree(({ treeNode: node, componentInstance }) => {\n            if (componentInstance.__vrv_devtools) {\n                const info = componentInstance.__vrv_devtools;\n                node.tags.push({\n                    label: (info.name ? `${info.name.toString()}: ` : '') + info.path,\n                    textColor: 0,\n                    tooltip: 'This component is rendered by &lt;router-view&gt;',\n                    backgroundColor: PINK_500,\n                });\n            }\n            // if multiple useLink are used\n            if (isArray(componentInstance.__vrl_devtools)) {\n                componentInstance.__devtoolsApi = api;\n                componentInstance.__vrl_devtools.forEach(devtoolsData => {\n                    let label = devtoolsData.route.path;\n                    let backgroundColor = ORANGE_400;\n                    let tooltip = '';\n                    let textColor = 0;\n                    if (devtoolsData.error) {\n                        label = devtoolsData.error;\n                        backgroundColor = RED_100;\n                        textColor = RED_700;\n                    }\n                    else if (devtoolsData.isExactActive) {\n                        backgroundColor = LIME_500;\n                        tooltip = 'This is exactly active';\n                    }\n                    else if (devtoolsData.isActive) {\n                        backgroundColor = BLUE_600;\n                        tooltip = 'This link is active';\n                    }\n                    node.tags.push({\n                        label,\n                        textColor,\n                        tooltip,\n                        backgroundColor,\n                    });\n                });\n            }\n        });\n        watch(router.currentRoute, () => {\n            // refresh active state\n            refreshRoutesView();\n            api.notifyComponentUpdate();\n            api.sendInspectorTree(routerInspectorId);\n            api.sendInspectorState(routerInspectorId);\n        });\n        const navigationsLayerId = 'router:navigations:' + id;\n        api.addTimelineLayer({\n            id: navigationsLayerId,\n            label: `Router${id ? ' ' + id : ''} Navigations`,\n            color: 0x40a8c4,\n        });\n        // const errorsLayerId = 'router:errors'\n        // api.addTimelineLayer({\n        //   id: errorsLayerId,\n        //   label: 'Router Errors',\n        //   color: 0xea5455,\n        // })\n        router.onError((error, to) => {\n            api.addTimelineEvent({\n                layerId: navigationsLayerId,\n                event: {\n                    title: 'Error during Navigation',\n                    subtitle: to.fullPath,\n                    logType: 'error',\n                    time: api.now(),\n                    data: { error },\n                    groupId: to.meta.__navigationId,\n                },\n            });\n        });\n        // attached to `meta` and used to group events\n        let navigationId = 0;\n        router.beforeEach((to, from) => {\n            const data = {\n                guard: formatDisplay('beforeEach'),\n                from: formatRouteLocation(from, 'Current Location during this navigation'),\n                to: formatRouteLocation(to, 'Target location'),\n            };\n            // Used to group navigations together, hide from devtools\n            Object.defineProperty(to.meta, '__navigationId', {\n                value: navigationId++,\n            });\n            api.addTimelineEvent({\n                layerId: navigationsLayerId,\n                event: {\n                    time: api.now(),\n                    title: 'Start of navigation',\n                    subtitle: to.fullPath,\n                    data,\n                    groupId: to.meta.__navigationId,\n                },\n            });\n        });\n        router.afterEach((to, from, failure) => {\n            const data = {\n                guard: formatDisplay('afterEach'),\n            };\n            if (failure) {\n                data.failure = {\n                    _custom: {\n                        type: Error,\n                        readOnly: true,\n                        display: failure ? failure.message : '',\n                        tooltip: 'Navigation Failure',\n                        value: failure,\n                    },\n                };\n                data.status = formatDisplay('❌');\n            }\n            else {\n                data.status = formatDisplay('✅');\n            }\n            // we set here to have the right order\n            data.from = formatRouteLocation(from, 'Current Location during this navigation');\n            data.to = formatRouteLocation(to, 'Target location');\n            api.addTimelineEvent({\n                layerId: navigationsLayerId,\n                event: {\n                    title: 'End of navigation',\n                    subtitle: to.fullPath,\n                    time: api.now(),\n                    data,\n                    logType: failure ? 'warning' : 'default',\n                    groupId: to.meta.__navigationId,\n                },\n            });\n        });\n        /**\n         * Inspector of Existing routes\n         */\n        const routerInspectorId = 'router-inspector:' + id;\n        api.addInspector({\n            id: routerInspectorId,\n            label: 'Routes' + (id ? ' ' + id : ''),\n            icon: 'book',\n            treeFilterPlaceholder: 'Search routes',\n        });\n        function refreshRoutesView() {\n            // the routes view isn't active\n            if (!activeRoutesPayload)\n                return;\n            const payload = activeRoutesPayload;\n            // children routes will appear as nested\n            let routes = matcher.getRoutes().filter(route => !route.parent ||\n                // these routes have a parent with no component which will not appear in the view\n                // therefore we still need to include them\n                !route.parent.record.components);\n            // reset match state to false\n            routes.forEach(resetMatchStateOnRouteRecord);\n            // apply a match state if there is a payload\n            if (payload.filter) {\n                routes = routes.filter(route => \n                // save matches state based on the payload\n                isRouteMatching(route, payload.filter.toLowerCase()));\n            }\n            // mark active routes\n            routes.forEach(route => markRouteRecordActive(route, router.currentRoute.value));\n            payload.rootNodes = routes.map(formatRouteRecordForInspector);\n        }\n        let activeRoutesPayload;\n        api.on.getInspectorTree(payload => {\n            activeRoutesPayload = payload;\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\n                refreshRoutesView();\n            }\n        });\n        /**\n         * Display information about the currently selected route record\n         */\n        api.on.getInspectorState(payload => {\n            if (payload.app === app && payload.inspectorId === routerInspectorId) {\n                const routes = matcher.getRoutes();\n                const route = routes.find(route => route.record.__vd_id === payload.nodeId);\n                if (route) {\n                    payload.state = {\n                        options: formatRouteRecordMatcherForStateInspector(route),\n                    };\n                }\n            }\n        });\n        api.sendInspectorTree(routerInspectorId);\n        api.sendInspectorState(routerInspectorId);\n    });\n}\nfunction modifierForKey(key) {\n    if (key.optional) {\n        return key.repeatable ? '*' : '?';\n    }\n    else {\n        return key.repeatable ? '+' : '';\n    }\n}\nfunction formatRouteRecordMatcherForStateInspector(route) {\n    const { record } = route;\n    const fields = [\n        { editable: false, key: 'path', value: record.path },\n    ];\n    if (record.name != null) {\n        fields.push({\n            editable: false,\n            key: 'name',\n            value: record.name,\n        });\n    }\n    fields.push({ editable: false, key: 'regexp', value: route.re });\n    if (route.keys.length) {\n        fields.push({\n            editable: false,\n            key: 'keys',\n            value: {\n                _custom: {\n                    type: null,\n                    readOnly: true,\n                    display: route.keys\n                        .map(key => `${key.name}${modifierForKey(key)}`)\n                        .join(' '),\n                    tooltip: 'Param keys',\n                    value: route.keys,\n                },\n            },\n        });\n    }\n    if (record.redirect != null) {\n        fields.push({\n            editable: false,\n            key: 'redirect',\n            value: record.redirect,\n        });\n    }\n    if (route.alias.length) {\n        fields.push({\n            editable: false,\n            key: 'aliases',\n            value: route.alias.map(alias => alias.record.path),\n        });\n    }\n    if (Object.keys(route.record.meta).length) {\n        fields.push({\n            editable: false,\n            key: 'meta',\n            value: route.record.meta,\n        });\n    }\n    fields.push({\n        key: 'score',\n        editable: false,\n        value: {\n            _custom: {\n                type: null,\n                readOnly: true,\n                display: route.score.map(score => score.join(', ')).join(' | '),\n                tooltip: 'Score used to sort routes',\n                value: route.score,\n            },\n        },\n    });\n    return fields;\n}\n/**\n * Extracted from tailwind palette\n */\nconst PINK_500 = 0xec4899;\nconst BLUE_600 = 0x2563eb;\nconst LIME_500 = 0x84cc16;\nconst CYAN_400 = 0x22d3ee;\nconst ORANGE_400 = 0xfb923c;\n// const GRAY_100 = 0xf4f4f5\nconst DARK = 0x666666;\nconst RED_100 = 0xfee2e2;\nconst RED_700 = 0xb91c1c;\nfunction formatRouteRecordForInspector(route) {\n    const tags = [];\n    const { record } = route;\n    if (record.name != null) {\n        tags.push({\n            label: String(record.name),\n            textColor: 0,\n            backgroundColor: CYAN_400,\n        });\n    }\n    if (record.aliasOf) {\n        tags.push({\n            label: 'alias',\n            textColor: 0,\n            backgroundColor: ORANGE_400,\n        });\n    }\n    if (route.__vd_match) {\n        tags.push({\n            label: 'matches',\n            textColor: 0,\n            backgroundColor: PINK_500,\n        });\n    }\n    if (route.__vd_exactActive) {\n        tags.push({\n            label: 'exact',\n            textColor: 0,\n            backgroundColor: LIME_500,\n        });\n    }\n    if (route.__vd_active) {\n        tags.push({\n            label: 'active',\n            textColor: 0,\n            backgroundColor: BLUE_600,\n        });\n    }\n    if (record.redirect) {\n        tags.push({\n            label: typeof record.redirect === 'string'\n                ? `redirect: ${record.redirect}`\n                : 'redirects',\n            textColor: 0xffffff,\n            backgroundColor: DARK,\n        });\n    }\n    // add an id to be able to select it. Using the `path` is not possible because\n    // empty path children would collide with their parents\n    let id = record.__vd_id;\n    if (id == null) {\n        id = String(routeRecordId++);\n        record.__vd_id = id;\n    }\n    return {\n        id,\n        label: record.path,\n        tags,\n        children: route.children.map(formatRouteRecordForInspector),\n    };\n}\n//  incremental id for route records and inspector state\nlet routeRecordId = 0;\nconst EXTRACT_REGEXP_RE = /^\\/(.*)\\/([a-z]*)$/;\nfunction markRouteRecordActive(route, currentRoute) {\n    // no route will be active if matched is empty\n    // reset the matching state\n    const isExactActive = currentRoute.matched.length &&\n        isSameRouteRecord(currentRoute.matched[currentRoute.matched.length - 1], route.record);\n    route.__vd_exactActive = route.__vd_active = isExactActive;\n    if (!isExactActive) {\n        route.__vd_active = currentRoute.matched.some(match => isSameRouteRecord(match, route.record));\n    }\n    route.children.forEach(childRoute => markRouteRecordActive(childRoute, currentRoute));\n}\nfunction resetMatchStateOnRouteRecord(route) {\n    route.__vd_match = false;\n    route.children.forEach(resetMatchStateOnRouteRecord);\n}\nfunction isRouteMatching(route, filter) {\n    const found = String(route.re).match(EXTRACT_REGEXP_RE);\n    route.__vd_match = false;\n    if (!found || found.length < 3) {\n        return false;\n    }\n    // use a regexp without $ at the end to match nested routes better\n    const nonEndingRE = new RegExp(found[1].replace(/\\$$/, ''), found[2]);\n    if (nonEndingRE.test(filter)) {\n        // mark children as matches\n        route.children.forEach(child => isRouteMatching(child, filter));\n        // exception case: `/`\n        if (route.record.path !== '/' || filter === '/') {\n            route.__vd_match = route.re.test(filter);\n            return true;\n        }\n        // hide the / route\n        return false;\n    }\n    const path = route.record.path.toLowerCase();\n    const decodedPath = decode(path);\n    // also allow partial matching on the path\n    if (!filter.startsWith('/') &&\n        (decodedPath.includes(filter) || path.includes(filter)))\n        return true;\n    if (decodedPath.startsWith(filter) || path.startsWith(filter))\n        return true;\n    if (route.record.name && String(route.record.name).includes(filter))\n        return true;\n    return route.children.some(child => isRouteMatching(child, filter));\n}\nfunction omit(obj, keys) {\n    const ret = {};\n    for (const key in obj) {\n        if (!keys.includes(key)) {\n            // @ts-expect-error\n            ret[key] = obj[key];\n        }\n    }\n    return ret;\n}\n\n/**\n * Creates a Router instance that can be used by a Vue app.\n *\n * @param options - {@link RouterOptions}\n */\nfunction createRouter(options) {\n    const matcher = createRouterMatcher(options.routes, options);\n    const parseQuery$1 = options.parseQuery || parseQuery;\n    const stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\n    const routerHistory = options.history;\n    if ((process.env.NODE_ENV !== 'production') && !routerHistory)\n        throw new Error('Provide the \"history\" option when calling \"createRouter()\":' +\n            ' https://router.vuejs.org/api/interfaces/RouterOptions.html#history');\n    const beforeGuards = useCallbacks();\n    const beforeResolveGuards = useCallbacks();\n    const afterGuards = useCallbacks();\n    const currentRoute = shallowRef(START_LOCATION_NORMALIZED);\n    let pendingLocation = START_LOCATION_NORMALIZED;\n    // leave the scrollRestoration if no scrollBehavior is provided\n    if (isBrowser && options.scrollBehavior && 'scrollRestoration' in history) {\n        history.scrollRestoration = 'manual';\n    }\n    const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\n    const encodeParams = applyToParams.bind(null, encodeParam);\n    const decodeParams = \n    // @ts-expect-error: intentionally avoid the type check\n    applyToParams.bind(null, decode);\n    function addRoute(parentOrRoute, route) {\n        let parent;\n        let record;\n        if (isRouteName(parentOrRoute)) {\n            parent = matcher.getRecordMatcher(parentOrRoute);\n            if ((process.env.NODE_ENV !== 'production') && !parent) {\n                warn(`Parent route \"${String(parentOrRoute)}\" not found when adding child route`, route);\n            }\n            record = route;\n        }\n        else {\n            record = parentOrRoute;\n        }\n        return matcher.addRoute(record, parent);\n    }\n    function removeRoute(name) {\n        const recordMatcher = matcher.getRecordMatcher(name);\n        if (recordMatcher) {\n            matcher.removeRoute(recordMatcher);\n        }\n        else if ((process.env.NODE_ENV !== 'production')) {\n            warn(`Cannot remove non-existent route \"${String(name)}\"`);\n        }\n    }\n    function getRoutes() {\n        return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\n    }\n    function hasRoute(name) {\n        return !!matcher.getRecordMatcher(name);\n    }\n    function resolve(rawLocation, currentLocation) {\n        // const resolve: Router['resolve'] = (rawLocation: RouteLocationRaw, currentLocation) => {\n        // const objectLocation = routerLocationAsObject(rawLocation)\n        // we create a copy to modify it later\n        currentLocation = assign({}, currentLocation || currentRoute.value);\n        if (typeof rawLocation === 'string') {\n            const locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\n            const matchedRoute = matcher.resolve({ path: locationNormalized.path }, currentLocation);\n            const href = routerHistory.createHref(locationNormalized.fullPath);\n            if ((process.env.NODE_ENV !== 'production')) {\n                if (href.startsWith('//'))\n                    warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\n                else if (!matchedRoute.matched.length) {\n                    warn(`No match found for location with path \"${rawLocation}\"`);\n                }\n            }\n            // locationNormalized is always a new object\n            return assign(locationNormalized, matchedRoute, {\n                params: decodeParams(matchedRoute.params),\n                hash: decode(locationNormalized.hash),\n                redirectedFrom: undefined,\n                href,\n            });\n        }\n        if ((process.env.NODE_ENV !== 'production') && !isRouteLocation(rawLocation)) {\n            warn(`router.resolve() was passed an invalid location. This will fail in production.\\n- Location:`, rawLocation);\n            return resolve({});\n        }\n        let matcherLocation;\n        // path could be relative in object as well\n        if (rawLocation.path != null) {\n            if ((process.env.NODE_ENV !== 'production') &&\n                'params' in rawLocation &&\n                !('name' in rawLocation) &&\n                // @ts-expect-error: the type is never\n                Object.keys(rawLocation.params).length) {\n                warn(`Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\n            }\n            matcherLocation = assign({}, rawLocation, {\n                path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path,\n            });\n        }\n        else {\n            // remove any nullish param\n            const targetParams = assign({}, rawLocation.params);\n            for (const key in targetParams) {\n                if (targetParams[key] == null) {\n                    delete targetParams[key];\n                }\n            }\n            // pass encoded values to the matcher, so it can produce encoded path and fullPath\n            matcherLocation = assign({}, rawLocation, {\n                params: encodeParams(targetParams),\n            });\n            // current location params are decoded, we need to encode them in case the\n            // matcher merges the params\n            currentLocation.params = encodeParams(currentLocation.params);\n        }\n        const matchedRoute = matcher.resolve(matcherLocation, currentLocation);\n        const hash = rawLocation.hash || '';\n        if ((process.env.NODE_ENV !== 'production') && hash && !hash.startsWith('#')) {\n            warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\n        }\n        // the matcher might have merged current location params, so\n        // we need to run the decoding again\n        matchedRoute.params = normalizeParams(decodeParams(matchedRoute.params));\n        const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\n            hash: encodeHash(hash),\n            path: matchedRoute.path,\n        }));\n        const href = routerHistory.createHref(fullPath);\n        if ((process.env.NODE_ENV !== 'production')) {\n            if (href.startsWith('//')) {\n                warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);\n            }\n            else if (!matchedRoute.matched.length) {\n                warn(`No match found for location with path \"${rawLocation.path != null ? rawLocation.path : rawLocation}\"`);\n            }\n        }\n        return assign({\n            fullPath,\n            // keep the hash encoded so fullPath is effectively path + encodedQuery +\n            // hash\n            hash,\n            query: \n            // if the user is using a custom query lib like qs, we might have\n            // nested objects, so we keep the query as is, meaning it can contain\n            // numbers at `$route.query`, but at the point, the user will have to\n            // use their own type anyway.\n            // https://github.com/vuejs/router/issues/328#issuecomment-649481567\n            stringifyQuery$1 === stringifyQuery\n                ? normalizeQuery(rawLocation.query)\n                : (rawLocation.query || {}),\n        }, matchedRoute, {\n            redirectedFrom: undefined,\n            href,\n        });\n    }\n    function locationAsObject(to) {\n        return typeof to === 'string'\n            ? parseURL(parseQuery$1, to, currentRoute.value.path)\n            : assign({}, to);\n    }\n    function checkCanceledNavigation(to, from) {\n        if (pendingLocation !== to) {\n            return createRouterError(8 /* ErrorTypes.NAVIGATION_CANCELLED */, {\n                from,\n                to,\n            });\n        }\n    }\n    function push(to) {\n        return pushWithRedirect(to);\n    }\n    function replace(to) {\n        return push(assign(locationAsObject(to), { replace: true }));\n    }\n    function handleRedirectRecord(to) {\n        const lastMatched = to.matched[to.matched.length - 1];\n        if (lastMatched && lastMatched.redirect) {\n            const { redirect } = lastMatched;\n            let newTargetLocation = typeof redirect === 'function' ? redirect(to) : redirect;\n            if (typeof newTargetLocation === 'string') {\n                newTargetLocation =\n                    newTargetLocation.includes('?') || newTargetLocation.includes('#')\n                        ? (newTargetLocation = locationAsObject(newTargetLocation))\n                        : // force empty params\n                            { path: newTargetLocation };\n                // @ts-expect-error: force empty params when a string is passed to let\n                // the router parse them again\n                newTargetLocation.params = {};\n            }\n            if ((process.env.NODE_ENV !== 'production') &&\n                newTargetLocation.path == null &&\n                !('name' in newTargetLocation)) {\n                warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${to.fullPath}\". A redirect must contain a name or path. This will break in production.`);\n                throw new Error('Invalid redirect');\n            }\n            return assign({\n                query: to.query,\n                hash: to.hash,\n                // avoid transferring params if the redirect has a path\n                params: newTargetLocation.path != null ? {} : to.params,\n            }, newTargetLocation);\n        }\n    }\n    function pushWithRedirect(to, redirectedFrom) {\n        const targetLocation = (pendingLocation = resolve(to));\n        const from = currentRoute.value;\n        const data = to.state;\n        const force = to.force;\n        // to could be a string where `replace` is a function\n        const replace = to.replace === true;\n        const shouldRedirect = handleRedirectRecord(targetLocation);\n        if (shouldRedirect)\n            return pushWithRedirect(assign(locationAsObject(shouldRedirect), {\n                state: typeof shouldRedirect === 'object'\n                    ? assign({}, data, shouldRedirect.state)\n                    : data,\n                force,\n                replace,\n            }), \n            // keep original redirectedFrom if it exists\n            redirectedFrom || targetLocation);\n        // if it was a redirect we already called `pushWithRedirect` above\n        const toLocation = targetLocation;\n        toLocation.redirectedFrom = redirectedFrom;\n        let failure;\n        if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\n            failure = createRouterError(16 /* ErrorTypes.NAVIGATION_DUPLICATED */, { to: toLocation, from });\n            // trigger scroll to allow scrolling to the same anchor\n            handleScroll(from, from, \n            // this is a push, the only way for it to be triggered from a\n            // history.listen is with a redirect, which makes it become a push\n            true, \n            // This cannot be the first navigation because the initial location\n            // cannot be manually navigated to\n            false);\n        }\n        return (failure ? Promise.resolve(failure) : navigate(toLocation, from))\n            .catch((error) => isNavigationFailure(error)\n            ? // navigation redirects still mark the router as ready\n                isNavigationFailure(error, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)\n                    ? error\n                    : markAsReady(error) // also returns the error\n            : // reject any unknown error\n                triggerError(error, toLocation, from))\n            .then((failure) => {\n            if (failure) {\n                if (isNavigationFailure(failure, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)) {\n                    if ((process.env.NODE_ENV !== 'production') &&\n                        // we are redirecting to the same location we were already at\n                        isSameRouteLocation(stringifyQuery$1, resolve(failure.to), toLocation) &&\n                        // and we have done it a couple of times\n                        redirectedFrom &&\n                        // @ts-expect-error: added only in dev\n                        (redirectedFrom._count = redirectedFrom._count\n                            ? // @ts-expect-error\n                                redirectedFrom._count + 1\n                            : 1) > 30) {\n                        warn(`Detected a possibly infinite redirection in a navigation guard when going from \"${from.fullPath}\" to \"${toLocation.fullPath}\". Aborting to avoid a Stack Overflow.\\n Are you always returning a new location within a navigation guard? That would lead to this error. Only return when redirecting or aborting, that should fix this. This might break in production if not fixed.`);\n                        return Promise.reject(new Error('Infinite redirect in navigation guard'));\n                    }\n                    return pushWithRedirect(\n                    // keep options\n                    assign({\n                        // preserve an existing replacement but allow the redirect to override it\n                        replace,\n                    }, locationAsObject(failure.to), {\n                        state: typeof failure.to === 'object'\n                            ? assign({}, data, failure.to.state)\n                            : data,\n                        force,\n                    }), \n                    // preserve the original redirectedFrom if any\n                    redirectedFrom || toLocation);\n                }\n            }\n            else {\n                // if we fail we don't finalize the navigation\n                failure = finalizeNavigation(toLocation, from, true, replace, data);\n            }\n            triggerAfterEach(toLocation, from, failure);\n            return failure;\n        });\n    }\n    /**\n     * Helper to reject and skip all navigation guards if a new navigation happened\n     * @param to\n     * @param from\n     */\n    function checkCanceledNavigationAndReject(to, from) {\n        const error = checkCanceledNavigation(to, from);\n        return error ? Promise.reject(error) : Promise.resolve();\n    }\n    function runWithContext(fn) {\n        const app = installedApps.values().next().value;\n        // support Vue < 3.3\n        return app && typeof app.runWithContext === 'function'\n            ? app.runWithContext(fn)\n            : fn();\n    }\n    // TODO: refactor the whole before guards by internally using router.beforeEach\n    function navigate(to, from) {\n        let guards;\n        const [leavingRecords, updatingRecords, enteringRecords] = extractChangingRecords(to, from);\n        // all components here have been resolved once because we are leaving\n        guards = extractComponentsGuards(leavingRecords.reverse(), 'beforeRouteLeave', to, from);\n        // leavingRecords is already reversed\n        for (const record of leavingRecords) {\n            record.leaveGuards.forEach(guard => {\n                guards.push(guardToPromiseFn(guard, to, from));\n            });\n        }\n        const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\n        guards.push(canceledNavigationCheck);\n        // run the queue of per route beforeRouteLeave guards\n        return (runGuardQueue(guards)\n            .then(() => {\n            // check global guards beforeEach\n            guards = [];\n            for (const guard of beforeGuards.list()) {\n                guards.push(guardToPromiseFn(guard, to, from));\n            }\n            guards.push(canceledNavigationCheck);\n            return runGuardQueue(guards);\n        })\n            .then(() => {\n            // check in components beforeRouteUpdate\n            guards = extractComponentsGuards(updatingRecords, 'beforeRouteUpdate', to, from);\n            for (const record of updatingRecords) {\n                record.updateGuards.forEach(guard => {\n                    guards.push(guardToPromiseFn(guard, to, from));\n                });\n            }\n            guards.push(canceledNavigationCheck);\n            // run the queue of per route beforeEnter guards\n            return runGuardQueue(guards);\n        })\n            .then(() => {\n            // check the route beforeEnter\n            guards = [];\n            for (const record of enteringRecords) {\n                // do not trigger beforeEnter on reused views\n                if (record.beforeEnter) {\n                    if (isArray(record.beforeEnter)) {\n                        for (const beforeEnter of record.beforeEnter)\n                            guards.push(guardToPromiseFn(beforeEnter, to, from));\n                    }\n                    else {\n                        guards.push(guardToPromiseFn(record.beforeEnter, to, from));\n                    }\n                }\n            }\n            guards.push(canceledNavigationCheck);\n            // run the queue of per route beforeEnter guards\n            return runGuardQueue(guards);\n        })\n            .then(() => {\n            // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\n            // clear existing enterCallbacks, these are added by extractComponentsGuards\n            to.matched.forEach(record => (record.enterCallbacks = {}));\n            // check in-component beforeRouteEnter\n            guards = extractComponentsGuards(enteringRecords, 'beforeRouteEnter', to, from, runWithContext);\n            guards.push(canceledNavigationCheck);\n            // run the queue of per route beforeEnter guards\n            return runGuardQueue(guards);\n        })\n            .then(() => {\n            // check global guards beforeResolve\n            guards = [];\n            for (const guard of beforeResolveGuards.list()) {\n                guards.push(guardToPromiseFn(guard, to, from));\n            }\n            guards.push(canceledNavigationCheck);\n            return runGuardQueue(guards);\n        })\n            // catch any navigation canceled\n            .catch(err => isNavigationFailure(err, 8 /* ErrorTypes.NAVIGATION_CANCELLED */)\n            ? err\n            : Promise.reject(err)));\n    }\n    function triggerAfterEach(to, from, failure) {\n        // navigation is confirmed, call afterGuards\n        // TODO: wrap with error handlers\n        afterGuards\n            .list()\n            .forEach(guard => runWithContext(() => guard(to, from, failure)));\n    }\n    /**\n     * - Cleans up any navigation guards\n     * - Changes the url if necessary\n     * - Calls the scrollBehavior\n     */\n    function finalizeNavigation(toLocation, from, isPush, replace, data) {\n        // a more recent navigation took place\n        const error = checkCanceledNavigation(toLocation, from);\n        if (error)\n            return error;\n        // only consider as push if it's not the first navigation\n        const isFirstNavigation = from === START_LOCATION_NORMALIZED;\n        const state = !isBrowser ? {} : history.state;\n        // change URL only if the user did a push/replace and if it's not the initial navigation because\n        // it's just reflecting the url\n        if (isPush) {\n            // on the initial navigation, we want to reuse the scroll position from\n            // history state if it exists\n            if (replace || isFirstNavigation)\n                routerHistory.replace(toLocation.fullPath, assign({\n                    scroll: isFirstNavigation && state && state.scroll,\n                }, data));\n            else\n                routerHistory.push(toLocation.fullPath, data);\n        }\n        // accept current navigation\n        currentRoute.value = toLocation;\n        handleScroll(toLocation, from, isPush, isFirstNavigation);\n        markAsReady();\n    }\n    let removeHistoryListener;\n    // attach listener to history to trigger navigations\n    function setupListeners() {\n        // avoid setting up listeners twice due to an invalid first navigation\n        if (removeHistoryListener)\n            return;\n        removeHistoryListener = routerHistory.listen((to, _from, info) => {\n            if (!router.listening)\n                return;\n            // cannot be a redirect route because it was in history\n            const toLocation = resolve(to);\n            // due to dynamic routing, and to hash history with manual navigation\n            // (manually changing the url or calling history.hash = '#/somewhere'),\n            // there could be a redirect record in history\n            const shouldRedirect = handleRedirectRecord(toLocation);\n            if (shouldRedirect) {\n                pushWithRedirect(assign(shouldRedirect, { replace: true, force: true }), toLocation).catch(noop);\n                return;\n            }\n            pendingLocation = toLocation;\n            const from = currentRoute.value;\n            // TODO: should be moved to web history?\n            if (isBrowser) {\n                saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\n            }\n            navigate(toLocation, from)\n                .catch((error) => {\n                if (isNavigationFailure(error, 4 /* ErrorTypes.NAVIGATION_ABORTED */ | 8 /* ErrorTypes.NAVIGATION_CANCELLED */)) {\n                    return error;\n                }\n                if (isNavigationFailure(error, 2 /* ErrorTypes.NAVIGATION_GUARD_REDIRECT */)) {\n                    // Here we could call if (info.delta) routerHistory.go(-info.delta,\n                    // false) but this is bug prone as we have no way to wait the\n                    // navigation to be finished before calling pushWithRedirect. Using\n                    // a setTimeout of 16ms seems to work but there is no guarantee for\n                    // it to work on every browser. So instead we do not restore the\n                    // history entry and trigger a new navigation as requested by the\n                    // navigation guard.\n                    // the error is already handled by router.push we just want to avoid\n                    // logging the error\n                    pushWithRedirect(assign(locationAsObject(error.to), {\n                        force: true,\n                    }), toLocation\n                    // avoid an uncaught rejection, let push call triggerError\n                    )\n                        .then(failure => {\n                        // manual change in hash history #916 ending up in the URL not\n                        // changing, but it was changed by the manual url change, so we\n                        // need to manually change it ourselves\n                        if (isNavigationFailure(failure, 4 /* ErrorTypes.NAVIGATION_ABORTED */ |\n                            16 /* ErrorTypes.NAVIGATION_DUPLICATED */) &&\n                            !info.delta &&\n                            info.type === NavigationType.pop) {\n                            routerHistory.go(-1, false);\n                        }\n                    })\n                        .catch(noop);\n                    // avoid the then branch\n                    return Promise.reject();\n                }\n                // do not restore history on unknown direction\n                if (info.delta) {\n                    routerHistory.go(-info.delta, false);\n                }\n                // unrecognized error, transfer to the global handler\n                return triggerError(error, toLocation, from);\n            })\n                .then((failure) => {\n                failure =\n                    failure ||\n                        finalizeNavigation(\n                        // after navigation, all matched components are resolved\n                        toLocation, from, false);\n                // revert the navigation\n                if (failure) {\n                    if (info.delta &&\n                        // a new navigation has been triggered, so we do not want to revert, that will change the current history\n                        // entry while a different route is displayed\n                        !isNavigationFailure(failure, 8 /* ErrorTypes.NAVIGATION_CANCELLED */)) {\n                        routerHistory.go(-info.delta, false);\n                    }\n                    else if (info.type === NavigationType.pop &&\n                        isNavigationFailure(failure, 4 /* ErrorTypes.NAVIGATION_ABORTED */ | 16 /* ErrorTypes.NAVIGATION_DUPLICATED */)) {\n                        // manual change in hash history #916\n                        // it's like a push but lacks the information of the direction\n                        routerHistory.go(-1, false);\n                    }\n                }\n                triggerAfterEach(toLocation, from, failure);\n            })\n                // avoid warnings in the console about uncaught rejections, they are logged by triggerErrors\n                .catch(noop);\n        });\n    }\n    // Initialization and Errors\n    let readyHandlers = useCallbacks();\n    let errorListeners = useCallbacks();\n    let ready;\n    /**\n     * Trigger errorListeners added via onError and throws the error as well\n     *\n     * @param error - error to throw\n     * @param to - location we were navigating to when the error happened\n     * @param from - location we were navigating from when the error happened\n     * @returns the error as a rejected promise\n     */\n    function triggerError(error, to, from) {\n        markAsReady(error);\n        const list = errorListeners.list();\n        if (list.length) {\n            list.forEach(handler => handler(error, to, from));\n        }\n        else {\n            if ((process.env.NODE_ENV !== 'production')) {\n                warn('uncaught error during route navigation:');\n            }\n            console.error(error);\n        }\n        // reject the error no matter there were error listeners or not\n        return Promise.reject(error);\n    }\n    function isReady() {\n        if (ready && currentRoute.value !== START_LOCATION_NORMALIZED)\n            return Promise.resolve();\n        return new Promise((resolve, reject) => {\n            readyHandlers.add([resolve, reject]);\n        });\n    }\n    function markAsReady(err) {\n        if (!ready) {\n            // still not ready if an error happened\n            ready = !err;\n            setupListeners();\n            readyHandlers\n                .list()\n                .forEach(([resolve, reject]) => (err ? reject(err) : resolve()));\n            readyHandlers.reset();\n        }\n        return err;\n    }\n    // Scroll behavior\n    function handleScroll(to, from, isPush, isFirstNavigation) {\n        const { scrollBehavior } = options;\n        if (!isBrowser || !scrollBehavior)\n            return Promise.resolve();\n        const scrollPosition = (!isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0))) ||\n            ((isFirstNavigation || !isPush) &&\n                history.state &&\n                history.state.scroll) ||\n            null;\n        return nextTick()\n            .then(() => scrollBehavior(to, from, scrollPosition))\n            .then(position => position && scrollToPosition(position))\n            .catch(err => triggerError(err, to, from));\n    }\n    const go = (delta) => routerHistory.go(delta);\n    let started;\n    const installedApps = new Set();\n    const router = {\n        currentRoute,\n        listening: true,\n        addRoute,\n        removeRoute,\n        clearRoutes: matcher.clearRoutes,\n        hasRoute,\n        getRoutes,\n        resolve,\n        options,\n        push,\n        replace,\n        go,\n        back: () => go(-1),\n        forward: () => go(1),\n        beforeEach: beforeGuards.add,\n        beforeResolve: beforeResolveGuards.add,\n        afterEach: afterGuards.add,\n        onError: errorListeners.add,\n        isReady,\n        install(app) {\n            const router = this;\n            app.component('RouterLink', RouterLink);\n            app.component('RouterView', RouterView);\n            app.config.globalProperties.$router = router;\n            Object.defineProperty(app.config.globalProperties, '$route', {\n                enumerable: true,\n                get: () => unref(currentRoute),\n            });\n            // this initial navigation is only necessary on client, on server it doesn't\n            // make sense because it will create an extra unnecessary navigation and could\n            // lead to problems\n            if (isBrowser &&\n                // used for the initial navigation client side to avoid pushing\n                // multiple times when the router is used in multiple apps\n                !started &&\n                currentRoute.value === START_LOCATION_NORMALIZED) {\n                // see above\n                started = true;\n                push(routerHistory.location).catch(err => {\n                    if ((process.env.NODE_ENV !== 'production'))\n                        warn('Unexpected error when starting the router:', err);\n                });\n            }\n            const reactiveRoute = {};\n            for (const key in START_LOCATION_NORMALIZED) {\n                Object.defineProperty(reactiveRoute, key, {\n                    get: () => currentRoute.value[key],\n                    enumerable: true,\n                });\n            }\n            app.provide(routerKey, router);\n            app.provide(routeLocationKey, shallowReactive(reactiveRoute));\n            app.provide(routerViewLocationKey, currentRoute);\n            const unmountApp = app.unmount;\n            installedApps.add(app);\n            app.unmount = function () {\n                installedApps.delete(app);\n                // the router is not attached to an app anymore\n                if (installedApps.size < 1) {\n                    // invalidate the current navigation\n                    pendingLocation = START_LOCATION_NORMALIZED;\n                    removeHistoryListener && removeHistoryListener();\n                    removeHistoryListener = null;\n                    currentRoute.value = START_LOCATION_NORMALIZED;\n                    started = false;\n                    ready = false;\n                }\n                unmountApp();\n            };\n            // TODO: this probably needs to be updated so it can be used by vue-termui\n            if (((process.env.NODE_ENV !== 'production') || __VUE_PROD_DEVTOOLS__) && isBrowser) {\n                addDevtools(app, router, matcher);\n            }\n        },\n    };\n    // TODO: type this as NavigationGuardReturn or similar instead of any\n    function runGuardQueue(guards) {\n        return guards.reduce((promise, guard) => promise.then(() => runWithContext(guard)), Promise.resolve());\n    }\n    return router;\n}\nfunction extractChangingRecords(to, from) {\n    const leavingRecords = [];\n    const updatingRecords = [];\n    const enteringRecords = [];\n    const len = Math.max(from.matched.length, to.matched.length);\n    for (let i = 0; i < len; i++) {\n        const recordFrom = from.matched[i];\n        if (recordFrom) {\n            if (to.matched.find(record => isSameRouteRecord(record, recordFrom)))\n                updatingRecords.push(recordFrom);\n            else\n                leavingRecords.push(recordFrom);\n        }\n        const recordTo = to.matched[i];\n        if (recordTo) {\n            // the type doesn't matter because we are comparing per reference\n            if (!from.matched.find(record => isSameRouteRecord(record, recordTo))) {\n                enteringRecords.push(recordTo);\n            }\n        }\n    }\n    return [leavingRecords, updatingRecords, enteringRecords];\n}\n\n/**\n * Returns the router instance. Equivalent to using `$router` inside\n * templates.\n */\nfunction useRouter() {\n    return inject(routerKey);\n}\n/**\n * Returns the current route location. Equivalent to using `$route` inside\n * templates.\n */\nfunction useRoute(_name) {\n    return inject(routeLocationKey);\n}\n\nexport { NavigationFailureType, RouterLink, RouterView, START_LOCATION_NORMALIZED as START_LOCATION, createMemoryHistory, createRouter, createRouterMatcher, createWebHashHistory, createWebHistory, isNavigationFailure, loadRouteLocation, matchedRouteKey, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, routeLocationKey, routerKey, routerViewLocationKey, stringifyQuery, useLink, useRoute, useRouter, viewDepthKey };\n"],"names":["compileCache","Object","create","compileToFunction","template","options","nodeType","innerHTML","key","cached","el","document","querySelector","opts","hoistStatic","onError","onWarn","isCustomElement","customElements","tag","get","code","render","Function","_rc","registerRuntimeCompiler","activePinia","setActivePinia","pinia","piniaSymbol","Symbol","isPlainObject","o","prototype","toString","call","toJSON","MutationType","IS_CLIENT","window","_global","self","global","globalThis","HTMLElement","bom","blob","autoBom","test","type","Blob","String","fromCharCode","download","url","name","xhr","XMLHttpRequest","open","responseType","onload","saveAs","response","onerror","console","error","send","corsEnabled","e","status","click","node","dispatchEvent","MouseEvent","evt","createEvent","initMouseEvent","_navigator","navigator","userAgent","isMacOSWebView","HTMLAnchorElement","downloadSaveAs","msSaveAs","fileSaverSaveAs","a","createElement","rel","href","origin","location","target","URL","createObjectURL","setTimeout","revokeObjectURL","msSaveOrOpenBlob","popup","title","body","innerText","force","isSafari","isChromeIOS","FileReader","reader","onloadend","result","Error","replace","assign","readAsDataURL","assign$1","createPinia","scope","state","run","_p","toBeInstalled","install","app","_a","provide","config","globalProperties","$pinia","forEach","plugin","push","use","this","_e","_s","Map","noop","addSubscription","subscriptions","callback","detached","onCleanup","removeSubscription","idx","indexOf","splice","triggerSubscriptions","args","slice","fallbackRunWithContext","fn","ACTION_MARKER","ACTION_NAME","mergeReactiveObjects","patchToApply","value","set","Set","add","hasOwnProperty","subPatch","targetValue","skipHydrateSymbol","shouldHydrate","obj","isComputed","effect","createOptionsStore","id","hot","actions","getters","initialState","store","setup","localState","keys","reduce","computedGetters","_r","createSetupStore","$id","isOptionsStore","optionsForPlugin","$subscribeOptions","deep","isListening","isSyncListening","debuggerEvents","actionSubscriptions","activeListener","$patch","partialStateOrMutator","subscriptionMutation","patchFunction","storeId","events","patchObject","payload","myListenerId","then","$reset","newState","$state","$dispose","stop","delete","action","wrappedAction","Array","from","arguments","afterCallbackList","onErrorCallbackList","after","ret","apply","Promise","catch","reject","partialStore","$onAction","bind","$subscribe","stopWatcher","flush","direct","runWithContext","setupStore","prop","actionValue","defineProperty","extender","hydrate","defineStore","idOrOptions","setupOptions","isSetupStore","useStore","hasContext","has","mapStoreSuffix","mapStores","stores","reduced","storeToRefs","rawStore","refs","isBrowser","isRouteComponent","component","isESModule","__esModule","toStringTag","default","applyToParams","params","newParams","isArray","map","HASH_RE","AMPERSAND_RE","SLASH_RE","EQUAL_RE","IM_RE","PLUS_RE","ENC_BRACKET_OPEN_RE","ENC_BRACKET_CLOSE_RE","ENC_CARET_RE","ENC_BACKTICK_RE","ENC_CURLY_OPEN_RE","ENC_PIPE_RE","ENC_CURLY_CLOSE_RE","ENC_SPACE_RE","commonEncode","text","encodeURI","encodeHash","encodeQueryValue","encodeQueryKey","encodePath","encodeParam","decode","decodeURIComponent","err","TRAILING_SLASH_RE","removeTrailingSlash","path","parseURL","parseQuery","currentLocation","query","searchString","hash","hashPos","searchPos","length","resolveRelativePath","fullPath","stringifyURL","stringifyQuery","stripBase","pathname","base","toLowerCase","startsWith","isSameRouteLocation","b","aLastIndex","matched","bLastIndex","isSameRouteRecord","isSameRouteLocationParams","aliasOf","isSameRouteLocationParamsValue","isEquivalentArray","every","i","to","fromSegments","split","toSegments","lastToSegment","toPosition","segment","position","join","START_LOCATION_NORMALIZED","undefined","meta","redirectedFrom","NavigationType","NavigationDirection","normalizeBase","baseEl","getAttribute","BEFORE_HASH_RE","createHref","getElementPosition","offset","docRect","documentElement","getBoundingClientRect","elRect","behavior","left","top","computeScrollPosition","scrollX","scrollY","scrollToPosition","scrollToOptions","positionEl","isIdSelector","getElementById","style","scrollTo","getScrollKey","delta","history","scrollPositions","saveScrollPosition","scrollPosition","getSavedScrollPosition","scroll","createBaseLocation","protocol","host","createCurrentLocation","search","slicePos","includes","pathFromHash","useHistoryListeners","historyState","listeners","teardowns","pauseState","popStateHandler","fromState","listener","pop","direction","forward","back","unknown","pauseListeners","listen","teardown","index","beforeUnloadListener","replaceState","destroy","removeEventListener","addEventListener","passive","buildState","current","replaced","computeScroll","useHistoryStateNavigation","changeLocation","hashIndex","data","currentState","createWebHistory","historyNavigation","historyListeners","go","triggerListeners","routerHistory","enumerable","createWebHashHistory","isRouteLocation","route","isRouteName","NavigationFailureSymbol","NavigationFailureType","createRouterError","isNavigationFailure","BASE_PARAM_PATTERN","BASE_PATH_PARSER_OPTIONS","sensitive","strict","start","end","REGEX_CHARS_RE","tokensToParser","segments","extraOptions","score","pattern","segmentScores","tokenIndex","token","subSegmentScore","repeatable","optional","regexp","re","RegExp","message","subPattern","endsWith","parse","match","stringify","avoidDuplicatedSlash","param","compareScoreArray","diff","comparePathParserScore","aScore","bScore","comp","Math","abs","isLastScoreNegative","last","ROOT_TOKEN","VALID_PARAM_RE","tokenizePath","crash","buffer","previousState","tokens","finalizeSegment","char","customRe","consumeBuffer","addCharToBuffer","createRouteRecordMatcher","record","parent","parser","matcher","children","alias","createRouterMatcher","routes","globalOptions","matchers","matcherMap","getRecordMatcher","addRoute","originalRecord","isRootAdd","mainNormalizedRecord","normalizeRouteRecord","mergeOptions","normalizedRecords","aliases","components","originalMatcher","normalizedRecord","parentPath","connectingSlash","isAliasRecord","removeRoute","isMatchable","insertMatcher","matcherRef","getRoutes","findInsertionIndex","resolve","paramsFromLocation","filter","k","concat","find","m","parentMatcher","unshift","mergeMetaFields","clearRoutes","clear","normalized","redirect","beforeEnter","props","normalizeRecordProps","instances","leaveGuards","updateGuards","enterCallbacks","propsObject","defaults","partialOptions","lower","upper","mid","sortOrder","insertionAncestor","getInsertionAncestor","lastIndexOf","ancestor","hasLeadingIM","searchParams","searchParam","eqPos","currentValue","values","v","normalizeQuery","normalizedQuery","matchedRouteKey","viewDepthKey","routerKey","routeLocationKey","routerViewLocationKey","useCallbacks","handlers","handler","reset","list","guardToPromiseFn","guard","enterCallbackArray","next","valid","guardReturn","guardCall","extractComponentsGuards","guardType","guards","rawComponent","__vccOpts","componentPromise","resolved","resolvedComponent","mods","useLink","router","currentRoute","activeRecordIndex","routeMatched","currentMatched","findIndex","parentRecordPath","getOriginalPath","isActive","includesParams","isExactActive","navigate","guardEvent","p","viewTransition","startViewTransition","preferSingleVNode","vnodes","RouterLinkImpl","compatConfig","MODE","required","Boolean","activeClass","exactActiveClass","custom","ariaCurrentValue","slots","link","elClass","getLinkClass","linkActiveClass","linkExactActiveClass","h","onClick","class","RouterLink","metaKey","altKey","ctrlKey","shiftKey","defaultPrevented","button","currentTarget","preventDefault","outer","inner","innerValue","outerValue","some","propClass","globalClass","defaultClass","RouterViewImpl","inheritAttrs","attrs","injectedRoute","routeToDisplay","injectedDepth","depth","initialDepth","matchedRoute","matchedRouteRef","viewRef","instance","oldInstance","oldName","size","currentName","ViewComponent","normalizeSlot","Component","routePropsOption","routeProps","onVnodeUnmounted","vnode","isUnmounted","ref","slot","slotContent","RouterView","createRouter","parseQuery$1","stringifyQuery$1","beforeGuards","beforeResolveGuards","afterGuards","pendingLocation","scrollBehavior","scrollRestoration","normalizeParams","paramValue","encodeParams","decodeParams","parentOrRoute","recordMatcher","routeMatcher","hasRoute","rawLocation","locationNormalized","matcherLocation","targetParams","locationAsObject","checkCanceledNavigation","pushWithRedirect","handleRedirectRecord","lastMatched","newTargetLocation","targetLocation","shouldRedirect","toLocation","failure","handleScroll","markAsReady","triggerError","finalizeNavigation","triggerAfterEach","checkCanceledNavigationAndReject","installedApps","leavingRecords","updatingRecords","enteringRecords","extractChangingRecords","reverse","canceledNavigationCheck","runGuardQueue","isPush","isFirstNavigation","removeHistoryListener","setupListeners","_from","info","listening","ready","readyHandlers","errorListeners","isReady","started","beforeEach","beforeResolve","afterEach","$router","reactiveRoute","unmountApp","unmount","promise","len","max","recordFrom","recordTo","useRouter","useRoute","_name"],"sourceRoot":""}