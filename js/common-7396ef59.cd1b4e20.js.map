{"version":3,"file":"js/common-7396ef59.cd1b4e20.js","mappings":"0MAOO,MAAMA,GAA4BC,EAAAA,EAAAA,IAAY,qBAAqB,KAExE,MAAMC,GAAcC,EAAAA,EAAAA,IAAI,CACtBC,QAAS,EACTC,QAAS,EACTC,aAAc,EACdC,QAAS,IAILC,GAAaL,EAAAA,EAAAA,IAAI,CACrBM,QAAS,GACTC,SAAU,KAINC,GAAkBR,EAAAA,EAAAA,IAAI,KACtBS,GAAaT,EAAAA,EAAAA,IAAIU,KAAKC,OAGtBC,GAAeC,EAAAA,EAAAA,KAAS,IACrBH,KAAKC,MAAQF,EAAWK,MAAQN,EAAgBM,QAGnDC,GAAiBF,EAAAA,EAAAA,KAAS,IACvBG,KAAKC,IAAIlB,EAAYe,MAAMb,SAAWI,EAAWS,MAAMR,UAG1DY,GAAkBL,EAAAA,EAAAA,KAAS,IACxBG,KAAKC,IAAIlB,EAAYe,MAAMb,SAAWI,EAAWS,MAAMP,WAI1DY,GAAiBC,EAAAA,EAAAA,IAAsB,YAAa,eAAe,SAASC,EAAUP,GAC1F,GAAIQ,OAAOC,UAAUC,eAAeC,KAAK1B,EAAYe,MAAOO,GAAW,CACrEtB,EAAYe,MAAMO,GAAYL,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGb,IACtD,IACEc,GACF,CAAE,MAAOC,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBC,QAAQC,KAAK,6DAA6DF,IAAM,GAEpF,CACF,MACED,EAAAA,EAAAA,IAAY,IAAII,MAAM,iCAAiCb,MAAcU,IACnEC,QAAQC,KAAK,wBAAwBF,IAAM,GAGjD,IAEMI,GAAef,EAAAA,EAAAA,IAAsB,YAAa,cAAc,SAASgB,EAAOtB,GACpF,GAAIQ,OAAOC,UAAUC,eAAeC,KAAKpB,EAAWS,MAAOsB,GAAQ,CACjE/B,EAAWS,MAAMsB,GAASpB,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGb,IAClD,IACEc,GACF,CAAE,MAAOC,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBC,QAAQC,KAAK,2DAA2DF,IAAM,GAElF,CACF,MACED,EAAAA,EAAAA,IAAY,IAAII,MAAM,4BAA4BE,MAAWL,IAC3DC,QAAQC,KAAK,wBAAwBF,IAAM,GAGjD,IAEMM,GAAqBjB,EAAAA,EAAAA,IAAsB,YAAa,mBAAmB,SAASkB,GACxF9B,EAAgBM,MAAQE,KAAKU,IAAI,IAAKV,KAAKW,IAAI,IAAMW,IACrD,IACEV,GACF,CAAE,MAAOC,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBC,QAAQC,KAAK,yDAAyDF,IAAM,GAEhF,CACF,IAEMQ,EAAWA,KACfxC,EAAYe,MAAQ,CAClBb,QAAS,EACTC,QAAS,EACTC,aAAc,EACdC,QAAS,GAEXC,EAAWS,MAAQ,CACjBR,QAAS,GACTC,SAAU,IAEZC,EAAgBM,MAAQ,IACxB,IACEc,GACF,CAAE,MAAOC,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBC,QAAQC,KAAK,uDAAuDF,IAAM,GAE9E,GAGIS,EAAuBA,KAC3B,GAAsB,qBAAXC,OACT,IACE,MAAMC,EAAQC,aAAaC,QAAQ,qBACnC,GAAIF,EACF,IACE,MAAMG,EAASC,KAAKC,MAAML,GAC1B3C,EAAYe,MAAQ+B,EAAO9C,aAAeA,EAAYe,MACtDT,EAAWS,MAAQ+B,EAAOxC,YAAcA,EAAWS,MACnDN,EAAgBM,MAAQ+B,EAAOrC,iBAAmBA,EAAgBM,KACpE,CAAE,MAAOkC,IACPlB,EAAAA,EAAAA,IAAYkB,GAAajB,IACvBC,QAAQC,KAAK,wDAAwDF,IAAM,GAE/E,CAEJ,CAAE,MAAOkB,IACPnB,EAAAA,EAAAA,IAAYmB,GAAelB,IACzBC,QAAQC,KAAK,uDAAuDF,IAAM,GAE9E,CACF,EAGIH,EAAqBA,KACzB,GAAsB,qBAAXa,OACT,IACE,MAAMS,EAAW,CACfnD,YAAaA,EAAYe,MACzBT,WAAYA,EAAWS,MACvBN,gBAAiBA,EAAgBM,OAEnC6B,aAAaQ,QAAQ,oBAAqBL,KAAKM,UAAUF,GAC3D,CAAE,MAAOrB,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClB,MAAM,IAAIG,MAAM,sCAAsCH,IAAM,GAEhE,CACF,EAMF,OAFAS,IAEO,CACLzC,cACAM,aACAG,kBACAC,aACAG,eACAG,iBACAG,kBACAC,iBACAgB,eACAE,qBACAE,WACAC,uBACAZ,qBACD,G,6OC3JI,MAAMyB,EAAyB,CACpCC,QAAS,CACPC,QAAiB,IACjBC,OAAiB,IACjBC,aAAiB,GACjBC,WAAiB,GACjBC,IAAiB,IACjBC,aAAiB,IACjBC,SAAiB,IACjBC,cAAiB,IACjBC,SAAiB,IACjBC,gBAAiB,IACjBC,MAAiB,GACjBC,UAAiB,GACjBC,QAAiB,IAEnBC,aAAc,CACZb,QAAiB,GACjBC,QAAiB,IACjBC,aAAiB,IACjBC,YAAiB,IACjBC,KAAiB,GACjBC,cAAiB,IACjBC,SAAiB,IACjBC,aAAiB,IACjBC,QAAiB,GACjBC,gBAAiB,GACjBC,MAAiB,GACjBC,UAAiB,EACjBC,SAAiB,IAEnBE,IAAK,CACHd,QAAiB,GACjBC,OAAiB,GACjBC,aAAiB,EACjBC,WAAiB,GACjBC,IAAiB,EACjBC,aAAiB,GACjBC,SAAiB,GACjBC,cAAkB,GAClBC,SAAiB,IACjBC,gBAAiB,IACjBC,MAAiB,GACjBC,UAAiB,GACjBC,QAAiB,KAIRG,EAA4B,CACvChB,QAAS,CACPiB,YAAmB,IACnBC,iBAAmB,GACnBC,QAAmB,IACnBC,QAAmB,GACnBC,gBAAmB,GACnBC,kBAAmB,IACnBC,cAAmB,GACnBC,YAAmB,GACnBC,WAAmB,GACnBC,kBAAmB,IAErBZ,aAAc,CACZG,YAAmB,GACnBC,iBAAmB,GACnBC,QAAmB,GACnBC,QAAmB,IACnBC,gBAAmB,GACnBC,iBAAmB,GACnBC,eAAmB,IACnBC,aAAmB,IACnBC,YAAmB,IACnBC,mBAAmB,IAErBX,IAAK,CACHE,YAAmB,GACnBC,iBAAmB,IACnBC,SAAmB,GACnBC,QAAmB,GACnBC,gBAAmB,GACnBC,iBAAmB,GACnBC,cAAmB,GACnBC,YAAmB,GACnBC,WAAmB,GACnBC,kBAAmB,KAIVC,EAAuB,CAClC3B,QAAS,CACP4B,WAAkB,GAClBC,UAAkB,GAClBC,eAAkB,GAClBC,OAAkB,GAClBC,cAAkB,GAClBC,WAAkB,GAClBC,YAAkB,GAClBC,iBAAkB,GAClBC,eAAkB,GAClBC,QAAkB,GAClBC,QAAkB,GAClBC,cAAkB,IAEpBzB,aAAc,CACZc,WAAkB,IAClBC,WAAkB,IAClBC,eAAkB,GAClBC,OAAkB,GAClBC,cAAkB,GAClBC,WAAkB,GAClBC,YAAkB,GAClBC,iBAAkB,GAClBC,gBAAkB,GAClBC,QAAkB,GAClBC,QAAkB,GAClBC,cAAkB,IAEpBxB,IAAK,CACHa,WAAkB,GAClBC,UAAkB,GAClBC,eAAkB,GAClBC,QAAkB,GAClBC,cAAkB,GAClBC,WAAkB,GAClBC,YAAkB,GAClBC,kBAAkB,GAClBC,eAAkB,GAClBC,SAAkB,GAClBC,QAAkB,GAClBC,cAAkB,KAQTC,EAA2B,CACtCxC,QAAS,CACPyC,iBAAyB,GACzBC,iBAAyB,GACzBC,cAAyB,GACzBC,YAAyB,EACzBC,gBAAyB,GACzBC,eAAyB,GACzBC,uBAA0B,IAE5BjC,aAAc,CACZ2B,kBAAyB,GACzBC,iBAAyB,GACzBC,eAAyB,GACzBC,aAAyB,GACzBC,gBAAyB,GACzBC,gBAAyB,GACzBC,uBAAyB,IAE3BhC,IAAK,CACH0B,iBAAyB,GACzBC,gBAAyB,GACzBC,cAAyB,GACzBC,YAAyB,GACzBC,iBAAyB,GACzBC,eAAyB,GACzBC,uBAA0B,KAUvB,SAASC,EAA8BC,EAAQC,GACpD,MAAMC,EAAIX,EAAyBU,IAAY,CAAC,EAC1CE,EAAM,CAAC,GAEP,WAAEC,EAAa,CAAC,EAAC,YAAEC,EAAc,CAAC,GAAML,EACxCM,EAAUN,EAAOO,cAAgBP,EAAOQ,aAGxCC,EAAKL,EAAWM,wBACXC,IAAPF,IACFN,EAAIS,kBAAoBH,EAAK,GAAKP,EAAEV,iBAAmBiB,EAAK,IAAMP,EAAEV,iBAAmB,GAGzF,MAAMqB,EAAKT,EAAWU,uBACXH,IAAPE,IACFV,EAAIY,iBAAmBF,EAAK,GAAKX,EAAET,gBAAkBoB,EAAK,IAAMX,EAAET,gBAAkB,GAGtF,MAAMuB,EAAKZ,EAAWV,mBACXiB,IAAPK,IACFb,EAAIc,mBAAqBD,EAAK,IAAMd,EAAER,cAAgBsB,EAAK,IAAOd,EAAER,cAAgB,GAGtFS,EAAIe,aAAeZ,EAAU,GAAKJ,EAAEP,YAAcW,EAAU,IAAMJ,EAAEP,YAAc,EAGlF,MAAMwB,EAAKd,EAAYe,aACZT,IAAPQ,IACFhB,EAAIkB,aAAeF,EAAK,IAAMjB,EAAEN,gBAAkBuB,EAAK,IAAOjB,EAAEN,gBAAkB,GAGpF,MAAM0B,EAAU,CAAC,aAAa,sBAAsB,oBAAoB,sBACrEC,KAAIC,GAAKnB,EAAYmB,KAAIC,QAAOC,GAAkB,kBAANA,IAC/C,GAAIJ,EAAQK,OAAQ,CAClB,MAAMC,EAAMN,EAAQO,QAAO,CAACC,EAAEJ,IAAMI,EAAEJ,GAAE,GAAGJ,EAAQK,OACnDxB,EAAI4B,oBAAsBH,EAAI,IAAI1B,EAAEL,eAAe+B,EAAI,IAAK1B,EAAEL,eAAe,CAC/E,CAEA,OAAOM,CACT,CASO,SAAS6B,EAAwB/B,EAASgC,EAAaC,GAC5D,MAAMC,EAAO,CACXC,UAAWtF,EACXlD,aAAcmE,EACdlE,QAAS6E,GAEX,OAAOyD,EAAKF,KAAehC,KAAWiC,IAAc,CACtD,CAUO,SAASG,EAA4BC,EAAWC,EAAcN,EAAaC,GAChF,IAAKK,IAAiBxH,OAAOyH,KAAKD,GAAcZ,OAAQ,OAAOW,EAE/D,MAAMG,EAAU,CACdL,UAAW,CACTxB,kBAAmB,CAAEpD,QAAQ,GAAKR,QAAQ,GAAKC,OAAO,IACtDgE,mBAAmB,CAAEzD,QAAQ,EAAID,aAAa,GAAIE,gBAAgB,KAEpE7D,aAAc,CACZmI,oBAAoB,CAAE3D,gBAAgB,GAAID,QAAQ,GAAII,YAAY,KAEpE1E,QAAS,CACP+G,kBAAkB,CAAExB,QAAQ,EAAIL,cAAc,GAAIC,WAAW,MAE/DiD,IAAc,CAAC,EAEjB,IAAIS,EAAI,EAAGC,EAAK,EAChB,IAAK,MAAOC,EAAQC,KAAU9H,OAAO+H,QAAQP,GAAe,CAC1D,MAAMQ,EAAIN,EAAQG,KAAUV,IAAc,GAC1CQ,GAAOG,EAAQE,EAAGJ,GAAQI,CAC5B,CACA,IAAKJ,EAAM,OAAOL,EAElB,MAAMU,EAAMN,EAAIC,EAAO,GACvB,OAAOlI,KAAKU,IAAI,EAAGV,KAAKW,IAAI,IAAKkH,EAAYU,GAC/C,C,0BC7PA,MAAMC,EAAwB,CAC5BC,wBAAyB,CAAE9H,IAAK,GAAID,IAAK,KACzCgI,yBAA0B,CAAE/H,IAAK,GAAID,IAAK,KAC1CiI,UAAW,CAAEhI,IAAK,GAAID,IAAK,KAc7B,SAASkI,EAAM9I,GACb,OAAOE,KAAKU,KAAKmI,EAAAA,GAAa7I,KAAKW,IAAIkI,EAAAA,GAAa/I,GACtD,CAEO,SAASgJ,EAAuBvD,EAAQwD,EAAe,GAAIC,EAAe,KAAMC,EAAsB,MAG3GjI,QAAQkI,IAAI,iBAAkB3D,GAAQI,YAGtC,MAAMwD,EAAcH,GAAcI,WAAW,UACzCJ,EAAaK,QAAQ,SAAU,IAC/B,KAGAL,IACFhI,QAAQkI,IAAI,gEAAgEF,KACxEG,GACFnI,QAAQkI,IAAI,0EAA0EC,MAK1F,MAAMG,EAAeL,GAAuB,CAC1ChK,QAAS,EACTC,QAAS,EACTC,aAAc,EACdC,QAAS,GAIX,IAAKmG,IAAWA,EAAOI,WAErB,OADA3E,QAAQC,KAAK,8DACN,CACL0G,UAAW,CAAC,EACZxI,aAAc,CAAC,EACfC,QAAS,CAAC,EACVH,QAAS,EACTsK,aAAa,GAGjB,IAAIC,GAAgB,EAGpBxI,QAAQkI,IAAI,mDAAmD,IAAIxJ,MAAO+J,eAC1E,MAAMC,EAAS,CACb/B,UAAW,CAAC,EACZxI,aAAc,CAAC,EACfC,QAAS,CAAC,GAGNuK,EAAa,CACjBhC,UAAWiC,EAAAA,GAAgBjC,UAC3BxI,aAAcyK,EAAAA,GAAgBzK,aAC9BC,QAASwK,EAAAA,GAAgBxK,SAMvByK,EAAe,CACnBxD,kBAAmB,GACnBJ,mBAAoB,GACpB6D,IAAK,EACL7E,cAAe,EACf8E,YAAa,IACbC,WAAY,KACZC,cAAe,EACfC,aAAc,IACdC,cAAe,EACfC,kBAAmB,GAIfC,EAAiB,CACrB5B,wBAAyB,IACzBC,yBAA0B,GAC1BC,UAAW,GACX2B,oBAAqB,GACrBC,kBAAmB,GACnBC,iBAAkB,KAClBC,oBAAqB,GACrBC,mBAAoB,GACpBC,oBAAqB,GACrBC,wBAAyB,IAIrBjF,EAAa,CAAC,EAGpB,IAAK,MAAMkF,KAAOhB,EAEhBlE,EAAWkF,GAA2C,kBAA7BtF,EAAOI,aAAakF,GAC3CtF,EAAOI,WAAWkF,GAAOhB,EAAagB,GAI1C,IAAK,MAAMA,KAAOR,EAEhB1E,EAAWkF,GAA2C,kBAA7BtF,EAAOI,aAAakF,GAC3CtF,EAAOI,WAAWkF,GAAOR,EAAeQ,GAI5C,IAAIC,EAAmB,EACnBC,EAAe,EAEnB,IAAK,MAAOF,EAAKG,KAAW1K,OAAO+H,QAAQG,GAAwB,CACjE,MAAMyC,EAAStF,EAAWkF,GACJ,kBAAXI,GAIXF,IACA/J,QAAQkI,IAAI,0BAA0B2B,aAAeI,gBAAqBD,EAAOrK,UAAUqK,EAAOtK,UAE9FuK,EAAsB,GAAbD,EAAOrK,KAAasK,EAAsB,IAAbD,EAAOtK,OAC/CoK,IACA9J,QAAQkI,IAAI,iBAAiB2B,wBAA0BI,mBAAwBD,EAAOrK,UAAUqK,EAAOtK,WARvGM,QAAQC,KAAK,0BAA0B4J,mCAU3C,CAGIC,GAAoB,GAAMA,EAAmBC,GAAiB,KAChEvB,GAAgB,EAChBxI,QAAQkI,IAAI,4BAA4B4B,KAAoBC,sDAI1DvB,IACF0B,EAA0BxB,EAAQoB,EAAmBC,GACrD/J,QAAQkI,IAAI,yEAAyE4B,8BAIvF,MAAMK,EAAoB7B,EAAarK,SAAW,EAC5CmM,EAAoB9B,EAAapK,SAAW,EAC5CmM,EAAyB/B,EAAanK,cAAgB,EACtDmM,EAAoBhC,EAAalK,SAAW,EAElD4B,QAAQkI,IAAI,8CAA8CiC,eAA+BC,oBAAoCC,eAAoCC,KAGjK,MAAMC,EAA0BA,CAACC,EAAOC,EAAkB,KACxD,MAAM/B,EAAS,CAAC,EAEhB,IAAK,MAAOmB,EAAKzC,KAAU9H,OAAO+H,QAAQmD,GAAQ,CAEhD,MAAME,EAAsBtD,EAAQ,EAE9BuD,EAAqBR,EAAoBM,EACzCG,EAAmBF,EAAsBC,EAC/CjC,EAAOmB,GAAO7K,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAG,EAAIiL,GAC5C,CAEA,OAAOlC,CAAM,EAMP7D,EAAUN,GAAQsG,kBAAkBhG,SAAW,EAC/CiG,EAAiBvG,GAAQsG,kBAAkBC,gBAAkB,EAC7DC,EAAiBlG,EAAU,GAC3BmG,EAAqBF,EAAiB,GAGtCG,EAAmB,CAAEtE,UAAW,IAAIuE,IAAO/M,aAAc,IAAI+M,IAAO9M,QAAS,IAAI8M,KAEjFC,EAAa5G,GAAQsG,kBAAkBO,QAAU,MAAiB7G,GAAQsG,kBAAkBhG,SAAW,KAE7G,IAAK,MAAOwG,EAAWC,KAAWhM,OAAO+H,QAAQsB,GAC/C,IAAK,MAAO6B,EAAOe,KAAWjM,OAAO+H,QAAQiE,GAAS,CAEpD,IAAIlE,EAEJ,QAA6BlC,IAAzBqG,EAAOC,cAETpE,EAAQmE,EAAOC,cAGXD,EAAOE,oBAAsBV,IAC/B3D,GAASmE,EAAOE,oBAAsB5G,EAAU,IAAM,IAGpD0G,EAAOG,sBAAwBV,IACjC5D,GAASmE,EAAOG,sBAAwBZ,EAAiB,IAAM,QAE5D,CAGL,IAAIa,EAAe,CAAC,EACF,cAAdN,IAA2BM,EAAaC,SAAWpB,GACrC,iBAAda,IAA8BM,EAAaE,YAAcrB,GAC3C,YAAda,IAAyBM,EAAaG,OAAStB,GAGnD,MAAMuB,EAAcC,EAAaT,EAAOU,SAAU1H,EAAQoH,EAAc1D,GACxEb,EAAQ2E,EAAY3E,MAIfsB,EAAOwD,wBACVxD,EAAOwD,sBAAwB,CAAC,GAE7BxD,EAAOwD,sBAAsBb,KAChC3C,EAAOwD,sBAAsBb,GAAa,CAAC,GAE7C3C,EAAOwD,sBAAsBb,GAAWb,GAASuB,EAAYI,gBAAkB,GAG3EJ,EAAYK,gBACdnB,EAAiBI,GAAWgB,IAAI7B,GAChCxK,QAAQkI,IAAI,gBAAgBmD,KAAab,iCAE7C,CAGIW,GAAa/D,EAAQ,IACvBA,EAAQ,GAKV,IAAIuE,EAAe,CAAC,EACF,cAAdN,IAA2BM,EAAaC,SAAWpB,GACrC,iBAAda,IAA8BM,EAAaE,YAAcrB,GAC3C,YAAda,IAAyBM,EAAaG,OAAStB,GAGnD,MAAMuB,EAAcC,EAAaT,EAAOU,SAAU1H,EAAQoH,EAAc1D,GAClEqE,EAAeP,EAAY3E,MAG5BsB,EAAOwD,wBACVxD,EAAOwD,sBAAwB,CAAC,GAE7BxD,EAAOwD,sBAAsBb,KAChC3C,EAAOwD,sBAAsBb,GAAa,CAAC,GAE7C3C,EAAOwD,sBAAsBb,GAAWb,GAASuB,EAAYI,gBAAkB,GAG3EJ,EAAYK,eACdnB,EAAiBI,GAAWgB,IAAI7B,GAChCxK,QAAQkI,IAAI,gBAAgBmD,KAAab,iCAEzCpD,EAAQkF,QAC0BpH,IAAzBqG,EAAOC,gBAEhBpE,EAAgB,GAARA,EAA6B,GAAfkF,GAIxBlF,EAAQpI,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGyH,IAGhC,MAAMmF,EAAsB,CAC1B,+BACA,iBACA,iBACA,8DAEF,IAAIC,GAAiB,EACrB,GAAIjB,GAAUA,EAAOU,SACnB,IAAK,MAAMpC,KAAO0C,EAAqB,CACrC,MAAME,EAAOlB,EAAOU,SAASpC,GAC7B,GAAI4C,EAAM,CACR,MAAM3N,EAAQ4N,EAAenI,EAAQsF,GACrC,QAAkB3E,IAAbuH,EAAK9M,KAAqBb,GAAS2N,EAAK9M,UAAsBuF,IAAbuH,EAAK/M,KAAqBZ,GAAS2N,EAAK/M,IAAM,CAClG8M,GAAiB,EACjB,KACF,CACF,CACF,CAGEA,GACF9D,EAAO2C,GAAWb,GAAS,IAC3BS,EAAiBI,GAAWgB,IAAI7B,GAChCxK,QAAQkI,IAAI,wBAAwBmD,KAAab,6CAEjD9B,EAAO2C,GAAWb,GAASmC,EAAavF,EAE5C,CAIF,GAAIY,GAAgB4E,EAAAA,EAAwB5E,GAAe,CACzD,MAAM6E,EAAoBD,EAAAA,EAAwB5E,GAElD,IAAK,MAAM8E,KAAWxN,OAAOyH,KAAK2B,GAAS,CACzC,GAAgB,YAAZoE,EAAuB,SAE3B,MAAMC,EAAmBF,EAAkBC,GAC3C,GAAIC,EACF,IAAK,MAAOvC,EAAOpD,KAAU9H,OAAO+H,QAAQqB,EAAOoE,SACjB5H,IAA5B6H,EAAiBvC,KAEnB9B,EAAOoE,GAAStC,GAASxL,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGyH,EAAkC,GAA1B2F,EAAiBvC,KAIlF,CACF,CAGA,GAAIrC,EAAa,CACfnI,QAAQkI,IAAI,2BAA2BC,+BAGvC,MAAM6E,EAAwB1I,EAA8BC,EAAQ4D,GACpEnI,QAAQkI,IAAI,0CAA2C8E,GAGvD,IAAK,MAAOpB,EAAUxE,KAAU9H,OAAO+H,QAAQqB,EAAO/B,WAAa,CAAC,GAAI,CAEtE,MAAMsG,EAAmB1G,EAAwB4B,EAAa,YAAayD,GAGrEsB,EAAgB9F,EAA4B,GAAnB6F,EAAwB3E,EAAapK,QAG9DiP,EAAavG,EACjBsG,EACAF,EACA,YACApB,GAIFlD,EAAO/B,UAAUiF,GAAY5M,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGwN,IAGjDnO,KAAKC,IAAIyJ,EAAO/B,UAAUiF,GAAYxE,GAAS,IACjDpH,QAAQkI,IAAI,kBAAkB0D,6BAAoCxE,EAAMgG,QAAQ,SAAS1E,EAAO/B,UAAUiF,GAAUwB,QAAQ,aAAajF,oBAE7I,CAGA,IAAK,MAAO0D,EAAazE,KAAU9H,OAAO+H,QAAQqB,EAAOvK,cAAgB,CAAC,GAAI,CAE5E,MAAMkP,EAAsB9G,EAAwB4B,EAAa,eAAgB0D,GAG3EqB,EAAgB9F,EAA+B,GAAtBiG,EAA2B/E,EAAanK,aAGjEgP,EAAavG,EACjBsG,EACAF,EACA,eACAnB,GAIFnD,EAAOvK,aAAa0N,GAAe7M,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGwN,IAGvDnO,KAAKC,IAAIyJ,EAAOvK,aAAa0N,GAAezE,GAAS,IACvDpH,QAAQkI,IAAI,kBAAkB2D,6BAAuCzE,EAAMgG,QAAQ,SAAS1E,EAAOvK,aAAa0N,GAAauB,QAAQ,aAAajF,oBAEtJ,CAGA,IAAK,MAAO2D,EAAQ1E,KAAU9H,OAAO+H,QAAQqB,EAAOtK,SAAW,CAAC,GAAI,CAElE,MAAMkP,EAAiB/G,EAAwB4B,EAAa,UAAW2D,GAGjEoB,EAAgB9F,EAA0B,GAAjBkG,EAAsBhF,EAAalK,QAG5D+O,EAAavG,EACjBsG,EACAF,EACA,UACAlB,GAIFpD,EAAOtK,QAAQ0N,GAAU9M,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGwN,IAG7CnO,KAAKC,IAAIyJ,EAAOtK,QAAQ0N,GAAU1E,GAAS,IAC7CpH,QAAQkI,IAAI,kBAAkB4D,6BAAkC1E,EAAMgG,QAAQ,SAAS1E,EAAOtK,QAAQ0N,GAAQsB,QAAQ,aAAajF,oBAEvI,CACF,CAGA,GAAIJ,GAAgBA,EAAa7B,OAAS,EAAG,CAE3C,MAAMqH,EAAuBtC,GAAoB,CAAEtE,UAAW,IAAIuE,IAAO/M,aAAc,IAAI+M,IAAO9M,QAAS,IAAI8M,KAE/G,IAAK,MAAM4B,KAAWxN,OAAOyH,KAAK2B,GAChC,GAAgB,YAAZoE,EAAJ,CAGKS,EAAqBT,KACxBS,EAAqBT,GAAW,IAAI5B,KAGtC,IAAK,MAAOV,EAAOpD,KAAU9H,OAAO+H,QAAQqB,EAAOoE,IAEjD,GAAKS,EAAqBT,GAASU,IAAIhD,GAQrCxK,QAAQkI,IAAI,wCAAwC4E,KAAWtC,iCARlB,CAE7C,MAAMiD,EAAsB/E,EAAOwD,wBAAwBY,KAAWtC,IAAU,GAGhFxK,QAAQkI,IAAI,wCAAwC4E,KAAWtC,UAAciD,EAAoBvH,0BACjGwC,EAAOoE,GAAStC,IAASkD,EAAAA,EAAAA,IAAoB3F,EAAc+E,EAAStC,EAAOpD,EAAOqG,EACpF,CAhBiC,CAqBvC,CAGA,MAAMhG,EAA0B9C,EAAW8C,wBAC3C,GAAIA,EAA0B,KAAOA,EAA0B,GAAI,CACjE,IAAK,MAAMqF,IAAW,CAAC,YAAa,eAAgB,WAClD,IAAK,MAAMtC,KAASlL,OAAOyH,KAAK2B,EAAOoE,IACrCpE,EAAOoE,GAAStC,GAAS,IAI7B,OADA9B,EAAOzK,QAAU,IACVyK,CACT,CAGA,MAAMiF,EAAoBpD,EAAwB7B,EAAO/B,UAAWyD,GAC9DwD,EAAuBrD,EAAwB7B,EAAOvK,aAAckM,GACpEwD,EAAkBtD,EAAwB7B,EAAOtK,QAASkM,GAEhEtK,QAAQkI,IAAI,6DAA6DkC,mBAAmCC,cAAmCC,KAG/I,MAAMwD,EAAeC,EAAsB,CACzCpH,UAAWgH,EACXxP,aAAcyP,EACdxP,QAASyP,GACR1F,GAEHnI,QAAQkI,IAAI,4CAA4CiC,qBAGxDnK,QAAQkI,IAAI,mCAAmD,IAAlBM,EAAyB,OAAS,UAC/ExI,QAAQkI,IAAI,2CAA2C4B,KAAoBC,KAC3E/J,QAAQkI,IAAI,gCAAiC4B,EAAmBC,EAAgB,QAGhF,MAAMiE,EAAc,CAClBrH,UAAWgH,EACXxP,aAAcyP,EACdxP,QAASyP,EACT5P,QAAS6P,EACTvF,aAA+B,IAAlBC,GAKf,OAFAxI,QAAQkI,IAAI,0BAA2BpH,KAAKM,UAAU4M,EAAa,KAAM,IAElEA,CACT,CAUA,SAASD,EAAsBrF,EAAQP,EAAc,MACnD,MAAM8F,EAAe,CACnBtH,UAAW,GACXxI,aAAc,GACdC,QAAS,IAGX,IAAI0P,EAAe,EACfI,EAAc,EAElB,IAAK,MAAO7C,EAAW8C,KAAW7O,OAAO+H,QAAQ4G,GAAe,CAC9D,MAAMG,EAAc9O,OAAO+O,OAAO3F,EAAO2C,IAAc,CAAC,GACxD,GAAI+C,EAAYlI,OAAS,EAAG,CAC1B,MAAMoI,EAAeF,EAAYhI,QAAO,CAACa,EAAKG,IAAUH,EAAMG,GAAO,GAAKgH,EAAYlI,OACtF4H,GAAgBQ,EAAeH,EAC/BD,GAAeC,CACjB,CACF,CAEA,IAAIhB,EAAae,EAAc,EAAIJ,EAAeI,EAAc,EAGhE,GAAI/F,EAAa,CAGf,MAAMoG,EAAwB,CAC5BjN,QAAS,GACTc,aAAc,EACdC,KAAM,IAIFmM,EAAWD,EAAsBpG,IAAgB,EACjDsG,EAAgBtB,EAAaqB,EAG/BxP,KAAKC,IAAIuP,GAAY,KACvBxO,QAAQkI,IAAI,kDAAkDiF,EAAWC,QAAQ,SAASqB,EAAcrB,QAAQ,aAAajF,kBAG/HgF,EAAasB,CACf,CAGA,OAAOzP,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGwN,GACjC,CAIA,SAASuB,GAAyB,SAAE9C,EAAQ,YAAEC,EAAW,OAAEC,GAAU7D,EAAsB,MACzF,IAAI/G,EAAW+G,EACf,IAAK/G,EAAU,CACb,MAAMyN,GAAoB9Q,EAAAA,EAAAA,KAC1BqD,EAAW,CACTjD,QAAS0Q,EAAkB1Q,SAAW,EACtCC,QAASyQ,EAAkBzQ,SAAW,EACtCC,aAAcwQ,EAAkBxQ,cAAgB,EAChDC,QAASuQ,EAAkBvQ,SAAW,EAE1C,CAEA,IAAIwQ,EAAa1N,EAASjD,SAAW,EAUrC,OARI2N,EACFgD,GAAc1N,EAAShD,SAAW,EACzB2N,EACT+C,GAAc1N,EAAS/C,cAAgB,EAC9B2N,IACT8C,GAAc1N,EAAS9C,SAAW,GAG7BwQ,CACT,CAWA,SAASC,EAAkB/P,EAAOgQ,EAAQC,EAAmB,GAE3D,MAAMC,EAAehQ,KAAKU,IAAI,KAAQV,KAAKC,IAAI6P,IAAWC,EAAmB,MAC7E,OAAO/P,KAAKC,IAAIH,EAAQgQ,IAAWE,CACrC,CAGA,SAASC,EAAenQ,EAAOoQ,GAC7B,GAAI5P,OAAOC,UAAUC,eAAeC,KAAKyP,EAAS,QAAUpQ,EAAQoQ,EAAQvP,IAAK,OAAO,EACxF,GAAIL,OAAOC,UAAUC,eAAeC,KAAKyP,EAAS,OAAQ,CAExD,GAAIA,EAAQxP,IAAM,IAAOmP,EAAkB/P,EAAO,EAAG,GACnD,OAAO,EAET,GAAIA,EAAQoQ,EAAQxP,IAAK,OAAO,CAClC,CACA,OAAO,CACT,CAEA,SAASsM,EAAaC,EAAU1H,EAAQoH,EAAe,CAAC,EAAG1D,EAAsB,MAE/E,MAAM,SAAE2D,EAAQ,YAAEC,EAAW,OAAEC,GAAWH,EACpCwD,EAASvD,GAAYC,GAAeC,EACpCzM,EAAWuM,EAAW,YAAeC,EAAc,eAAiB,UAGpEuD,EAAU,GACVjD,EAAiB,GACjBkD,EAAiB,GAGvB,IAAIC,EAAc,EACdpB,EAAc,EAIlB,GAAIiB,GAAuB,cAAb9P,EAA0B,CAEtC,MAAMkQ,EAAqB7C,EAAenI,EAAQiL,EAAAA,cAAcC,gBAEhE,GAAkC,kBAAvBF,EAAiC,CAE1C,MAAMG,GAAWC,EAAAA,EAAAA,uBACfH,EAAAA,cAAcC,eACdN,EACA9P,EACAkQ,GAIEG,IACF1P,QAAQkI,IAAI,oDAAoDwH,EAASE,WAAWT,gBAAqBI,KAGzGH,EAAQS,KAAK,CACXD,KAAMF,EAASE,KACfxI,MAAO,EACP0I,WAAYJ,EAAStP,QAIvB+L,EAAe0D,KAAKH,EAASE,MAEjC,CACF,CAGA,IAAK,MAAOA,EAAMG,KAAkBzQ,OAAO+H,QAAQ4E,GAEjD,GAAI+D,MAAMC,QAAQF,GAAgB,CAChC,MAAMjR,EAAQ4N,EAAenI,EAAQqL,GACrC,QAAc1K,IAAVpG,GAAuBoR,MAAMpR,GAAQ,SAGzC,IAAK,MAAMqR,KAAaJ,EAAe,CACrC,MAAM,IAAEpQ,EAAG,IAAED,EAAG,MAAE0H,EAAK,SAAEgJ,EAAQ,OAAEjC,EAAS,GAAQgC,EAG9CE,OAAoBnL,IAARvF,GAAqBb,GAASa,EAC1C2Q,OAAoBpL,IAARxF,GAAqBZ,GAASY,EAEhD,GAAI2Q,GAAaC,EAAW,CAM1B,GALa,6BAATV,GACF5P,QAAQkI,IAAI,iCAAiCiH,sBAA4BY,EAAe,UAAU3I,KAIhGpI,KAAKC,IAAImI,GAASmJ,EAAAA,IAAmC,YAAbH,EAAwB,CAClEf,EAAeQ,KAAK,CAClBD,OACAxI,QACAgJ,WACAtR,QACAqQ,SACA9P,aAEFW,QAAQkI,IAAI,uCAAuC7I,KAAY8P,MAAWS,gBAAmBxI,KAC7F,QACF,CAGA,MAAMoJ,EAAe5I,EAAMR,GAGrBqJ,EAActC,GAAU,EACxBuC,EAAwBhC,EAAyB/C,EAAc1D,GAC/D0I,EAAgBH,EAAeC,EAAcC,EAEnDpB,GAAeqB,EACfzC,GAAeuC,EAGf,MAAMG,EAAiBjE,EAAa6D,GAC9B9F,EAAsBkG,EAAiB,EACvChG,EAAmBF,EAAsBgG,EACzCvD,EAAanO,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAG,EAAIiL,IAI/C,IAAIiG,EAAgBjB,OAKR1K,IAARvF,GAAqBA,GAAO,KAC9BkR,EAAgB,GAAGjB,SACnB5P,QAAQkI,IAAI,wCAAwC0H,YAAeiB,2BAIrE,MAAMf,GAAagB,EAAAA,EAAAA,oBAAmBD,EAAe1B,EAAQ9P,GAG7D+P,EAAQS,KAAK,CACXD,KAAMiB,EACNzJ,MAAO+F,EACP2C,eAIF3D,EAAe0D,KAAKgB,GAEpB7Q,QAAQkI,IAAI,yBAAyB2I,2BAAuCf,SAAkBzQ,KAAY8P,IAC5G,CACF,CACF,KAAO,CAEL,MAAM,IAAExP,EAAG,IAAED,EAAG,MAAE0H,EAAK,SAAEgJ,EAAQ,OAAEjC,EAAS,GAAQ4B,EAC9CjR,EAAQ4N,EAAenI,EAAQqL,GACrC,QAAc1K,IAAVpG,GAAuBoR,MAAMpR,GAAQ,SAWzC,GARa,6BAAT8Q,IACF5P,QAAQkI,IAAI,iCAAiCiH,aAAkBrQ,oBAAyBiR,GACpFjR,GAAS,KACXkB,QAAQkI,IAAI,+DAA+DpJ,MAK3EmQ,EAAenQ,EAAOiR,GAAgB,CAExC,GAAI/Q,KAAKC,IAAImI,GAASmJ,EAAAA,IAAmC,YAAbH,EAAwB,CAClEf,EAAeQ,KAAK,CAClBD,OACAxI,QACAgJ,WACAtR,QACAqQ,SACA9P,aAEFW,QAAQkI,IAAI,uCAAuC7I,KAAY8P,MAAWS,gBAAmBxI,KAC7F,QACF,CAGA,MAAMoJ,EAAe5I,EAAMR,GAGrBqJ,EAActC,GAAU,EACxBuC,EAAwBhC,EAAyB/C,EAAc1D,GAC/D0I,EAAgBH,EAAeC,EAAcC,EAEnDpB,GAAeqB,EACfzC,GAAeuC,EAGf,MAAMG,EAAiBjE,EAAa6D,GAC9B9F,EAAsBkG,EAAiB,EACvCnC,EAAgB,EAAK/D,EAAsBgG,EAGjD,IAAIvD,EAAasB,EACboC,EAAgBjB,EAEP,6BAATA,GAAuC9Q,GAAS,KACpC,YAAXqQ,GAAmC,iBAAXA,KAE3B0B,EAAgB,GAAGjB,SACnB5P,QAAQkI,IAAI,sDAAsDpJ,SAAaqQ,YAAiB0B,KAE5FnG,EAAsB,IAExByC,EAAanO,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGwN,EAAa,IAClDnN,QAAQkI,IAAI,2DAA2DiH,YAAiBhC,OAK5F,MAAM2C,GAAagB,EAAAA,EAAAA,oBAAmBD,EAAe1B,EAAQ9P,GAG7D+P,EAAQS,KAAK,CACXD,KAAMiB,EACNzJ,MAAO+F,EACP2C,aACAhR,QACAsR,SAAUL,EAAcK,UAAY,WAItCjE,EAAe0D,KAAK,GAAGD,OAAU9Q,MAAUa,GAAO,WAAWD,GAAO,QAEhEoQ,IAAeiB,EAAAA,kBAAkBC,UAAYlB,IAAeiB,EAAAA,kBAAkBE,MAChFjR,QAAQkI,IAAI,yBAAyB2I,2BAAuCf,SAAkBzQ,KAAY8P,IAE9G,CACF,CAIF,MAAM+B,EAAehD,EAAc,EAAIoB,EAAcpB,EAAc,EACnElO,QAAQkI,IAAI,6BAA6B7I,KAAY8P,MAAW+B,oBAA+B5B,oBAA8BpB,MAG7H,MAAMiD,EAAiBnS,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGX,KAAKoS,MAAM,EAAI,EAAIF,KAIlE,GAHAlR,QAAQkI,IAAI,2CAA2CiJ,wBAAqCD,KAGxF7B,EAAenJ,OAAS,EAAG,CAC7BlG,QAAQkI,IAAI,yBAAyBmH,EAAenJ,8BAA8B7G,KAAY8P,KAG9F,MAAMkC,EAAgBhC,EAAejJ,QAAO,CAACa,EAAKqK,IAAUrK,EAAMqK,EAAMlK,OAAO,GACzEmK,EAAkBF,EAAgBhC,EAAenJ,OAGvD,MAAO,CACLkB,MAAOpI,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAG4R,IAC/BpF,eAAgBkD,EAAevJ,KAAIwL,GAASA,EAAM1B,OAClDxD,eAAe,EACfiD,iBACA6B,eAEJ,CAGA,MAAMM,EAAkBpC,EAAQpJ,QAAOyL,GAAKA,EAAE3B,aAAeiB,EAAAA,kBAAkBC,WAE/E,GAAIQ,EAAgBtL,OAAS,EAAG,CAE9BlG,QAAQkI,IAAI,8CAA8C7I,KAAY8P,MAAWqC,EAAgB1L,KAAI2L,GAAKA,EAAE7B,OAAM8B,KAAK,SAGvH,MAAMC,EAAQH,EAAgBpL,QAAO,CAACa,EAAK2K,IAAW3K,EAAM2K,EAAOxK,OAAO,GACpEyK,EAAgBF,EAAQH,EAAgBtL,OAG9C,MAAO,CACLkB,MAAOpI,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAGkS,IAC/B1F,iBACAC,eAAe,EACf8E,eAEJ,CAGA,IAAIS,EAAQ,EACRG,EAAQ,EAEZ,IAAK,MAAMF,KAAUxC,EACnBuC,GAASC,EAAOxK,MAChB0K,IAIF,OAAIA,GACF9R,QAAQkI,IAAI,kCAAmC,CAC7CyJ,QACAG,QACAC,aAAcJ,EAAQG,EACtB3E,WAAYgE,IAIP,CACL/J,MAAO+J,EACPhF,iBACAC,eAAe,EACf8E,iBAIK,CACL9J,MAAO+J,EACPhF,eAAgB,GAChBC,eAAe,EACf8E,eAGN,CASA,SAASxE,EAAesF,EAAKpC,GAE3B,GAAIA,EAAKqC,SAAS,sBAAuB,CACvC,MAAMC,EAAWtC,EAAKvH,QAAQ,qBAAsB,IAC9C8J,EAAUzF,EAAesF,EAAKE,GACpC,OAAOC,GAASC,iBAClB,CAEA,MAAMC,EAAQzC,EAAK0C,MAAM,KACzB,OAAOD,EAAMjM,QAAO,CAAC4L,EAAKO,IAASP,QAAqB9M,IAAd8M,EAAIO,GAAsBP,EAAIO,QAAQrN,GAAW8M,EAC7F,CAUA,SAASrF,EAAavF,GAEpB,MAAMoL,EAAYC,EAAAA,GAGZ/H,EAAsBtD,EAAQ,EAG9BsL,EAAiB,EAGjBC,EAAoBjI,EAAsB8H,EAAYE,EAG5D,OAAO1T,KAAKU,IAAI,EAAGV,KAAKW,IAAI,EAAG,EAAIgT,GACrC,CAQO,SAASC,EAAkBxL,GAChC,OAAIA,GAAS,IAAY,eACrBA,GAAS,EAAU,aACnBA,GAAS,IAAY,WACrBA,GAAS,EAAU,UACnBA,GAAS,IAAY,YACrBA,GAAS,EAAU,eACnBA,GAAS,IAAY,UAClB,UACT,CAQO,SAASyL,EAAkBzL,GAChC,OAAIA,GAAS,IAAY,UACrBA,GAAS,EAAU,UACnBA,GAAS,IAAY,UACrBA,GAAS,EAAU,UACnBA,GAAS,IAAY,UACrBA,GAAS,EAAU,UACnBA,GAAS,IAAY,UAClB,SACT,CAQO,SAAS0L,EAAkB1L,GAChC,OAAIA,GAAS,IAAY,KACrBA,GAAS,EAAU,KACnBA,GAAS,IAAY,KACrBA,GAAS,EAAU,KACnBA,GAAS,IAAY,KACrBA,GAAS,EAAU,KACnBA,GAAS,IAAY,KAClB,IACT,CAUA,SAAS8C,EAA0BxB,EAAQ0H,GAGzC,IAAK,MAAMtD,IAAW,CAAC,YAAa,eAAgB,WAClD,IAAK,MAAMtC,KAASlL,OAAOyH,KAAK2B,EAAOoE,IAAW,CAE3CpE,EAAOoE,GAAStC,KACnB9B,EAAOoE,GAAStC,GAAS,GAI3B,MAAMuI,EAAiB3C,EAAW,GAAM,GAAOA,EAAW,GAAM,GAAM,GAGtE1H,EAAOoE,GAAStC,GAASxL,KAAKW,IAAI,EAAK+I,EAAOoE,GAAStC,GAASuI,GAG5D/T,KAAKgU,SAAW,KAClBtK,EAAOoE,GAAStC,GAAS,EAE7B,CAEJ,C,0cC18BA,MAAMyI,GAAeC,EAAAA,EAAAA,MAGfC,GAAcC,EAAAA,EAAAA,KAGdC,GAAcrV,EAAAA,EAAAA,KAAI,GAClBmK,GAAcnK,EAAAA,EAAAA,IAAI,MAClBsV,GAAetV,EAAAA,EAAAA,IAAI,IAMzB,SAASuV,EAAY/O,GACnB,GAAKA,GAAYyO,EAAaO,MAAKC,GAAKA,EAAEC,KAAOlP,IAOjD,IACE,MAAMkE,GAASiL,EAAAA,EAAAA,IAAiBnP,EAAS2O,GAEzC,GAAIzK,EAAQ,CACVP,EAAYrJ,MAAQ0F,EAEpB,MAAMoP,EAAYX,EAAaO,MAAKC,GAAKA,EAAEC,KAAOlP,KAAUqP,MAAQrP,EACpExE,QAAQkI,IAAI,wBAAwB0L,IACtC,CACF,CAAE,MAAO/T,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBuT,EAAaxU,MAAQiB,CAAG,GAE5B,MAnBED,EAAAA,EAAAA,IAAY,IAAII,MAAM,qBAAsBH,IAC1CuT,EAAaxU,MAAQiB,CAAG,GAmB9B,CAMA,SAAS+T,EAAiBtP,GACxB,IACE,MAAMuP,GAAMC,EAAAA,EAAAA,IAAuBxP,GAEnC,IAAKuP,EAIH,YAHAjU,EAAAA,EAAAA,IAAY,IAAII,MAAM,wCAAyCH,IAC7DuT,EAAaxU,MAAQiB,CAAG,IAMxBkU,UAAUC,MACZD,UAAUC,MAAM,CACdC,MAAO,GAAG3P,EAAQ4P,OAAO,GAAGC,cAAgB7P,EAAQ8P,MAAM,uBAC1DC,KAAM,4DACNR,IAAKA,IACJS,OAAMC,KACP3U,EAAAA,EAAAA,IAAY2U,GAAM1U,IAChBuT,EAAaxU,MAAQiB,CAAG,IAE1B2U,EAAgBX,EAAI,IAItBW,EAAgBX,EAEpB,CAAE,MAAOlU,IACPC,EAAAA,EAAAA,IAAYD,GAAQE,IAClBuT,EAAaxU,MAAQiB,CAAG,GAE5B,CACF,CAKA,SAAS2U,EAAgBH,GACvBN,UAAUU,UAAUC,UAAUL,GAC3BM,MAAK,KACJxB,EAAYvU,OAAQ,EACpBgW,YAAW,KACTzB,EAAYvU,OAAQ,CAAK,GACxB,IAAK,IAET0V,OAAMC,KACL3U,EAAAA,EAAAA,IAAY2U,GAAM1U,IAChBuT,EAAaxU,MAAQiB,CAAG,IAG1B,IACE,MAAMgV,EAAWC,SAASC,cAAc,YACxCF,EAASjW,MAAQyV,EACjBS,SAASE,KAAKC,YAAYJ,GAC1BA,EAASK,SACTJ,SAASK,YAAY,QACrBL,SAASE,KAAKI,YAAYP,GAC1B1B,EAAYvU,OAAQ,EACpBgW,YAAW,KACTzB,EAAYvU,OAAQ,CAAK,GACxB,IACL,CAAE,MAAOyW,IACPzV,EAAAA,EAAAA,IAAYyV,GAAgBxV,IAC1BuT,EAAaxU,MAAQiB,CAAG,GAE5B,IAEN,C,g3DCnKA,MAAMyV,GAA2B,OAAgB,EAAQ,CAAC,CAAC,YAAY,qBAEvE,O","sources":["webpack://my-new-project/./src/domains/sentiment/store/sentimentSettings.js","webpack://my-new-project/./src/domains/sentiment/utils/partyBudgetSentiment.js","webpack://my-new-project/./src/domains/sentiment/utils/computeSentimentScores.js","webpack://my-new-project/./src/domains/social/components/PartyBudgetSharing.vue","webpack://my-new-project/./src/domains/social/components/PartyBudgetSharing.vue?9a05"],"sourcesContent":["// sentimentSettings.js\n// Store for managing public sentiment sensitivity settings\nimport { defineStore } from 'pinia';\nimport { ref, computed } from 'vue';\nimport { handleError } from '@/utils/errorHandler.js';\nimport { createValidatedAction } from '@/utils/storeActionWrapper.js';\n\nexport const useSentimentSettingsStore = defineStore('sentimentSettings', () => {\n  // Sensitivity settings\n  const sensitivity = ref({\n    overall: 1.0,\n    regions: 1.0,\n    demographics: 1.0,\n    sectors: 1.0\n  });\n\n  // Thresholds for different sentiment levels\n  const thresholds = ref({\n    warning: 0.3,\n    critical: 0.7\n  });\n\n  // Update frequency in milliseconds\n  const updateFrequency = ref(1000);\n  const lastUpdate = ref(Date.now());\n\n  // Computed properties\n  const shouldUpdate = computed(() => {\n    return Date.now() - lastUpdate.value > updateFrequency.value;\n  });\n\n  const isWarningLevel = computed(() => {\n    return Math.abs(sensitivity.value.overall) > thresholds.value.warning;\n  });\n\n  const isCriticalLevel = computed(() => {\n    return Math.abs(sensitivity.value.overall) > thresholds.value.critical;\n  });\n\n  // Actions\n  const setSensitivity = createValidatedAction('sentiment', 'sensitivity', function(category, value) {\n    if (Object.prototype.hasOwnProperty.call(sensitivity.value, category)) {\n      sensitivity.value[category] = Math.max(0, Math.min(2, value));\n      try {\n        saveToLocalStorage();\n      } catch (error) {\n        handleError(error, (msg) => {\n          console.warn(`[SENTIMENT SETTINGS] Failed to save sensitivity settings: ${msg}`);\n        });\n      }\n    } else {\n      handleError(new Error(`Invalid sensitivity category: ${category}`), (msg) => {\n        console.warn(`[SENTIMENT SETTINGS] ${msg}`);\n      });\n    }\n  });\n\n  const setThreshold = createValidatedAction('sentiment', 'thresholds', function(level, value) {\n    if (Object.prototype.hasOwnProperty.call(thresholds.value, level)) {\n      thresholds.value[level] = Math.max(0, Math.min(1, value));\n      try {\n        saveToLocalStorage();\n      } catch (error) {\n        handleError(error, (msg) => {\n          console.warn(`[SENTIMENT SETTINGS] Failed to save threshold settings: ${msg}`);\n        });\n      }\n    } else {\n      handleError(new Error(`Invalid threshold level: ${level}`), (msg) => {\n        console.warn(`[SENTIMENT SETTINGS] ${msg}`);\n      });\n    }\n  });\n\n  const setUpdateFrequency = createValidatedAction('sentiment', 'updateFrequency', function(frequency) {\n    updateFrequency.value = Math.max(100, Math.min(5000, frequency));\n    try {\n      saveToLocalStorage();\n    } catch (error) {\n      handleError(error, (msg) => {\n        console.warn(`[SENTIMENT SETTINGS] Failed to save update frequency: ${msg}`);\n      });\n    }\n  });\n\n  const resetAll = () => {\n    sensitivity.value = {\n      overall: 1.0,\n      regions: 1.0,\n      demographics: 1.0,\n      sectors: 1.0\n    };\n    thresholds.value = {\n      warning: 0.3,\n      critical: 0.7\n    };\n    updateFrequency.value = 1000;\n    try {\n      saveToLocalStorage();\n    } catch (error) {\n      handleError(error, (msg) => {\n        console.warn(`[SENTIMENT SETTINGS] Failed to save reset settings: ${msg}`);\n      });\n    }\n  };\n\n  const loadFromLocalStorage = () => {\n    if (typeof window !== 'undefined') {\n      try {\n        const saved = localStorage.getItem('sentimentSettings');\n        if (saved) {\n          try {\n            const parsed = JSON.parse(saved);\n            sensitivity.value = parsed.sensitivity || sensitivity.value;\n            thresholds.value = parsed.thresholds || thresholds.value;\n            updateFrequency.value = parsed.updateFrequency || updateFrequency.value;\n          } catch (parseError) {\n            handleError(parseError, (msg) => {\n              console.warn(`[SENTIMENT SETTINGS] Failed to parse saved settings: ${msg}`);\n            });\n          }\n        }\n      } catch (storageError) {\n        handleError(storageError, (msg) => {\n          console.warn(`[SENTIMENT SETTINGS] Failed to access localStorage: ${msg}`);\n        });\n      }\n    }\n  };\n\n  const saveToLocalStorage = () => {\n    if (typeof window !== 'undefined') {\n      try {\n        const settings = {\n          sensitivity: sensitivity.value,\n          thresholds: thresholds.value,\n          updateFrequency: updateFrequency.value\n        };\n        localStorage.setItem('sentimentSettings', JSON.stringify(settings));\n      } catch (error) {\n        handleError(error, (msg) => {\n          throw new Error(`Failed to save sentiment settings: ${msg}`);\n        });\n      }\n    }\n  };\n\n  // Initialize\n  loadFromLocalStorage();\n\n  return {\n    sensitivity,\n    thresholds,\n    updateFrequency,\n    lastUpdate,\n    shouldUpdate,\n    isWarningLevel,\n    isCriticalLevel,\n    setSensitivity,\n    setThreshold,\n    setUpdateFrequency,\n    resetAll,\n    loadFromLocalStorage,\n    saveToLocalStorage\n  };\n});\n","// Party-specific modifiers for public sentiment calculations\n// These adjust sentiment scores based on party ideology and voter alignment\n\n/**\n * Political science-based modifiers for each party's connection to different voter segments\n * Positive numbers indicate greater alignment/support (sentiment boost)\n * Negative numbers indicate opposition/resistance (sentiment penalty)\n * Values generally range from -0.3 (strong opposition) to +0.3 (strong support)\n */\nexport const partyRegionalModifiers = {\n  liberal: {\n    ontario:         0.15,\n    quebec:          0.25,\n    newBrunswick:    0.30,\n    novaScotia:      0.30,\n    pei:             0.25,\n    newfoundland:    0.25,\n    manitoba:        0.05,\n    saskatchewan:   -0.15,\n    alberta:        -0.25,\n    britishColumbia: 0.15,\n    yukon:           0.20,\n    northwest:       0.20,\n    nunavut:         0.20\n  },\n  conservative: {\n    ontario:         0.10,\n    quebec:         -0.15,\n    newBrunswick:    0.05,\n    novaScotia:     -0.05,\n    pei:            -0.10,\n    newfoundland:   -0.15,\n    manitoba:        0.25,\n    saskatchewan:    0.55,\n    alberta:         0.60,\n    britishColumbia: 0.20,\n    yukon:           0.10,\n    northwest:       0.00,\n    nunavut:        -0.10\n  },\n  ndp: {\n    ontario:         0.10,\n    quebec:          0.10,\n    newBrunswick:    0.00,\n    novaScotia:      0.10,\n    pei:             0.00,\n    newfoundland:    0.10,\n    manitoba:        0.20,\n    saskatchewan:    -0.30,\n    alberta:        -0.35,\n    britishColumbia: 0.35,\n    yukon:           0.10,\n    northwest:       0.20,\n    nunavut:         0.20\n  }\n};\n\nexport const partyDemographicModifiers = {\n  liberal: {\n    middleClass:       0.25,\n    upperMiddleClass:  0.30,\n    wealthy:           0.15,\n    seniors:           0.20,\n    workingFamilies:   0.20,\n    ruralCommunities: -0.15,\n    urbanDwellers:     0.30,\n    youngAdults:       0.20,\n    immigrants:        0.30,\n    indigenousPeoples: 0.20\n  },\n  conservative: {\n    middleClass:       0.10,\n    upperMiddleClass:  0.20,\n    wealthy:           0.30,\n    seniors:           0.25,\n    workingFamilies:   0.10,\n    ruralCommunities:  0.30,\n    urbanDwellers:    -0.15,\n    youngAdults:      -0.15,\n    immigrants:       -0.05,\n    indigenousPeoples:-0.10\n  },\n  ndp: {\n    middleClass:       0.10,\n    upperMiddleClass:  0.05,\n    wealthy:          -0.30,\n    seniors:           0.10,\n    workingFamilies:   0.30,\n    ruralCommunities:  0.10,\n    urbanDwellers:     0.20,\n    youngAdults:       0.30,\n    immigrants:        0.20,\n    indigenousPeoples: 0.30\n  }\n};\n\nexport const partySectorModifiers = {\n  liberal: {\n    healthcare:       0.30,\n    education:        0.30,\n    infrastructure:   0.30,\n    energy:           0.10,\n    manufacturing:    0.10,\n    technology:       0.30,\n    agriculture:      0.10,\n    naturalResources: 0.10,\n    publicServices:   0.20,\n    finance:          0.20,\n    tourism:          0.10,\n    smallBusiness:    0.10\n  },\n  conservative: {\n    healthcare:       0.05,\n    education:       -0.05,\n    infrastructure:   0.20,\n    energy:           0.30,\n    manufacturing:    0.20,\n    technology:       0.10,\n    agriculture:      0.30,\n    naturalResources: 0.30,\n    publicServices:  -0.10,\n    finance:          0.30,\n    tourism:          0.10,\n    smallBusiness:    0.20\n  },\n  ndp: {\n    healthcare:       0.30,\n    education:        0.30,\n    infrastructure:   0.20,\n    energy:          -0.10,\n    manufacturing:    0.20,\n    technology:       0.10,\n    agriculture:      0.10,\n    naturalResources:-0.10,\n    publicServices:   0.30,\n    finance:         -0.20,\n    tourism:          0.10,\n    smallBusiness:    0.20\n  }\n};\n\n/**\n * Policy-specific modifiers for how each party's budget approach is received\n * These adjust sentiment based on how specific policies align with party ideology\n */\nexport const policyAlignmentModifiers = {\n  liberal: {\n    highCorporateTax:        0.1,\n    highPersonalTax:        -0.1,\n    carbonPricing:           0.2,\n    highDeficit:             0.0,\n    defenseSpending:         0.1,\n    socialPrograms:          0.2,\n    infrastructureSpending:   0.3\n  },\n  conservative: {\n    highCorporateTax:       -0.3,\n    highPersonalTax:        -0.3,\n    carbonPricing:          -0.3,\n    highDeficit:            -0.3,\n    defenseSpending:         0.3,\n    socialPrograms:         -0.1,\n    infrastructureSpending:  0.2\n  },\n  ndp: {\n    highCorporateTax:        0.3,\n    highPersonalTax:         0.1,\n    carbonPricing:           0.3,\n    highDeficit:             0.1,\n    defenseSpending:        -0.2,\n    socialPrograms:          0.3,\n    infrastructureSpending:   0.2\n  }\n};\n\n/**\n * Calculate party ideology alignment for different budget parameters\n * @param {Object} budget - The current budget data object\n * @param {String} partyId - The party ID (liberal, conservative, ndp)\n * @returns {Object} Modifier scores for this budget based on party ideology\n */\nexport function calculatePolicyAlignmentScore(budget, partyId) {\n  const m = policyAlignmentModifiers[partyId] || {};\n  const res = {};\n\n  const { revenueMix = {}, spendingMix = {} } = budget;\n  const deficit = budget.totalSpending - budget.totalRevenue;\n\n  // Corporate tax\n  const ct = revenueMix.corporateIncomeTax;\n  if (ct !== undefined)\n    res.corporateTaxAlign = ct > 17 ? m.highCorporateTax : ct < 13 ? -m.highCorporateTax : 0;\n\n  // Personal tax\n  const pt = revenueMix.personalIncomeTax;\n  if (pt !== undefined)\n    res.personalTaxAlign = pt > 22 ? m.highPersonalTax : pt < 20 ? -m.highPersonalTax : 0;\n\n  // Carbon pricing\n  const cp = revenueMix.carbonPricing;\n  if (cp !== undefined)\n    res.carbonPricingAlign = cp > 1.2 ? m.carbonPricing : cp < 0.5 ? -m.carbonPricing : 0;\n\n  // Deficit\n  res.deficitAlign = deficit > 40 ? m.highDeficit : deficit < 10 ? -m.highDeficit : 0;\n\n  // Defense\n  const ds = spendingMix.defense;\n  if (ds !== undefined)\n    res.defenseAlign = ds > 1.1 ? m.defenseSpending : ds < 0.9 ? -m.defenseSpending : 0;\n\n  // Social programs (avg of key fields)\n  const socials = [\"healthcare\",\"childrenAndFamilies\",\"supportForSeniors\",\"indigenousServices\"]\n    .map(k => spendingMix[k]).filter(v => typeof v === \"number\");\n  if (socials.length) {\n    const avg = socials.reduce((a,v) => a+v,0)/socials.length;\n    res.socialProgramsAlign = avg>1.1?m.socialPrograms:avg<0.9?-m.socialPrograms:0;\n  }\n\n  return res;\n}\n\n/**\n * Get a party sentiment modifier for a specific segment\n * @param {String} partyId - The party ID\n * @param {String} segmentType - 'provinces'|'demographics'|'sectors'\n * @param {String} segmentId - Specific segment ID\n * @returns {Number} The sentiment modifier (-0.3 to +0.3)\n */\nexport function getPartySegmentModifier(partyId, segmentType, segmentId) {\n  const maps = {\n    provinces: partyRegionalModifiers,\n    demographics: partyDemographicModifiers,\n    sectors: partySectorModifiers\n  };\n  return maps[segmentType]?.[partyId]?.[segmentId] ?? 0;\n}\n\n/**\n * Apply policy alignment effects to a sentiment score\n * @param {Number} baseScore - Original sentiment score (0–100)\n * @param {Object} policyScores - Output of calculatePolicyAlignmentScore\n * @param {String} segmentType - 'provinces'|'demographics'|'sectors'\n * @param {String} segmentId - Specific segment ID\n * @returns {Number} Adjusted sentiment score (0–100)\n */\nexport function applyPolicyAlignmentToScore(baseScore, policyScores, segmentType, segmentId) {\n  if (!policyScores || !Object.keys(policyScores).length) return baseScore;\n\n  const weights = {\n    provinces: {\n      corporateTaxAlign: { alberta:0.8, ontario:0.6, quebec:0.4 },\n      carbonPricingAlign:{ alberta:1.0,saskatchewan:0.8,britishColumbia:0.7 }\n    },\n    demographics: {\n      socialProgramsAlign:{ workingFamilies:0.9,seniors:0.8,youngAdults:0.7 }\n    },\n    sectors: {\n      corporateTaxAlign:{ finance:1.0,manufacturing:0.8,technology:0.7 }\n    }\n  }[segmentType]||{};\n\n  let sum=0, wsum=0;\n  for (const [policy, score] of Object.entries(policyScores)) {\n    const w = weights[policy]?.[segmentId] ?? 0.5;\n    sum += score * w; wsum += w;\n  }\n  if (!wsum) return baseScore;\n  \n  const adj = sum/wsum * 10; \n  return Math.max(0, Math.min(100, baseScore + adj));\n}\n","// src/utils/computeSentimentScores.js\n// src/utils/computeSentimentScores.js\n\nimport { sentimentConfig, REACTIVITY_AMPLIFIER, CLAMP_RANGE, OVERRIDE_THRESHOLD } from '@/domains/sentiment/config/sentimentConfig.js'\nimport { applyBadgeModifiers } from '@/domains/badges/config/badgeSentimentModifiers.js'\nimport { budgetScenarioModifiers } from '@/domains/budget/config/budgetScenarioModifiers.js'\n\n/**\n * Computes sentiment scores for each category group (provinces, demographics, sectors)\n * from the provided budget data based on the reaction triggers defined in sentimentConfig.\n *\n * @param {Object} budget - The budget data containing budgetItems, revenueMix, etc.\n * @param {Array} earnedBadges - Optional array of badge objects that the user has earned.\n * @param {String} activePreset - Optional active budget preset key (e.g., 'balancedBudget', 'progressiveExpansion').\n * @returns {Object} An object containing sentiment scores for provinces, demographics, and sectors.\n */\n\n// Universal penalty config - using actual revenue amounts in billions of dollars\nconst REVENUE_AMOUNT_BOUNDS = {\n  personalIncomeTaxAmount: { min: 90, max: 315 }, // $90B-$315B (10% lower bounds for personal income tax)\n  corporateIncomeTaxAmount: { min: 36, max: 135 }, // $36B-$135B (10% lower bounds for corporate income tax)\n  gstAmount: { min: 27, max: 90 }, // $27B-$90B (10% lower bounds for GST)\n  // These bounds represent realistic revenue ranges based on historical data\n  // and economic projections for a country with an economy similar to Canada's\n  // Thresholds reduced by 10% to make fiscal chaos detection more sensitive\n};\n\n// Import party-specific sentiment modifiers\nimport { \n  getPartySegmentModifier, \n  calculatePolicyAlignmentScore,\n  applyPolicyAlignmentToScore \n} from './partyBudgetSentiment';\n\n// Helper function to clamp values between -1 and 1\nfunction clamp(value) {\n  return Math.max(-CLAMP_RANGE, Math.min(CLAMP_RANGE, value));\n}\n\nexport function computeSentimentScores(budget, earnedBadges = [], activePreset = null, sensitivitySettings = null) {\n  // Debug log for revenueMix\n  // eslint-disable-next-line no-console\n  console.log('⚙️ revenueMix:', budget?.revenueMix);\n\n  // Check if a party budget is active\n  const activeParty = activePreset?.startsWith('party-') \n    ? activePreset.replace('party-', '') \n    : null;\n\n  // Log activePreset for preset-triggered recomputation\n  if (activePreset) {\n    console.log(`[PRESET][DEBUG] Sentiment recomputation triggered by preset: ${activePreset}`);\n    if (activeParty) {\n      console.log(`[PARTY][DEBUG] Party-specific sentiment modifiers will be applied for: ${activeParty}`);\n    }\n  }\n  \n  // Ensure we have valid sensitivity settings\n  const sensSettings = sensitivitySettings || {\n    overall: 1.0,\n    regions: 1.0,\n    demographics: 1.0,\n    sectors: 1.0\n  };\n  \n  // Defensive: Ensure budget and budget.revenueMix are defined\n  if (!budget || !budget.revenueMix) {\n    console.warn('[Sentiment] Missing or invalid budget or budget.revenueMix');\n    return {\n      provinces: {},\n      demographics: {},\n      sectors: {},\n      overall: 3,\n      fiscalChaos: false\n    };\n  }\n  let isFiscalChaos = false;\n  \n  // Force reload of configuration\n  console.log('Computing sentiment with updated configuration:', new Date().toISOString());\n  const result = {\n    provinces: {},\n    demographics: {},\n    sectors: {}\n  }\n\n  const allConfigs = {\n    provinces: sentimentConfig.provinces,\n    demographics: sentimentConfig.demographics,\n    sectors: sentimentConfig.sectors\n  }\n\n  // --- UNIVERSAL PENALTY LOGIC (CHECK TAX RATES AND AMOUNTS) ---\n// Now keys match directly to revenueMix\n// First, ensure we have a valid revenueMix object with fallback values\nconst defaultRates = {\n  personalIncomeTax: 21,\n  corporateIncomeTax: 15,\n  gst: 5,\n  carbonPricing: 1,\n  exciseTaxes: 2.5,\n  eiPremiums: 1.35,\n  customsDuties: 1,\n  crownProfits: 2.5,\n  nonTaxRevenue: 3,\n  resourceRoyalties: 1\n};\n\n// Default amounts (in billions) based on default rates\nconst defaultAmounts = {\n  personalIncomeTaxAmount: 210,\n  corporateIncomeTaxAmount: 80,\n  gstAmount: 50,\n  carbonPricingAmount: 10,\n  exciseTaxesAmount: 25,\n  eiPremiumsAmount: 13.5,\n  customsDutiesAmount: 10,\n  crownProfitsAmount: 25,\n  nonTaxRevenueAmount: 30,\n  resourceRoyaltiesAmount: 10\n};\n\n// Create a complete revenueMix with fallbacks\nconst revenueMix = {};\n\n// Copy all tax rates with fallbacks\nfor (const key in defaultRates) {\n  // Try to get the rate from the budget, fall back to default if not found\n  revenueMix[key] = typeof budget.revenueMix?.[key] === 'number' ? \n    budget.revenueMix[key] : defaultRates[key];\n}\n\n// Copy all revenue amounts with fallbacks\nfor (const key in defaultAmounts) {\n  // Try to get the amount from the budget, fall back to default if not found\n  revenueMix[key] = typeof budget.revenueMix?.[key] === 'number' ? \n    budget.revenueMix[key] : defaultAmounts[key];\n}\n\n// Now check for fiscal chaos with our complete revenueMix using amount values\nlet outOfBoundsCount = 0;\nlet totalChecked = 0;\n\nfor (const [key, bounds] of Object.entries(REVENUE_AMOUNT_BOUNDS)) {\n  const amount = revenueMix[key];\n  if (typeof amount !== 'number') {\n    console.warn(`[FiscalChaos] Skipping ${key}: no amount found in revenueMix`);\n    continue;\n  }\n  totalChecked++;\n  console.log(`[FiscalChaos] Checking ${key}: amount=${amount}B, bounds=($${bounds.min}B, $${bounds.max}B)`);\n  // Only count as \"fiscal chaos\" if amount is more than 30% outside of bounds\n  if (amount < bounds.min * 0.7 || amount > bounds.max * 1.3) {\n    outOfBoundsCount++;\n    console.log(`[FiscalChaos] ${key} is out of bounds: $${amount}B is outside ($${bounds.min}B, $${bounds.max}B)`);\n  }\n}\n\n// Only trigger fiscal chaos if at least 1 revenue source is this extreme AND 30% of checked sources are this extreme\nif (outOfBoundsCount >= 1 && (outOfBoundsCount / totalChecked) >= 0.3) {\n  isFiscalChaos = true;\n  console.log(`[FiscalChaos] Triggered: ${outOfBoundsCount}/${totalChecked} revenue sources are more than 30% out of bounds`);\n}\n\n// Apply fiscal chaos penalties if needed\nif (isFiscalChaos) {\n  applyFiscalChaosPenalties(result, outOfBoundsCount / totalChecked);\n  console.log(`[FiscalChaos] Applied severe penalties to all sentiment scores due to ${outOfBoundsCount} extreme revenue sources`);\n}\n\n// Apply sensitivity multipliers to final scores\nconst overallMultiplier = sensSettings.overall ?? 1.0;\nconst regionsMultiplier = sensSettings.regions ?? 1.0;\nconst demographicsMultiplier = sensSettings.demographics ?? 1.0;\nconst sectorsMultiplier = sensSettings.sectors ?? 1.0;\n\nconsole.log(`[SENSITIVITY] Using multipliers - Overall: ${overallMultiplier}, Regions: ${regionsMultiplier}, Demographics: ${demographicsMultiplier}, Sectors: ${sectorsMultiplier}`);\n  \n// Function to apply sensitivity to a group of scores with specific multiplier\nconst applySensitivityToGroup = (group, groupMultiplier = 1.0) => {\n  const result = {};\n  \n  for (const [key, score] of Object.entries(group)) {\n    // Apply sensitivity by adjusting distance from neutral\n    const distanceFromNeutral = score - 3;\n    // Apply both the overall multiplier and the group-specific multiplier\n    const combinedMultiplier = overallMultiplier * groupMultiplier;\n    const adjustedDistance = distanceFromNeutral * combinedMultiplier;\n    result[key] = Math.max(1, Math.min(5, 3 + adjustedDistance));\n  }\n  \n  return result;\n};\n\n\n\n  // Check for deficit-related triggers that affect fiscal anxiety\n  const deficit = budget?.fiscalIndicators?.deficit || 0;\n  const debtToGdpRatio = budget?.fiscalIndicators?.debtToGdpRatio || 0;\n  const hasHighDeficit = deficit > 50; // $50B threshold (updated to align with new fiscal risk system)\n  const hasRisingDebtRatio = debtToGdpRatio > 45; // 45% threshold\n  \n  // Track groups that should be absolutely overridden\n  const overriddenGroups = { provinces: new Set(), demographics: new Set(), sectors: new Set() };\n  // Cap logic: Block positive sentiment if surplus or deficit caps are broken\n  const capBroken = (budget?.fiscalIndicators?.surplus > 50000000000) || (budget?.fiscalIndicators?.deficit < -50000000000);\n\n  for (const [groupType, groups] of Object.entries(allConfigs)) {\n    for (const [group, config] of Object.entries(groups)) {\n      // Start with baseline score if provided, otherwise use neutral (3)\n      let score;\n      \n      if (config.baselineScore !== undefined) {\n        // Use the baseline score as starting point\n        score = config.baselineScore;\n        \n        // Apply fiscal anxiety penalties for deficit-sensitive groups\n        if (config.deficitSensitivity && hasHighDeficit) {\n          score -= config.deficitSensitivity * (deficit - 50) / 20; // Scale by how much over $50B\n        }\n        \n        if (config.debtRatioSensitivity && hasRisingDebtRatio) {\n          score -= config.debtRatioSensitivity * (debtToGdpRatio - 45) / 10; // Scale by how much over 45%\n        }\n      } else {\n        // Compute score based on triggers if no baseline provided\n        // Pass group context for sensitivity multipliers\n        let groupContext = {};\n        if (groupType === 'provinces') groupContext.province = group;\n        if (groupType === 'demographics') groupContext.demographic = group;\n        if (groupType === 'sectors') groupContext.sector = group;\n        \n        // Get score result with precedence information\n        const scoreResult = computeScore(config.triggers, budget, groupContext, sensitivitySettings);\n        score = scoreResult.score;\n        \n        // Store active triggers in a tracker object for badge processing\n        // This will be used later when applying badge modifiers\n        if (!result.activeTriggersByGroup) {\n          result.activeTriggersByGroup = {};\n        }\n        if (!result.activeTriggersByGroup[groupType]) {\n          result.activeTriggersByGroup[groupType] = {};\n        }\n        result.activeTriggersByGroup[groupType][group] = scoreResult.activeTriggers || [];\n        \n        // If this group has precedence rules active, track it\n        if (scoreResult.hasPrecedence) {\n          overriddenGroups[groupType].add(group);\n          console.log(`[PRECEDENCE] ${groupType}.${group} has active precedence rules`);\n        }\n      }\n\n      // If cap broken, clamp sentiment to neutral or negative\n      if (capBroken && score > 3) {\n        score = 3;\n      }\n      \n      // Apply trigger-based adjustments on top of baseline\n      // Pass group context for sensitivity multipliers\n      let groupContext = {};\n      if (groupType === 'provinces') groupContext.province = group;\n      if (groupType === 'demographics') groupContext.demographic = group;\n      if (groupType === 'sectors') groupContext.sector = group;\n      \n      // Get score result with precedence information\n      const scoreResult = computeScore(config.triggers, budget, groupContext, sensitivitySettings);\n      const triggerScore = scoreResult.score;\n      \n      // Store active triggers in the tracker object for badge processing\n      if (!result.activeTriggersByGroup) {\n        result.activeTriggersByGroup = {};\n      }\n      if (!result.activeTriggersByGroup[groupType]) {\n        result.activeTriggersByGroup[groupType] = {};\n      }\n      result.activeTriggersByGroup[groupType][group] = scoreResult.activeTriggers || [];\n      \n      // If this group has precedence rules active, track it\n      if (scoreResult.hasPrecedence) {\n        overriddenGroups[groupType].add(group);\n        console.log(`[PRECEDENCE] ${groupType}.${group} has active precedence rules`);\n        // When precedence rules are active, use only the trigger score (no blending)\n        score = triggerScore;\n      } else if (config.baselineScore !== undefined) {\n        // Blend baseline with trigger adjustments (weighted more toward triggers)\n        score = score * 0.4 + triggerScore * 0.6;\n      }\n      \n      // Ensure score stays within valid range\n      score = Math.max(1, Math.min(5, score));\n      \n      // Check if any override tax trigger is active for this group\n      const overrideTriggerKeys = [\n        'revenueMix.personalIncomeTax',\n        'revenueMix.gst',\n        'revenueMix.hst',\n        'taxExpenditures.personalIncomeTaxCredits.adjustmentPercent'\n      ];\n      let overrideActive = false;\n      if (config && config.triggers) {\n        for (const key of overrideTriggerKeys) {\n          const trig = config.triggers[key];\n          if (trig) {\n            const value = getNestedValue(budget, key);\n            if ((trig.min !== undefined && value >= trig.min) || (trig.max !== undefined && value <= trig.max)) {\n              overrideActive = true;\n              break;\n            }\n          }\n        }\n      }\n      // If override trigger is active, force score to 1.5 (very negative)\n      if (overrideActive) {\n        result[groupType][group] = 1.5;\n        overriddenGroups[groupType].add(group);\n        console.log(`[SENTIMENT OVERRIDE] ${groupType}:${group} forcibly set to 1.5 due to tax trigger`);\n      } else {\n        result[groupType][group] = amplifyScore(score);\n      }\n    }\n  }\n\n  // Apply scenario modifiers if an active preset is specified\n  if (activePreset && budgetScenarioModifiers[activePreset]) {\n    const scenarioModifiers = budgetScenarioModifiers[activePreset];\n    \n    for (const section of Object.keys(result)) {\n      if (section === 'overall') continue;\n      \n      const sectionModifiers = scenarioModifiers[section];\n      if (sectionModifiers) {\n        for (const [group, score] of Object.entries(result[section])) {\n          if (sectionModifiers[group] !== undefined) {\n            // Apply scenario modifier with a weight of 0.4 (significant but not overwhelming)\n            result[section][group] = Math.max(1, Math.min(5, score + sectionModifiers[group] * 0.4));\n          }\n        }\n      }\n    }\n  }\n  \n  // Apply party-specific sentiment modifiers if a party budget is active\n  if (activeParty) {\n    console.log(`[PARTY][DEBUG] Applying ${activeParty} party sentiment modifiers`);\n    \n    // Calculate policy alignment scores based on budget parameters and party ideology\n    const policyAlignmentScores = calculatePolicyAlignmentScore(budget, activeParty);\n    console.log(`[PARTY][DEBUG] Policy alignment scores:`, policyAlignmentScores);\n    \n    // Apply modifiers to provinces\n    for (const [province, score] of Object.entries(result.provinces || {})) {\n      // Get the base modifier for this province and party\n      const provinceModifier = getPartySegmentModifier(activeParty, 'provinces', province);\n      \n      // Apply the base modifier (scaled by sensitivity)\n      const modifiedScore = score + (provinceModifier * 10 * sensSettings.regions);\n      \n      // Apply policy alignment effects\n      const finalScore = applyPolicyAlignmentToScore(\n        modifiedScore, \n        policyAlignmentScores, \n        'provinces', \n        province\n      );\n      \n      // Ensure score stays within bounds (1-5)\n      result.provinces[province] = Math.max(1, Math.min(5, finalScore));\n      \n      // Log significant changes\n      if (Math.abs(result.provinces[province] - score) > 0.5) {\n        console.log(`[PARTY][DEBUG] ${province} sentiment adjusted from ${score.toFixed(1)} to ${result.provinces[province].toFixed(1)} due to ${activeParty} party alignment`);\n      }\n    }\n    \n    // Apply modifiers to demographics\n    for (const [demographic, score] of Object.entries(result.demographics || {})) {\n      // Get the base modifier for this demographic and party\n      const demographicModifier = getPartySegmentModifier(activeParty, 'demographics', demographic);\n      \n      // Apply the base modifier (scaled by sensitivity)\n      const modifiedScore = score + (demographicModifier * 10 * sensSettings.demographics);\n      \n      // Apply policy alignment effects\n      const finalScore = applyPolicyAlignmentToScore(\n        modifiedScore, \n        policyAlignmentScores, \n        'demographics', \n        demographic\n      );\n      \n      // Ensure score stays within bounds (1-5)\n      result.demographics[demographic] = Math.max(1, Math.min(5, finalScore));\n      \n      // Log significant changes\n      if (Math.abs(result.demographics[demographic] - score) > 0.5) {\n        console.log(`[PARTY][DEBUG] ${demographic} sentiment adjusted from ${score.toFixed(1)} to ${result.demographics[demographic].toFixed(1)} due to ${activeParty} party alignment`);\n      }\n    }\n    \n    // Apply modifiers to sectors\n    for (const [sector, score] of Object.entries(result.sectors || {})) {\n      // Get the base modifier for this sector and party\n      const sectorModifier = getPartySegmentModifier(activeParty, 'sectors', sector);\n      \n      // Apply the base modifier (scaled by sensitivity)\n      const modifiedScore = score + (sectorModifier * 10 * sensSettings.sectors);\n      \n      // Apply policy alignment effects\n      const finalScore = applyPolicyAlignmentToScore(\n        modifiedScore, \n        policyAlignmentScores, \n        'sectors', \n        sector\n      );\n      \n      // Ensure score stays within bounds (1-5)\n      result.sectors[sector] = Math.max(1, Math.min(5, finalScore));\n      \n      // Log significant changes\n      if (Math.abs(result.sectors[sector] - score) > 0.5) {\n        console.log(`[PARTY][DEBUG] ${sector} sentiment adjusted from ${score.toFixed(1)} to ${result.sectors[sector].toFixed(1)} due to ${activeParty} party alignment`);\n      }\n    }\n  }\n\n  // Apply badge modifiers to each score, unless overridden by precedence rules\n  if (earnedBadges && earnedBadges.length > 0) {\n    // Ensure overriddenGroups is properly initialized\n    const safeOverriddenGroups = overriddenGroups || { provinces: new Set(), demographics: new Set(), sectors: new Set() };\n    \n    for (const section of Object.keys(result)) {\n      if (section === 'overall') continue;\n      \n      // Ensure this section exists in overriddenGroups\n      if (!safeOverriddenGroups[section]) {\n        safeOverriddenGroups[section] = new Set();\n      }\n      \n      for (const [group, score] of Object.entries(result[section])) {\n        // Skip badge modifiers for overridden groups (those with active precedence rules)\n        if (!safeOverriddenGroups[section].has(group)) {\n          // Get active triggers for this group from our tracker\n          const groupActiveTriggers = result.activeTriggersByGroup?.[section]?.[group] || [];\n          \n          // Apply badge modifiers with active triggers for precedence checking\n          console.log(`[BADGE] Applying badge modifiers for ${section}.${group} with ${groupActiveTriggers.length} active triggers`);\n          result[section][group] = applyBadgeModifiers(earnedBadges, section, group, score, groupActiveTriggers);\n        } else {\n          console.log(`[BADGE] Skipping badge modifiers for ${section}.${group} due to precedence rules`);\n        }\n      }\n    }\n  }\n\n  // === FISCAL CHAOS: Personal Income Tax extreme penalty ===\n  const personalIncomeTaxAmount = revenueMix.personalIncomeTaxAmount;\n  if (personalIncomeTaxAmount > 360 || personalIncomeTaxAmount < 72) {\n    for (const section of ['provinces', 'demographics', 'sectors']) {\n      for (const group of Object.keys(result[section])) {\n        result[section][group] = 1.5;\n      }\n    }\n    result.overall = 1.5;\n    return result;\n  }\n\n  // Apply sensitivity to all groups with their specific multipliers\n  const adjustedProvinces = applySensitivityToGroup(result.provinces, regionsMultiplier);\n  const adjustedDemographics = applySensitivityToGroup(result.demographics, demographicsMultiplier);\n  const adjustedSectors = applySensitivityToGroup(result.sectors, sectorsMultiplier);\n  \n  console.log(`[SENSITIVITY] Applied group-specific multipliers: Regions=${regionsMultiplier}, Demographics=${demographicsMultiplier}, Sectors=${sectorsMultiplier}`);\n  \n  // Calculate overall score with adjusted values\n  const overallScore = calculateOverallScore({ \n    provinces: adjustedProvinces, \n    demographics: adjustedDemographics, \n    sectors: adjustedSectors \n  }, activeParty);\n  \n  console.log(`[SENSITIVITY] Applied overall multiplier ${overallMultiplier} to final scores`);\n  \n  // Add extra debug logging to track the fiscal chaos state\n  console.log(`[FiscalChaos] ⚠️ FINAL STATE: ${isFiscalChaos === true ? 'TRUE' : 'FALSE'}`);\n  console.log(`[FiscalChaos] ⚠️ Out of bounds sources: ${outOfBoundsCount}/${totalChecked}`);\n  console.log(`[FiscalChaos] ⚠️ Percentage: ${(outOfBoundsCount / totalChecked) * 100}%`);\n  \n  // Return the final result object with sensitivity-adjusted scores\n  const finalResult = {\n    provinces: adjustedProvinces,\n    demographics: adjustedDemographics,\n    sectors: adjustedSectors,\n    overall: overallScore,\n    fiscalChaos: isFiscalChaos === true\n  };\n  \n  console.log('FINAL sentiment result:', JSON.stringify(finalResult, null, 2));\n  \n  return finalResult;\n}\n\n// --- Utility functions for sentiment scoring below ---\n\n/**\n * Calculate the overall sentiment score from all group scores\n * @param {Object} result The sentiment result object with provinces, demographics, and sectors\n * @param {String} activeParty Optional active party ID for party-specific adjustments\n * @return {number} The calculated overall sentiment score\n */\nfunction calculateOverallScore(result, activeParty = null) {\n  const groupWeights = {\n    provinces: 0.4, // Provinces have highest impact\n    demographics: 0.3, // Demographic groups have medium impact\n    sectors: 0.3 // Economic sectors have medium impact\n  };\n  \n  let overallScore = 0;\n  let totalWeight = 0;\n  \n  for (const [groupType, weight] of Object.entries(groupWeights)) {\n    const groupScores = Object.values(result[groupType] || {});\n    if (groupScores.length > 0) {\n      const groupAverage = groupScores.reduce((sum, score) => sum + score, 0) / groupScores.length;\n      overallScore += groupAverage * weight;\n      totalWeight += weight;\n    }\n  }\n  \n  let finalScore = totalWeight > 0 ? overallScore / totalWeight : 3;\n  \n  // Apply party-specific adjustments to overall score if a party budget is active\n  if (activeParty) {\n    // Party-specific overall sentiment adjustments\n    // These reflect how the general public perceives each party's approach\n    const partyOverallModifiers = {\n      liberal: 0.1,     // Liberal budgets get a slight boost (centrist approach)\n      conservative: 0,  // Conservative budgets neutral (polarizing effect balances out)\n      ndp: -0.1         // NDP budgets slight penalty (more polarizing approach)\n    };\n    \n    // Apply the party-specific modifier to the overall score\n    const modifier = partyOverallModifiers[activeParty] || 0;\n    const adjustedScore = finalScore + modifier;\n    \n    // Log the adjustment if significant\n    if (Math.abs(modifier) > 0.05) {\n      console.log(`[PARTY][DEBUG] Overall sentiment adjusted from ${finalScore.toFixed(2)} to ${adjustedScore.toFixed(2)} due to ${activeParty} party effect`);\n    }\n    \n    finalScore = adjustedScore;\n  }\n  \n  // Ensure score stays within bounds (1-5)\n  return Math.max(1, Math.min(5, finalScore));\n}\n\nimport { useSentimentSettingsStore } from '@/domains/sentiment/store/sentimentSettings'\n\nfunction getSensitivityMultiplier({ province, demographic, sector }, sensitivitySettings = null) {\n  let settings = sensitivitySettings;\n  if (!settings) {\n    const sentimentSettings = useSentimentSettingsStore();\n    settings = {\n      overall: sentimentSettings.overall ?? 1.0,\n      regions: sentimentSettings.regions ?? 1.0,\n      demographics: sentimentSettings.demographics ?? 1.0,\n      sectors: sentimentSettings.sectors ?? 1.0\n    };\n  }\n  \n  let multiplier = settings.overall ?? 1.0;\n  \n  if (province) {\n    multiplier *= settings.regions ?? 1.0;\n  } else if (demographic) {\n    multiplier *= settings.demographics ?? 1.0;\n  } else if (sector) {\n    multiplier *= settings.sectors ?? 1.0;\n  }\n  \n  return multiplier;\n}\n\n// Import sentiment precedence rules\nimport { \n  getPrecedenceLevel, \n  getPrecedenceOverride,\n  PRECEDENCE_LEVELS,\n  TRIGGER_PATHS\n} from '@/domains/sentiment/config/sentimentPrecedenceRules';\n\n// Helper function to check if a value is within tolerance of a target value\nfunction isWithinTolerance(value, target, tolerancePercent = 1) {\n  // Minimum absolute tolerance or percentage-based\n  const absTolerance = Math.max(0.0001, Math.abs(target) * (tolerancePercent / 100));\n  return Math.abs(value - target) <= absTolerance;\n}\n\n// Helper function to check if a value matches a trigger with tolerance\nfunction matchesTrigger(value, trigger) {\n  if (Object.prototype.hasOwnProperty.call(trigger, 'min') && value < trigger.min) return false;\n  if (Object.prototype.hasOwnProperty.call(trigger, 'max')) {\n    // Special case for zero/near-zero values with extra tolerance\n    if (trigger.max < 0.1 && isWithinTolerance(value, 0, 5)) {\n      return true;\n    }\n    if (value > trigger.max) return false;\n  }\n  return true;\n}\n\nfunction computeScore(triggers, budget, groupContext = {}, sensitivitySettings = null) {\n  // Extract entity information for precedence checking\n  const { province, demographic, sector } = groupContext;\n  const entity = province || demographic || sector;\n  const category = province ? 'provinces' : (demographic ? 'demographics' : 'sectors');\n  \n  // Track effects with their precedence levels\n  const effects = [];\n  const activeTriggers = [];\n  const criticalAlerts = []; // New array to track critical alerts\n  \n  // Track weighted scores for aggregation\n  let weightedSum = 0;\n  let totalWeight = 0;\n  \n  // Check for data-driven precedence overrides first\n  // This handles special cases like high carbon pricing in Alberta/Saskatchewan\n  if (entity && category === 'provinces') {\n    // Get the carbon pricing value directly from the budget\n    const carbonPricingValue = getNestedValue(budget, TRIGGER_PATHS.CARBON_PRICING);\n    \n    if (typeof carbonPricingValue === 'number') {\n      // Check if any precedence override applies based on the config rules\n      const override = getPrecedenceOverride(\n        TRIGGER_PATHS.CARBON_PRICING, \n        entity, \n        category, \n        carbonPricingValue\n      );\n      \n      // If an override applies, add it with absolute precedence\n      if (override) {\n        console.log(`[PRECEDENCE] 🔄 Applied data-driven override for ${override.path} to ${entity} with value ${carbonPricingValue}`);\n        \n        // Add to effects with the override's path (which might be .high suffix)\n        effects.push({\n          path: override.path,\n          score: 1, // Minimum score (extremely negative)\n          precedence: override.level // Use the level from the rule\n        });\n        \n        // Add to active triggers\n        activeTriggers.push(override.path);\n      }\n    }\n  }\n  \n  // First pass: collect all applicable triggers and their effects\n  for (const [path, triggerConfig] of Object.entries(triggers)) {\n    // Handle array-based triggers (like Saskatchewan's carbon tax)\n    if (Array.isArray(triggerConfig)) {\n      const value = getNestedValue(budget, path);\n      if (value === undefined || isNaN(value)) continue;\n      \n      // Check each condition in the array\n      for (const condition of triggerConfig) {\n        const { min, max, score, severity, weight = 1.0 } = condition;\n        \n        // Check if the budget value passes either the minimum or maximum condition\n        const passesMin = min !== undefined && value >= min;\n        const passesMax = max !== undefined && value <= max;\n        \n        if (passesMin || passesMax) {\n          if (path === 'revenueMix.carbonPricing') {\n            console.log(`[CARBON TAX][MATCH] Province: ${entity}, Matched Trigger:`, triggerConfig, `Score: ${score}`);\n          }\n          \n          // Check if this is a critical alert\n          if (Math.abs(score) > OVERRIDE_THRESHOLD || severity === 'extreme') {\n            criticalAlerts.push({\n              path,\n              score,\n              severity,\n              value,\n              entity,\n              category\n            });\n            console.log(`[CRITICAL] Found critical alert for ${category}.${entity}: ${path} with score ${score}`);\n            continue; // Skip normal processing for critical alerts\n          }\n          \n          // Normal processing for non-critical triggers\n          const clampedScore = clamp(score);\n          \n          // Apply group weight and sensitivity\n          const groupWeight = weight || 1.0;\n          const sensitivityMultiplier = getSensitivityMultiplier(groupContext, sensitivitySettings);\n          const weightedScore = clampedScore * groupWeight * sensitivityMultiplier;\n          \n          weightedSum += weightedScore;\n          totalWeight += groupWeight;\n          \n          // Continue with existing processing for effects array\n          const amplifiedScore = amplifyScore(clampedScore);\n          const distanceFromNeutral = amplifiedScore - 3;\n          const adjustedDistance = distanceFromNeutral * sensitivityMultiplier;\n          const finalScore = Math.max(1, Math.min(5, 3 + adjustedDistance));\n          \n          // For array-based triggers, create a special trigger path for high values\n          // This ensures it matches the precedence rules\n          let effectivePath = path;\n          \n          // For high values, add a .high suffix to the path for precedence checking\n          // Note: Special cases like carbon pricing are now handled by the data-driven override system\n          // This is kept for other triggers that might need high-value detection\n          if (min !== undefined && min >= 2 * 0.1) { // Using MIN_MULTIPLIER = 0.1 as reference\n            effectivePath = `${path}.high`;\n            console.log(`[PRECEDENCE] Detected high value for ${path}, using ${effectivePath} for precedence check`);\n          }\n          \n          // Get precedence level for this trigger\n          const precedence = getPrecedenceLevel(effectivePath, entity, category);\n          \n          // Add to effects array with precedence info\n          effects.push({\n            path: effectivePath,\n            score: finalScore,\n            precedence\n          });\n          \n          // Track active triggers for badge modifier precedence check\n          activeTriggers.push(effectivePath);\n          \n          console.log(`[PRECEDENCE] Trigger \"${effectivePath}\" has precedence level ${precedence} for ${category}.${entity}`);\n        }\n      }\n    } else {\n      // Handle regular object-based triggers\n      const { min, max, score, severity, weight = 1.0 } = triggerConfig;\n      const value = getNestedValue(budget, path);\n      if (value === undefined || isNaN(value)) continue;\n      \n      // Special debug logging for carbon pricing\n      if (path === 'revenueMix.carbonPricing') {\n        console.log(`[CARBON TAX][DEBUG] Province: ${entity}, Value: ${value}, TriggerConfig:`, triggerConfig);\n        if (value <= 0.05) {\n          console.log(`[CARBON TAX][CRITICAL] Near-zero carbon tax value detected: ${value}`);\n        }\n      }\n\n      // Use the tolerance-based matching function\n      if (matchesTrigger(value, triggerConfig)) {\n        // Check if this is a critical alert\n        if (Math.abs(score) > OVERRIDE_THRESHOLD || severity === 'extreme') {\n          criticalAlerts.push({\n            path,\n            score,\n            severity,\n            value,\n            entity,\n            category\n          });\n          console.log(`[CRITICAL] Found critical alert for ${category}.${entity}: ${path} with score ${score}`);\n          continue; // Skip normal processing for critical alerts\n        }\n        \n        // Normal processing for non-critical triggers\n        const clampedScore = clamp(score);\n        \n        // Apply group weight and sensitivity\n        const groupWeight = weight || 1.0;\n        const sensitivityMultiplier = getSensitivityMultiplier(groupContext, sensitivitySettings);\n        const weightedScore = clampedScore * groupWeight * sensitivityMultiplier;\n        \n        weightedSum += weightedScore;\n        totalWeight += groupWeight;\n        \n        // Continue with existing processing\n        const amplifiedScore = amplifyScore(clampedScore);\n        const distanceFromNeutral = amplifiedScore - 3;\n        const adjustedScore = 3 + (distanceFromNeutral * sensitivityMultiplier);\n        \n        // Special case for carbon pricing in Alberta/Saskatchewan\n        let finalScore = adjustedScore;\n        let effectivePath = path;\n        \n        if (path === 'revenueMix.carbonPricing' && value >= 0.4 && \n            (entity === 'Alberta' || entity === 'Saskatchewan')) {\n          // For high carbon tax rates in Alberta/Saskatchewan, force extreme negative sentiment\n          effectivePath = `${path}.high`;\n          console.log(`[CARBON TAX] 🔴 Detected high carbon pricing value ${value} for ${entity}, using ${effectivePath}`);\n          \n          if (distanceFromNeutral < 0) {\n            // Make even more negative for strong opposition\n            finalScore = Math.max(1, Math.min(2, finalScore - 1));\n            console.log(`[CARBON TAX] 🔴 Enforcing strong negative sentiment for ${entity}: score=${finalScore}`);\n          }\n        }\n        \n        // Get precedence level for this trigger\n        const precedence = getPrecedenceLevel(effectivePath, entity, category);\n        \n        // Add to effects array with precedence info\n        effects.push({\n          path: effectivePath,\n          score: finalScore,\n          precedence,\n          value,\n          severity: triggerConfig.severity || 'normal'\n        });\n        \n        // Track active triggers for badge modifier precedence check\n        activeTriggers.push(`${path} = ${value} (${min || '-∞'} to ${max || '∞'})`);\n        \n        if (precedence === PRECEDENCE_LEVELS.ABSOLUTE || precedence === PRECEDENCE_LEVELS.HIGH) {\n          console.log(`[PRECEDENCE] Trigger \"${effectivePath}\" has precedence level ${precedence} for ${category}.${entity}`);\n        }\n      }\n    }\n  }\n  \n  // Calculate aggregate raw score\n  const aggregateRaw = totalWeight > 0 ? weightedSum / totalWeight : 0;\n  console.log(`[AGGREGATE] Raw score for ${category}.${entity}: ${aggregateRaw} (weighted sum: ${weightedSum}, total weight: ${totalWeight})`);\n  \n  // Calculate final sentiment value using new formula\n  const sentimentValue = Math.max(1, Math.min(5, Math.round(3 + 2 * aggregateRaw)));\n  console.log(`[SENTIMENT] Calculated sentiment value: ${sentimentValue} from aggregateRaw: ${aggregateRaw}`);\n  \n  // If we have critical alerts, handle them first\n  if (criticalAlerts.length > 0) {\n    console.log(`[CRITICAL] Processing ${criticalAlerts.length} critical alerts for ${category}.${entity}`);\n    \n    // Calculate the average of critical alerts\n    const criticalTotal = criticalAlerts.reduce((sum, alert) => sum + alert.score, 0);\n    const criticalAverage = criticalTotal / criticalAlerts.length;\n    \n    // Return the critical score with the alerts\n    return {\n      score: Math.max(1, Math.min(5, criticalAverage)), // Use criticalAverage instead of sentimentValue\n      activeTriggers: criticalAlerts.map(alert => alert.path),\n      hasPrecedence: true,\n      criticalAlerts,\n      aggregateRaw\n    };\n  }\n  \n  // Check for absolute precedence triggers\n  const absoluteEffects = effects.filter(e => e.precedence === PRECEDENCE_LEVELS.ABSOLUTE);\n  \n  if (absoluteEffects.length > 0) {\n    // If we have absolute precedence effects, they override everything else\n    console.log(`[PRECEDENCE] Absolute precedence found for ${category}.${entity}: ${absoluteEffects.map(e => e.path).join(', ')}`);\n    \n    // Use the average of all absolute precedence effects\n    const total = absoluteEffects.reduce((sum, effect) => sum + effect.score, 0);\n    const absoluteScore = total / absoluteEffects.length;\n    \n    // Apply badges only if allowed by precedence rules\n    return {\n      score: Math.max(1, Math.min(5, absoluteScore)), // Use absoluteScore instead of sentimentValue\n      activeTriggers,\n      hasPrecedence: true,\n      aggregateRaw\n    };\n  }\n  \n  // No absolute precedence, proceed with normal calculation\n  let total = 0;\n  let count = 0;\n  \n  for (const effect of effects) {\n    total += effect.score;\n    count++;\n  }\n\n  // Calculate the average score\n  if (count) {\n    console.log('[SCORE DEBUG] Calculated score:', {\n      total,\n      count,\n      averageScore: total / count,\n      finalScore: sentimentValue // Use new sentiment value\n    });\n    \n    // Return the score and active triggers for badge processing\n    return {\n      score: sentimentValue, // Use new sentiment value\n      activeTriggers,\n      hasPrecedence: false,\n      aggregateRaw\n    };\n  } else {\n    // Return neutral with empty active triggers\n    return {\n      score: sentimentValue, // Use new sentiment value\n      activeTriggers: [],\n      hasPrecedence: false,\n      aggregateRaw\n    };\n  }\n}\n\n/**\n * Recursively retrieves a nested value from an object using a dot-separated path.\n *\n * @param {Object} obj - The object to query.\n * @param {string} path - Dot-separated path (e.g., \"budgetItems.healthcare\").\n * @returns {any} The value found at the path, or undefined if not found.\n */\nfunction getNestedValue(obj, path) {\n  // Handle special case for tax expenditure adjustment percentages\n  if (path.endsWith('.adjustmentPercent')) {\n    const basePath = path.replace('.adjustmentPercent', '');\n    const baseObj = getNestedValue(obj, basePath);\n    return baseObj?.adjustmentPercent;\n  }\n  \n  const parts = path.split('.');\n  return parts.reduce((obj, part) => obj && obj[part] !== undefined ? obj[part] : undefined, obj)\n}\n\n/**\n * Amplifies a sentiment score to make it more reactive by increasing its distance from neutral (3).\n * Applies extra negativity bias to make austerity budgets appear more negative.\n * Makes positive sentiments 15% less sensitive as requested.\n * \n * @param {number} score - The original sentiment score (1-5 scale with 3 as neutral)\n * @returns {number} The amplified score, still within the 1-5 range\n */\nfunction amplifyScore(score) {\n  // Get the reactivity amplifier from the module scope\n  const amplifier = REACTIVITY_AMPLIFIER;\n  \n  // Calculate distance from neutral (3)\n  const distanceFromNeutral = score - 3;\n  \n  // Apply balanced multiplier for both positive and negative scores\n  const biasMultiplier = 1.0; // Equal treatment for positive and negative scores\n  \n  // Amplify the distance with both the amplifier and appropriate bias\n  const amplifiedDistance = distanceFromNeutral * amplifier * biasMultiplier;\n  \n  // Calculate new score and ensure it stays within 1-5 range\n  return Math.max(1, Math.min(5, 3 + amplifiedDistance));\n}\n\n/**\n * Converts a numerical score (1-5) to a descriptive sentiment label\n * \n * @param {number} score - Numerical score (1-5)\n * @returns {string} - Descriptive sentiment label\n */\nexport function getSentimentLabel(score) {\n  if (score >= 4.5) return 'Enthusiastic';\n  if (score >= 4) return 'Supportive';\n  if (score >= 3.5) return 'Positive';\n  if (score >= 3) return 'Neutral';\n  if (score >= 2.5) return 'Concerned';\n  if (score >= 2) return 'Dissatisfied';\n  if (score >= 1.5) return 'Opposed';\n  return 'Outraged';\n}\n\n/**\n * Returns a color code based on sentiment score\n * \n * @param {number} score - Numerical score (1-5)\n * @returns {string} - Hex color code\n */\nexport function getSentimentColor(score) {\n  if (score >= 4.5) return '#38A169'; // green-600\n  if (score >= 4) return '#68D391';   // green-400\n  if (score >= 3.5) return '#9AE6B4'; // green-300\n  if (score >= 3) return '#CBD5E0';   // gray-400\n  if (score >= 2.5) return '#FBD38D'; // orange-300\n  if (score >= 2) return '#F6AD55';   // orange-400\n  if (score >= 1.5) return '#FC8181'; // red-400\n  return '#E53E3E';                   // red-600\n}\n\n/**\n * Returns emoji representation based on sentiment score\n * \n * @param {number} score - Numerical score (1-5)\n * @returns {string} - Emoji character\n */\nexport function getSentimentEmoji(score) {\n  if (score >= 4.5) return '😍';\n  if (score >= 4) return '😊';\n  if (score >= 3.5) return '🙂';\n  if (score >= 3) return '😐';\n  if (score >= 2.5) return '🤔';\n  if (score >= 2) return '😕';\n  if (score >= 1.5) return '😠';\n  return '😡';\n}\n\n\n\n/**\n * Apply fiscal chaos penalties to sentiment scores\n * \n * @param {Object} result - The sentiment result object\n * @param {number} severity - The severity factor (0-1)\n */\nfunction applyFiscalChaosPenalties(result, severity) {\n  // FORCE ALL SENTIMENT SCORES TO BE EXTREMELY NEGATIVE\n  // This ensures fiscal chaos has a dramatic and consistent effect\n  for (const section of ['provinces', 'demographics', 'sectors']) {\n    for (const group of Object.keys(result[section])) {\n      // Initialize the group in the result if it doesn't exist\n      if (!result[section][group]) {\n        result[section][group] = 3; // Start with neutral\n      }\n      \n      // Apply a very severe penalty based on how many sources are out of bounds\n      const severityFactor = severity > 0.5 ? 0.3 : (severity > 0.3 ? 0.4 : 0.5);\n      \n      // Force all scores to be very low - maximum 2.0 for any group\n      result[section][group] = Math.min(2.0, result[section][group] * severityFactor);\n      \n      // Ensure at least 30% of scores are at absolute minimum (1.0)\n      if (Math.random() < 0.3) {\n        result[section][group] = 1.0;\n      }\n    }\n  }\n}\n","<template>\n  <div class=\"party-budget-sharing bg-white rounded-lg shadow p-4 mb-4\">\n    <h3 class=\"text-lg font-semibold mb-2\">Canadian Party Budget Approaches (2025)</h3>\n    <p class=\"text-sm text-gray-600 mb-4\">Explore how different parties would shape Canada's finances</p>\n    \n    <div class=\"grid grid-cols-3 gap-3\">\n      <div \n        v-for=\"party in partyBudgets\" \n        :key=\"party.id\"\n        class=\"party-card flex flex-col rounded-md overflow-hidden shadow-sm\"\n      >\n        <!-- Party header with color branding -->\n        <div \n          class=\"party-header py-2 px-3 text-white text-center\"\n          :style=\"{ backgroundColor: party.buttonColor }\"\n        >\n          <h4 class=\"font-bold\">{{ party.name.replace(' Budget 2025', '') }}</h4>\n        </div>\n        \n        <!-- Action buttons -->\n        <div class=\"p-2 flex justify-between items-center gap-2\">\n          <button \n            @click=\"applyBudget(party.id)\"\n            class=\"action-button apply-button flex-1 py-2 px-3 text-xs font-medium rounded\"\n            :class=\"{ 'active': activeParty === party.id }\"\n          >\n            Apply\n          </button>\n          \n          <button \n            @click=\"sharePartyBudget(party.id)\"\n            class=\"action-button share-button flex items-center justify-center py-2 px-2 text-xs rounded\"\n          >\n            <svg class=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n              <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z\"></path>\n            </svg>\n          </button>\n        </div>\n      </div>\n    </div>\n    \n    <!-- Copy Success Message -->\n    <div v-if=\"copySuccess\" class=\"mt-3 text-green-600 text-sm flex items-center\">\n      <svg class=\"w-4 h-4 mr-1\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\">\n        <path stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M5 13l4 4L19 7\"></path>\n      </svg>\n      Link copied to clipboard!\n    </div>\n\n    <div v-if=\"errorMessage\" class=\"error-message\">{{ errorMessage }}</div>\n  </div>\n</template>\n\n<script setup>\nimport { ref } from 'vue';\nimport { getAvailablePartyBudgets, generatePartyBudgetUrl, applyPartyBudget } from '@/utils/partyBudgets';\nimport { useBudgetSimulatorStore } from '@/domains/budget/store/budgetSimulator';\nimport { handleError } from '@/utils/errorHandler.js';\n\n// Get party budgets from the utility\nconst partyBudgets = getAvailablePartyBudgets();\n\n// Get the budget store using Pinia\nconst budgetStore = useBudgetSimulatorStore();\n\n// State tracking\nconst copySuccess = ref(false);\nconst activeParty = ref(null);\nconst errorMessage = ref('');\n\n/**\n * Apply a party budget to the simulator, updating all sliders\n * @param {string} partyId - ID of the party budget to apply\n */\nfunction applyBudget(partyId) {\n  if (!partyId || !partyBudgets.find(p => p.id === partyId)) {\n    handleError(new Error('Invalid party ID'), (msg) => {\n      errorMessage.value = msg;\n    });\n    return;\n  }\n  \n  try {\n    const result = applyPartyBudget(partyId, budgetStore);\n    \n    if (result) {\n      activeParty.value = partyId;\n      // Show success message\n      const partyName = partyBudgets.find(p => p.id === partyId)?.name || partyId;\n      console.log(`Successfully applied ${partyName}`);\n    }\n  } catch (error) {\n    handleError(error, (msg) => {\n      errorMessage.value = msg;\n    });\n  }\n}\n\n/**\n * Share a party budget by copying link to clipboard or showing share sheet on mobile\n * @param {string} partyId - ID of the party budget to share\n */\nfunction sharePartyBudget(partyId) {\n  try {\n    const url = generatePartyBudgetUrl(partyId);\n    \n    if (!url) {\n      handleError(new Error('Failed to generate party budget URL'), (msg) => {\n        errorMessage.value = msg;\n      });\n      return;\n    }\n    \n    // If Web Share API is available (mobile devices)\n    if (navigator.share) {\n      navigator.share({\n        title: `${partyId.charAt(0).toUpperCase() + partyId.slice(1)} Party Budget 2025`,\n        text: 'Check out this budget simulation for the 2025 fiscal year',\n        url: url\n      }).catch(err => {\n        handleError(err, (msg) => {\n          errorMessage.value = msg;\n        });\n        copyToClipboard(url);\n      });\n    } else {\n      // Otherwise use clipboard\n      copyToClipboard(url);\n    }\n  } catch (error) {\n    handleError(error, (msg) => {\n      errorMessage.value = msg;\n    });\n  }\n}\n\n/**\n * Copy text to clipboard and show success message\n */\nfunction copyToClipboard(text) {\n  navigator.clipboard.writeText(text)\n    .then(() => {\n      copySuccess.value = true;\n      setTimeout(() => {\n        copySuccess.value = false;\n      }, 3000);\n    })\n    .catch(err => {\n      handleError(err, (msg) => {\n        errorMessage.value = msg;\n      });\n      // Fallback for older browsers\n      try {\n        const textarea = document.createElement('textarea');\n        textarea.value = text;\n        document.body.appendChild(textarea);\n        textarea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textarea);\n        copySuccess.value = true;\n        setTimeout(() => {\n          copySuccess.value = false;\n        }, 3000);\n      } catch (fallbackError) {\n        handleError(fallbackError, (msg) => {\n          errorMessage.value = msg;\n        });\n      }\n    });\n}\n</script>\n\n<style scoped>\n.party-budget-sharing {\n  border-top: 3px solid #e5e7eb;\n}\n\n.party-card {\n  transition: all 0.2s ease;\n  background-color: white;\n}\n\n.party-card:hover {\n  transform: translateY(-2px);\n  box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n}\n\n.party-header {\n  font-size: 0.9rem;\n}\n\n.action-button {\n  transition: all 0.2s ease;\n}\n\n.apply-button {\n  background-color: #f3f4f6;\n  color: #4b5563;\n  border: 1px solid #e5e7eb;\n}\n\n.apply-button:hover {\n  background-color: #e5e7eb;\n}\n\n.apply-button.active {\n  background-color: #10b981;\n  color: white;\n  border-color: #059669;\n}\n\n.share-button {\n  background-color: #f3f4f6;\n  color: #4b5563;\n  border: 1px solid #e5e7eb;\n}\n\n.share-button:hover {\n  background-color: #e5e7eb;\n}\n</style>\n","import script from \"./PartyBudgetSharing.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./PartyBudgetSharing.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./PartyBudgetSharing.vue?vue&type=style&index=0&id=4a53961d&scoped=true&lang=css\"\n\nimport exportComponent from \"../../../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4a53961d\"]])\n\nexport default __exports__"],"names":["useSentimentSettingsStore","defineStore","sensitivity","ref","overall","regions","demographics","sectors","thresholds","warning","critical","updateFrequency","lastUpdate","Date","now","shouldUpdate","computed","value","isWarningLevel","Math","abs","isCriticalLevel","setSensitivity","createValidatedAction","category","Object","prototype","hasOwnProperty","call","max","min","saveToLocalStorage","error","handleError","msg","console","warn","Error","setThreshold","level","setUpdateFrequency","frequency","resetAll","loadFromLocalStorage","window","saved","localStorage","getItem","parsed","JSON","parse","parseError","storageError","settings","setItem","stringify","partyRegionalModifiers","liberal","ontario","quebec","newBrunswick","novaScotia","pei","newfoundland","manitoba","saskatchewan","alberta","britishColumbia","yukon","northwest","nunavut","conservative","ndp","partyDemographicModifiers","middleClass","upperMiddleClass","wealthy","seniors","workingFamilies","ruralCommunities","urbanDwellers","youngAdults","immigrants","indigenousPeoples","partySectorModifiers","healthcare","education","infrastructure","energy","manufacturing","technology","agriculture","naturalResources","publicServices","finance","tourism","smallBusiness","policyAlignmentModifiers","highCorporateTax","highPersonalTax","carbonPricing","highDeficit","defenseSpending","socialPrograms","infrastructureSpending","calculatePolicyAlignmentScore","budget","partyId","m","res","revenueMix","spendingMix","deficit","totalSpending","totalRevenue","ct","corporateIncomeTax","undefined","corporateTaxAlign","pt","personalIncomeTax","personalTaxAlign","cp","carbonPricingAlign","deficitAlign","ds","defense","defenseAlign","socials","map","k","filter","v","length","avg","reduce","a","socialProgramsAlign","getPartySegmentModifier","segmentType","segmentId","maps","provinces","applyPolicyAlignmentToScore","baseScore","policyScores","keys","weights","sum","wsum","policy","score","entries","w","adj","REVENUE_AMOUNT_BOUNDS","personalIncomeTaxAmount","corporateIncomeTaxAmount","gstAmount","clamp","CLAMP_RANGE","computeSentimentScores","earnedBadges","activePreset","sensitivitySettings","log","activeParty","startsWith","replace","sensSettings","fiscalChaos","isFiscalChaos","toISOString","result","allConfigs","sentimentConfig","defaultRates","gst","exciseTaxes","eiPremiums","customsDuties","crownProfits","nonTaxRevenue","resourceRoyalties","defaultAmounts","carbonPricingAmount","exciseTaxesAmount","eiPremiumsAmount","customsDutiesAmount","crownProfitsAmount","nonTaxRevenueAmount","resourceRoyaltiesAmount","key","outOfBoundsCount","totalChecked","bounds","amount","applyFiscalChaosPenalties","overallMultiplier","regionsMultiplier","demographicsMultiplier","sectorsMultiplier","applySensitivityToGroup","group","groupMultiplier","distanceFromNeutral","combinedMultiplier","adjustedDistance","fiscalIndicators","debtToGdpRatio","hasHighDeficit","hasRisingDebtRatio","overriddenGroups","Set","capBroken","surplus","groupType","groups","config","baselineScore","deficitSensitivity","debtRatioSensitivity","groupContext","province","demographic","sector","scoreResult","computeScore","triggers","activeTriggersByGroup","activeTriggers","hasPrecedence","add","triggerScore","overrideTriggerKeys","overrideActive","trig","getNestedValue","amplifyScore","budgetScenarioModifiers","scenarioModifiers","section","sectionModifiers","policyAlignmentScores","provinceModifier","modifiedScore","finalScore","toFixed","demographicModifier","sectorModifier","safeOverriddenGroups","has","groupActiveTriggers","applyBadgeModifiers","adjustedProvinces","adjustedDemographics","adjustedSectors","overallScore","calculateOverallScore","finalResult","groupWeights","totalWeight","weight","groupScores","values","groupAverage","partyOverallModifiers","modifier","adjustedScore","getSensitivityMultiplier","sentimentSettings","multiplier","isWithinTolerance","target","tolerancePercent","absTolerance","matchesTrigger","trigger","entity","effects","criticalAlerts","weightedSum","carbonPricingValue","TRIGGER_PATHS","CARBON_PRICING","override","getPrecedenceOverride","path","push","precedence","triggerConfig","Array","isArray","isNaN","condition","severity","passesMin","passesMax","OVERRIDE_THRESHOLD","clampedScore","groupWeight","sensitivityMultiplier","weightedScore","amplifiedScore","effectivePath","getPrecedenceLevel","PRECEDENCE_LEVELS","ABSOLUTE","HIGH","aggregateRaw","sentimentValue","round","criticalTotal","alert","criticalAverage","absoluteEffects","e","join","total","effect","absoluteScore","count","averageScore","obj","endsWith","basePath","baseObj","adjustmentPercent","parts","split","part","amplifier","REACTIVITY_AMPLIFIER","biasMultiplier","amplifiedDistance","getSentimentLabel","getSentimentColor","getSentimentEmoji","severityFactor","random","partyBudgets","getAvailablePartyBudgets","budgetStore","useBudgetSimulatorStore","copySuccess","errorMessage","applyBudget","find","p","id","applyPartyBudget","partyName","name","sharePartyBudget","url","generatePartyBudgetUrl","navigator","share","title","charAt","toUpperCase","slice","text","catch","err","copyToClipboard","clipboard","writeText","then","setTimeout","textarea","document","createElement","body","appendChild","select","execCommand","removeChild","fallbackError","__exports__"],"sourceRoot":""}